
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v' to AST representation.
Generating RTLIL representation for module `\adder_tree_top'.
Generating RTLIL representation for module `\adder_tree_branch'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: adder_tree_branch   
root of   1 design levels: adder_tree_top      
Automatically selected adder_tree_top as design top module.

2.2. Analyzing design hierarchy..
Top module:  \adder_tree_top
Used module:     \adder_tree_branch
Parameter \EXTRA_BITS = 0

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\adder_tree_branch'.
Parameter \EXTRA_BITS = 0
Generating RTLIL representation for module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000'.
Parameter \EXTRA_BITS = 0
Found cached RTLIL representation for module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000'.
Parameter \EXTRA_BITS = 0
Found cached RTLIL representation for module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000'.
Parameter \EXTRA_BITS = 0
Found cached RTLIL representation for module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000'.
Parameter \EXTRA_BITS = 1

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\adder_tree_branch'.
Parameter \EXTRA_BITS = 1
Generating RTLIL representation for module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001'.
Parameter \EXTRA_BITS = 1
Found cached RTLIL representation for module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001'.
Parameter \EXTRA_BITS = 2

2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\adder_tree_branch'.
Parameter \EXTRA_BITS = 2
Generating RTLIL representation for module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010'.

2.6. Analyzing design hierarchy..
Top module:  \adder_tree_top
Used module:     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000
Used module:     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001
Used module:     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010

2.7. Analyzing design hierarchy..
Top module:  \adder_tree_top
Used module:     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000
Used module:     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001
Used module:     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010
Removing unused module `\adder_tree_branch'.
Removed 1 unused modules.
Mapping positional arguments of cell adder_tree_top.L3_3 ($paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000).
Mapping positional arguments of cell adder_tree_top.L3_2 ($paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000).
Mapping positional arguments of cell adder_tree_top.L3_1 ($paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000).
Mapping positional arguments of cell adder_tree_top.L3_0 ($paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000).
Mapping positional arguments of cell adder_tree_top.L2_1 ($paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001).
Mapping positional arguments of cell adder_tree_top.L2_0 ($paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001).
Mapping positional arguments of cell adder_tree_top.L1_0 ($paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 9 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\adder_tree_top.\sum' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$6' with positive edge clock.
Creating register for signal `\adder_tree_top.\sum0_0_0_0' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$7' with positive edge clock.
Creating register for signal `\adder_tree_top.\sum0_0_0_1' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$8' with positive edge clock.
Creating register for signal `\adder_tree_top.\sum0_0_1_0' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$9' with positive edge clock.
Creating register for signal `\adder_tree_top.\sum0_0_1_1' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$10' with positive edge clock.
Creating register for signal `\adder_tree_top.\sum0_1_0_0' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$11' with positive edge clock.
Creating register for signal `\adder_tree_top.\sum0_1_0_1' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$12' with positive edge clock.
Creating register for signal `\adder_tree_top.\sum0_1_1_0' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$13' with positive edge clock.
Creating register for signal `\adder_tree_top.\sum0_1_1_1' using process `\adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
  created $dff cell `$procdff$14' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `adder_tree_top.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/adder_trees/verilog/adder_tree_3L_064bits.v:38$1'.
Cleaned up 0 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001.
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000.
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010.
Optimizing module adder_tree_top.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001.
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000.
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010.
Optimizing module adder_tree_top.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000'.
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010'.
Finding identical cells in module `\adder_tree_top'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder_tree_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000.
  Optimizing cells in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010.
  Optimizing cells in module \adder_tree_top.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000'.
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010'.
Finding identical cells in module `\adder_tree_top'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000..
Finding unused cells or wires in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \adder_tree_top..
Removed 0 unused cells and 12 unused wires.
<suppressed ~4 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000.
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001.
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010.
Optimizing module adder_tree_top.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder_tree_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000.
  Optimizing cells in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010.
  Optimizing cells in module \adder_tree_top.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000'.
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010'.
Finding identical cells in module `\adder_tree_top'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000..
Finding unused cells or wires in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \adder_tree_top..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000.
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001.
Optimizing module $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010.
Optimizing module adder_tree_top.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000 ===

   Number of wires:                  3
   Number of wire bits:            193
   Number of public wires:           3
   Number of public wire bits:     193
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $add                            1

=== $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001 ===

   Number of wires:                  3
   Number of wire bits:            196
   Number of public wires:           3
   Number of public wire bits:     196
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $add                            1

=== $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010 ===

   Number of wires:                  3
   Number of wire bits:            199
   Number of public wires:           3
   Number of public wire bits:     199
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $add                            1

=== adder_tree_top ===

   Number of wires:                 25
   Number of wire bits:           1549
   Number of public wires:          25
   Number of public wire bits:    1549
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $dff                            9
     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000      4
     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001      2
     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010      1

=== design hierarchy ===

   adder_tree_top                    1
     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000000      4
     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000001      2
     $paramod\adder_tree_branch\EXTRA_BITS=s32'00000000000000000000000000000010      1

   Number of wires:                 46
   Number of wire bits:           2912
   Number of public wires:          46
   Number of public wire bits:    2912
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $add                            7
     $dff                            9

End of script. Logfile hash: 4bdb918fc3, CPU: user 0.05s system 0.00s, MEM: 12.45 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 2x opt_clean (0 sec), 16% 4x opt_expr (0 sec), ...
