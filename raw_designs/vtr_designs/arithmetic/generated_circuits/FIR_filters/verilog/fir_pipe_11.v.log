
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v' to AST representation.
Generating RTLIL representation for module `\fir'.
Generating RTLIL representation for module `\input_pipeline'.
Generating RTLIL representation for module `\adder_with_1_reg'.
Generating RTLIL representation for module `\multiplier_with_reg'.
Generating RTLIL representation for module `\one_register'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: one_register        
root of   0 design levels: multiplier_with_reg 
root of   0 design levels: adder_with_1_reg    
root of   0 design levels: input_pipeline      
root of   1 design levels: fir                 
Automatically selected fir as design top module.

2.2. Analyzing design hierarchy..
Top module:  \fir
Used module:     \adder_with_1_reg
Used module:     \one_register
Used module:     \multiplier_with_reg
Used module:     \input_pipeline
Parameter \WIDTH = 18

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\input_pipeline'.
Parameter \WIDTH = 18
Generating RTLIL representation for module `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010'.

2.4. Analyzing design hierarchy..
Top module:  \fir
Used module:     \adder_with_1_reg
Used module:     \one_register
Used module:     \multiplier_with_reg
Used module:     $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010

2.5. Analyzing design hierarchy..
Top module:  \fir
Used module:     \adder_with_1_reg
Used module:     \one_register
Used module:     \multiplier_with_reg
Used module:     $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010
Removing unused module `\input_pipeline'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9 in module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:75$2 in module fir.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
Found async reset \reset in `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:75$2'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\one_register.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:462$8'.
     1/1: $0\result[17:0]
Creating decoders for process `\multiplier_with_reg.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:440$6'.
     1/1: $0\result[17:0]
Creating decoders for process `\adder_with_1_reg.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:416$4'.
     1/1: $0\result[17:0]
Creating decoders for process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
     1/11: $0\pipeline_reg_10[17:0]
     2/11: $0\pipeline_reg_9[17:0]
     3/11: $0\pipeline_reg_8[17:0]
     4/11: $0\pipeline_reg_7[17:0]
     5/11: $0\pipeline_reg_6[17:0]
     6/11: $0\pipeline_reg_5[17:0]
     7/11: $0\pipeline_reg_4[17:0]
     8/11: $0\pipeline_reg_3[17:0]
     9/11: $0\pipeline_reg_2[17:0]
    10/11: $0\pipeline_reg_1[17:0]
    11/11: $0\pipeline_reg_0[17:0]
Creating decoders for process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:75$2'.
     1/1: $0\VALID_PIPELINE_REGS[15:0]
Creating decoders for process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:56$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\one_register.\result' using process `\one_register.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:462$8'.
  created $dff cell `$procdff$41' with positive edge clock.
Creating register for signal `\multiplier_with_reg.\result' using process `\multiplier_with_reg.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:440$6'.
  created $dff cell `$procdff$42' with positive edge clock.
Creating register for signal `\adder_with_1_reg.\result' using process `\adder_with_1_reg.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:416$4'.
  created $dff cell `$procdff$43' with positive edge clock.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_0' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$44' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_1' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$45' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_2' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$46' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_3' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$47' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_4' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$48' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_5' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$49' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_6' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$50' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_7' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$51' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_8' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$52' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_9' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$53' with positive edge clock and positive level reset.
Creating register for signal `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.\pipeline_reg_10' using process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
  created $adff cell `$procdff$54' with positive edge clock and positive level reset.
Creating register for signal `\fir.\VALID_PIPELINE_REGS' using process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:75$2'.
  created $adff cell `$procdff$55' with positive edge clock and positive level reset.
Creating register for signal `\fir.\COEFFICIENT_0' using process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:56$1'.
  created $dff cell `$procdff$56' with positive edge clock.
Creating register for signal `\fir.\COEFFICIENT_1' using process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:56$1'.
  created $dff cell `$procdff$57' with positive edge clock.
Creating register for signal `\fir.\COEFFICIENT_2' using process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:56$1'.
  created $dff cell `$procdff$58' with positive edge clock.
Creating register for signal `\fir.\COEFFICIENT_3' using process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:56$1'.
  created $dff cell `$procdff$59' with positive edge clock.
Creating register for signal `\fir.\COEFFICIENT_4' using process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:56$1'.
  created $dff cell `$procdff$60' with positive edge clock.
Creating register for signal `\fir.\COEFFICIENT_5' using process `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:56$1'.
  created $dff cell `$procdff$61' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\one_register.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:462$8'.
Removing empty process `one_register.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:462$8'.
Found and cleaned up 1 empty switch in `\multiplier_with_reg.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:440$6'.
Removing empty process `multiplier_with_reg.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:440$6'.
Found and cleaned up 1 empty switch in `\adder_with_1_reg.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:416$4'.
Removing empty process `adder_with_1_reg.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:416$4'.
Found and cleaned up 1 empty switch in `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
Removing empty process `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:357$9'.
Found and cleaned up 1 empty switch in `\fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:75$2'.
Removing empty process `fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:75$2'.
Removing empty process `fir.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:56$1'.
Cleaned up 5 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module one_register.
Optimizing module multiplier_with_reg.
Optimizing module adder_with_1_reg.
Optimizing module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.
Optimizing module fir.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module one_register.
Optimizing module multiplier_with_reg.
Optimizing module adder_with_1_reg.
Optimizing module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.
Optimizing module fir.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\one_register'.
Finding identical cells in module `\multiplier_with_reg'.
Finding identical cells in module `\adder_with_1_reg'.
Finding identical cells in module `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010'.
Finding identical cells in module `\fir'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \one_register..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \multiplier_with_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \adder_with_1_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fir..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \one_register.
  Optimizing cells in module \multiplier_with_reg.
  Optimizing cells in module \adder_with_1_reg.
  Optimizing cells in module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.
  Optimizing cells in module \fir.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\one_register'.
Finding identical cells in module `\multiplier_with_reg'.
Finding identical cells in module `\adder_with_1_reg'.
Finding identical cells in module `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010'.
Finding identical cells in module `\fir'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$41 ($dff) from module one_register (D = \dataa, Q = \result).
Adding EN signal on $procdff$42 ($dff) from module multiplier_with_reg (D = $mul$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:442$7_Y, Q = \result).
Adding EN signal on $procdff$43 ($dff) from module adder_with_1_reg (D = $add$/home/zhigang/DATA/raw_designs/vtr_designs/arithmetic/generated_circuits/FIR_filters/verilog/fir_pipe_11.v:418$5_Y, Q = \result).
Adding EN signal on $procdff$44 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \in_stream, Q = \pipeline_reg_0).
Adding EN signal on $procdff$45 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_0, Q = \pipeline_reg_1).
Adding EN signal on $procdff$46 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_1, Q = \pipeline_reg_2).
Adding EN signal on $procdff$47 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_2, Q = \pipeline_reg_3).
Adding EN signal on $procdff$48 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_3, Q = \pipeline_reg_4).
Adding EN signal on $procdff$49 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_4, Q = \pipeline_reg_5).
Adding EN signal on $procdff$50 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_5, Q = \pipeline_reg_6).
Adding EN signal on $procdff$51 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_6, Q = \pipeline_reg_7).
Adding EN signal on $procdff$52 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_7, Q = \pipeline_reg_8).
Adding EN signal on $procdff$53 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_8, Q = \pipeline_reg_9).
Adding EN signal on $procdff$54 ($adff) from module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 (D = \pipeline_reg_9, Q = \pipeline_reg_10).
Adding EN signal on $procdff$55 ($adff) from module fir (D = { \VALID_PIPELINE_REGS [14:0] \i_valid }, Q = \VALID_PIPELINE_REGS).
Setting constant 0-bit at position 0 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 1 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 2 on $procdff$56 ($dff) from module fir.
Setting constant 1-bit at position 3 on $procdff$56 ($dff) from module fir.
Setting constant 1-bit at position 4 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 5 on $procdff$56 ($dff) from module fir.
Setting constant 1-bit at position 6 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 7 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 8 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 9 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 10 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 11 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 12 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 13 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 14 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 15 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 16 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 17 on $procdff$56 ($dff) from module fir.
Setting constant 0-bit at position 0 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 1 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 2 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 3 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 4 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 5 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 6 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 7 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 8 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 9 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 10 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 11 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 12 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 13 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 14 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 15 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 16 on $procdff$57 ($dff) from module fir.
Setting constant 0-bit at position 17 on $procdff$57 ($dff) from module fir.
Setting constant 1-bit at position 0 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 1 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 2 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 3 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 4 on $procdff$58 ($dff) from module fir.
Setting constant 0-bit at position 5 on $procdff$58 ($dff) from module fir.
Setting constant 0-bit at position 6 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 7 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 8 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 9 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 10 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 11 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 12 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 13 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 14 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 15 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 16 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 17 on $procdff$58 ($dff) from module fir.
Setting constant 1-bit at position 0 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 1 on $procdff$59 ($dff) from module fir.
Setting constant 0-bit at position 2 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 3 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 4 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 5 on $procdff$59 ($dff) from module fir.
Setting constant 0-bit at position 6 on $procdff$59 ($dff) from module fir.
Setting constant 0-bit at position 7 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 8 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 9 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 10 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 11 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 12 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 13 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 14 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 15 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 16 on $procdff$59 ($dff) from module fir.
Setting constant 1-bit at position 17 on $procdff$59 ($dff) from module fir.
Setting constant 0-bit at position 0 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 1 on $procdff$60 ($dff) from module fir.
Setting constant 0-bit at position 2 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 3 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 4 on $procdff$60 ($dff) from module fir.
Setting constant 0-bit at position 5 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 6 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 7 on $procdff$60 ($dff) from module fir.
Setting constant 0-bit at position 8 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 9 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 10 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 11 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 12 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 13 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 14 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 15 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 16 on $procdff$60 ($dff) from module fir.
Setting constant 1-bit at position 17 on $procdff$60 ($dff) from module fir.
Setting constant 0-bit at position 0 on $procdff$61 ($dff) from module fir.
Setting constant 0-bit at position 1 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 2 on $procdff$61 ($dff) from module fir.
Setting constant 0-bit at position 3 on $procdff$61 ($dff) from module fir.
Setting constant 0-bit at position 4 on $procdff$61 ($dff) from module fir.
Setting constant 0-bit at position 5 on $procdff$61 ($dff) from module fir.
Setting constant 0-bit at position 6 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 7 on $procdff$61 ($dff) from module fir.
Setting constant 0-bit at position 8 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 9 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 10 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 11 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 12 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 13 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 14 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 15 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 16 on $procdff$61 ($dff) from module fir.
Setting constant 1-bit at position 17 on $procdff$61 ($dff) from module fir.

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \one_register..
Finding unused cells or wires in module \multiplier_with_reg..
Finding unused cells or wires in module \adder_with_1_reg..
Finding unused cells or wires in module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \fir..
Removed 15 unused cells and 51 unused wires.
<suppressed ~20 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.
Optimizing module adder_with_1_reg.
Optimizing module fir.
Optimizing module multiplier_with_reg.
Optimizing module one_register.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \adder_with_1_reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fir..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiplier_with_reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \one_register..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.
  Optimizing cells in module \adder_with_1_reg.
  Optimizing cells in module \fir.
  Optimizing cells in module \multiplier_with_reg.
  Optimizing cells in module \one_register.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010'.
Finding identical cells in module `\adder_with_1_reg'.
Finding identical cells in module `\fir'.
Finding identical cells in module `\multiplier_with_reg'.
Finding identical cells in module `\one_register'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010..
Finding unused cells or wires in module \adder_with_1_reg..
Finding unused cells or wires in module \fir..
Finding unused cells or wires in module \multiplier_with_reg..
Finding unused cells or wires in module \one_register..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010.
Optimizing module adder_with_1_reg.
Optimizing module fir.
Optimizing module multiplier_with_reg.
Optimizing module one_register.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010 ===

   Number of wires:                 15
   Number of wire bits:            219
   Number of public wires:          15
   Number of public wire bits:     219
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $adffe                         11

=== adder_with_1_reg ===

   Number of wires:                  6
   Number of wire bits:             74
   Number of public wires:           5
   Number of public wire bits:      56
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $add                            1
     $dffe                           1

=== fir ===

   Number of wires:                 43
   Number of wire bits:            687
   Number of public wires:          43
   Number of public wire bits:     687
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     $adffe                          1
     $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010      1
     adder_with_1_reg               10
     multiplier_with_reg             6
     one_register                    2

=== multiplier_with_reg ===

   Number of wires:                  6
   Number of wire bits:             74
   Number of public wires:           5
   Number of public wire bits:      56
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $dffe                           1
     $mul                            1

=== one_register ===

   Number of wires:                  4
   Number of wire bits:             38
   Number of public wires:           4
   Number of public wire bits:      38
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $dffe                           1

=== design hierarchy ===

   fir                               1
     $paramod\input_pipeline\WIDTH=s32'00000000000000000000000000010010      1
     adder_with_1_reg               10
     multiplier_with_reg             6
     one_register                    2

   Number of wires:                162
   Number of wire bits:           2166
   Number of public wires:         146
   Number of public wire bits:    1878
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     $add                           10
     $adffe                         12
     $dffe                          18
     $mul                            6

End of script. Logfile hash: e059740fa3, CPU: user 0.06s system 0.00s, MEM: 12.39 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 23% 2x opt_clean (0 sec), 15% 4x opt_expr (0 sec), ...
