
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v' to AST representation.
Generating RTLIL representation for module `\ifetch'.
Generating RTLIL representation for module `\dummy_counter'.
Generating RTLIL representation for module `\dual_port_ram'.
Generating RTLIL representation for module `\register_1bit'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: register_1bit       
root of   0 design levels: dual_port_ram       
root of   0 design levels: dummy_counter       
root of   1 design levels: ifetch              
Automatically selected ifetch as design top module.

2.2. Analyzing design hierarchy..
Top module:  \ifetch
Used module:     \dummy_counter
Used module:     \dual_port_ram
Used module:     \register_1bit
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 10

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 10
Generating RTLIL representation for module `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram'.

2.4. Analyzing design hierarchy..
Top module:  \ifetch
Used module:     \dummy_counter
Used module:     $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram
Used module:     \register_1bit

2.5. Analyzing design hierarchy..
Top module:  \ifetch
Used module:     \dummy_counter
Used module:     $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram
Used module:     \register_1bit
Removing unused module `\dual_port_ram'.
Removed 1 unused modules.
Mapping positional arguments of cell ifetch.pc_reg (dummy_counter).
Mapping positional arguments of cell ifetch.sync_pcs_up (register_1bit).
Warning: Resizing cell port ifetch.pc_reg.data from 31 bits to 30 bits.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:340$35 in module register_1bit.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:313$48 in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:304$40 in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:245$15 in module dummy_counter.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:245$15 in module dummy_counter.
Removed a total of 1 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\register_1bit.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:340$35'.
     1/1: $0\q[0:0]
Creating decoders for process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:313$48'.
     1/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:315$39_EN[31:0]$54
     2/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:315$39_DATA[31:0]$53
     3/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:315$39_ADDR[9:0]$52
     4/4: $0\out2[31:0]
Creating decoders for process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:304$40'.
     1/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:306$38_EN[31:0]$46
     2/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:306$38_DATA[31:0]$45
     3/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:306$38_ADDR[9:0]$44
     4/4: $0\out1[31:0]
Creating decoders for process `\dummy_counter.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:245$15'.
     1/1: $0\q[29:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\register_1bit.\q' using process `\register_1bit.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:340$35'.
  created $dff cell `$procdff$97' with positive edge clock.
Creating register for signal `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.\out2' using process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:313$48'.
  created $dff cell `$procdff$98' with positive edge clock.
Creating register for signal `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:315$39_ADDR' using process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:313$48'.
  created $dff cell `$procdff$99' with positive edge clock.
Creating register for signal `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:315$39_DATA' using process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:313$48'.
  created $dff cell `$procdff$100' with positive edge clock.
Creating register for signal `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:315$39_EN' using process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:313$48'.
  created $dff cell `$procdff$101' with positive edge clock.
Creating register for signal `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.\out1' using process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:304$40'.
  created $dff cell `$procdff$102' with positive edge clock.
Creating register for signal `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:306$38_ADDR' using process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:304$40'.
  created $dff cell `$procdff$103' with positive edge clock.
Creating register for signal `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:306$38_DATA' using process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:304$40'.
  created $dff cell `$procdff$104' with positive edge clock.
Creating register for signal `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:306$38_EN' using process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:304$40'.
  created $dff cell `$procdff$105' with positive edge clock.
Creating register for signal `\dummy_counter.\q' using process `\dummy_counter.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:245$15'.
  created $dff cell `$procdff$106' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\register_1bit.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:340$35'.
Removing empty process `register_1bit.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:340$35'.
Found and cleaned up 1 empty switch in `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:313$48'.
Removing empty process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:313$48'.
Found and cleaned up 1 empty switch in `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:304$40'.
Removing empty process `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:304$40'.
Found and cleaned up 2 empty switches in `\dummy_counter.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:245$15'.
Removing empty process `dummy_counter.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:245$15'.
Cleaned up 6 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_1bit.
<suppressed ~3 debug messages>
Optimizing module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
Optimizing module dummy_counter.
<suppressed ~1 debug messages>
Optimizing module ifetch.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_1bit.
Optimizing module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
Optimizing module dummy_counter.
Optimizing module ifetch.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_1bit'.
Finding identical cells in module `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram'.
Finding identical cells in module `\dummy_counter'.
Finding identical cells in module `\ifetch'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_1bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dummy_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ifetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_1bit.
  Optimizing cells in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
    Consolidated identical input bits for $mux cell $procmux$74:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$74_Y
      New ports: A=1'0, B=1'1, Y=$procmux$74_Y [0]
      New connections: $procmux$74_Y [31:1] = { $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] $procmux$74_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$62:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$62_Y
      New ports: A=1'0, B=1'1, Y=$procmux$62_Y [0]
      New connections: $procmux$62_Y [31:1] = { $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] $procmux$62_Y [0] }
  Optimizing cells in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
  Optimizing cells in module \dummy_counter.
    New ctrl vector for $pmux cell $procmux$85: { $auto$opt_reduce.cc:134:opt_mux$110 $procmux$91_CMP $procmux$90_CMP $procmux$86_CMP }
  Optimizing cells in module \dummy_counter.
  Optimizing cells in module \ifetch.
Performed a total of 3 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_1bit'.
Finding identical cells in module `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram'.
Finding identical cells in module `\dummy_counter'.
Finding identical cells in module `\ifetch'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$97 ($dff) from module register_1bit (D = $procmux$56_Y, Q = \q, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$111 ($sdff) from module register_1bit (D = \d, Q = \q).
Adding EN signal on $procdff$98 ($dff) from module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram (D = $memrd$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:318$55_DATA, Q = \out2).
Adding EN signal on $procdff$102 ($dff) from module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram (D = $memrd$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/ifetch.v:309$47_DATA, Q = \out1).
Adding EN signal on $procdff$106 ($dff) from module dummy_counter (D = $procmux$85_Y, Q = \q).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_1bit..
Finding unused cells or wires in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram..
Finding unused cells or wires in module \dummy_counter..
Finding unused cells or wires in module \ifetch..
Removed 12 unused cells and 48 unused wires.
<suppressed ~17 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
Optimizing module dummy_counter.
<suppressed ~1 debug messages>
Optimizing module ifetch.
Optimizing module register_1bit.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dummy_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ifetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \register_1bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
  Optimizing cells in module \dummy_counter.
    New ctrl vector for $pmux cell $procmux$85: { $procmux$91_CMP $procmux$90_CMP $procmux$86_CMP }
  Optimizing cells in module \dummy_counter.
  Optimizing cells in module \ifetch.
  Optimizing cells in module \register_1bit.
Performed a total of 1 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram'.
Finding identical cells in module `\dummy_counter'.
Finding identical cells in module `\ifetch'.
Finding identical cells in module `\register_1bit'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram..
Finding unused cells or wires in module \dummy_counter..
Finding unused cells or wires in module \ifetch..
Finding unused cells or wires in module \register_1bit..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
Optimizing module dummy_counter.
Optimizing module ifetch.
Optimizing module register_1bit.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dummy_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ifetch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \register_1bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
  Optimizing cells in module \dummy_counter.
  Optimizing cells in module \ifetch.
  Optimizing cells in module \register_1bit.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram'.
Finding identical cells in module `\dummy_counter'.
Finding identical cells in module `\ifetch'.
Finding identical cells in module `\register_1bit'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram..
Finding unused cells or wires in module \dummy_counter..
Finding unused cells or wires in module \ifetch..
Finding unused cells or wires in module \register_1bit..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram.
Optimizing module dummy_counter.
Optimizing module ifetch.
Optimizing module register_1bit.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram ===

   Number of wires:                 17
   Number of wire bits:            363
   Number of public wires:           9
   Number of public wire bits:     151
   Number of memories:               1
   Number of memory bits:          320
   Number of processes:              0
   Number of cells:                 12
     $dffe                          64
     $mux                           86

=== dummy_counter ===

   Number of wires:                 23
   Number of wire bits:            172
   Number of public wires:           8
   Number of public wire bits:      68
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $add                           32
     $dffe                          30
     $eq                            21
     $logic_not                      3
     $mux                           30
     $ne                             2
     $not                            1
     $pmux                          30
     $reduce_and                     2
     $reduce_or                      5

=== ifetch ===

   Number of wires:                 42
   Number of wire bits:            451
   Number of public wires:          36
   Number of public wire bits:     445
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $and                            4
     $mux                           30
     $not                            5
     $or                             2

=== register_1bit ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           5
   Number of public wire bits:       5
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $sdffe                          1

=== design hierarchy ===

   ifetch                            1
     $paramod$f2486c22f8156b191d4f2958486e3c6079702f1e\dual_port_ram      0
     dummy_counter                   0
     register_1bit                   0

   Number of wires:                 42
   Number of wire bits:            451
   Number of public wires:          36
   Number of public wire bits:     445
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $and                            4
     $mux                           30
     $not                            5
     $or                             2

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 055bd2fbed, CPU: user 0.08s system 0.00s, MEM: 11.86 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 22% 3x opt_clean (0 sec), 16% 3x opt_dff (0 sec), ...
