
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v' to AST representation.
Generating RTLIL representation for module `\mul'.
Generating RTLIL representation for module `\dummy_mult'.
Generating RTLIL representation for module `\onecyclestall'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:227.3-233.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: onecyclestall       
root of   0 design levels: dummy_mult          
root of   1 design levels: mul                 
Automatically selected mul as design top module.

2.2. Analyzing design hierarchy..
Top module:  \mul
Used module:     \onecyclestall
Used module:     \dummy_mult

2.3. Analyzing design hierarchy..
Top module:  \mul
Used module:     \onecyclestall
Used module:     \dummy_mult
Removed 0 unused modules.
Mapping positional arguments of cell mul.staller (onecyclestall).
Mapping positional arguments of cell mul.fake_mult_one (dummy_mult).
Warning: Resizing cell port mul.fake_mult_one.opB_mux_out from 33 bits to 32 bits.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:234$13 in module onecyclestall.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:227$12 in module onecyclestall.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:227$12 in module onecyclestall.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:201$10 in module dummy_mult.
Removed a total of 1 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\onecyclestall.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:234$13'.
     1/1: $0\T[0:0]
Creating decoders for process `\onecyclestall.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:227$12'.
     1/1: $1\Tnext[0:0]
Creating decoders for process `\dummy_mult.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:201$10'.
     1/1: $0\result[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\onecyclestall.\Tnext' from process `\onecyclestall.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:227$12'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\onecyclestall.\T' using process `\onecyclestall.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:234$13'.
  created $dff cell `$procdff$26' with positive edge clock.
Creating register for signal `\dummy_mult.\result' using process `\dummy_mult.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:201$10'.
  created $dff cell `$procdff$27' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\onecyclestall.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:234$13'.
Removing empty process `onecyclestall.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:234$13'.
Found and cleaned up 1 empty switch in `\onecyclestall.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:227$12'.
Removing empty process `onecyclestall.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:227$12'.
Found and cleaned up 1 empty switch in `\dummy_mult.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:201$10'.
Removing empty process `dummy_mult.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:201$10'.
Cleaned up 3 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module onecyclestall.
<suppressed ~2 debug messages>
Optimizing module dummy_mult.
Optimizing module mul.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module onecyclestall.
Optimizing module dummy_mult.
Optimizing module mul.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\onecyclestall'.
<suppressed ~3 debug messages>
Finding identical cells in module `\dummy_mult'.
Finding identical cells in module `\mul'.
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \onecyclestall..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dummy_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \onecyclestall.
  Optimizing cells in module \dummy_mult.
  Optimizing cells in module \mul.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\onecyclestall'.
Finding identical cells in module `\dummy_mult'.
Finding identical cells in module `\mul'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$26 ($dff) from module onecyclestall (D = $procmux$20_Y, Q = \T, rval = 1'0).
Adding SRST signal on $procdff$27 ($dff) from module dummy_mult (D = $mul$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/spree_submodules/mul.v:208$11_Y, Q = \result, rval = 0).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \onecyclestall..
Finding unused cells or wires in module \dummy_mult..
Finding unused cells or wires in module \mul..
Removed 3 unused cells and 22 unused wires.
<suppressed ~11 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dummy_mult.
Optimizing module mul.
Optimizing module onecyclestall.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dummy_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \onecyclestall..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dummy_mult.
  Optimizing cells in module \mul.
  Optimizing cells in module \onecyclestall.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dummy_mult'.
Finding identical cells in module `\mul'.
Finding identical cells in module `\onecyclestall'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dummy_mult..
Finding unused cells or wires in module \mul..
Finding unused cells or wires in module \onecyclestall..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dummy_mult.
Optimizing module mul.
Optimizing module onecyclestall.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== dummy_mult ===

   Number of wires:                  6
   Number of wire bits:            130
   Number of public wires:           5
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $mul                           32
     $sdff                          32

=== mul ===

   Number of wires:                 25
   Number of wire bits:            253
   Number of public wires:          20
   Number of public wire bits:     248
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $and                            4
     $mux                           32
     $not                            1
     $or                             1
     $reduce_or                     10

=== onecyclestall ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           6
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $and                            1
     $not                            1
     $pmux                           1
     $sdff                           1

=== design hierarchy ===

   mul                               1
     dummy_mult                      0
     onecyclestall                   0

   Number of wires:                 25
   Number of wire bits:            253
   Number of public wires:          20
   Number of public wire bits:     248
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $and                            4
     $mux                           32
     $not                            1
     $or                             1
     $reduce_or                     10

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: c654c03525, CPU: user 0.04s system 0.01s, MEM: 11.07 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 4x opt_expr (0 sec), 24% 3x opt_merge (0 sec), ...
