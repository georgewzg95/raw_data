
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v' to AST representation.
Generating RTLIL representation for module `\lp_fltr_v1'.
Generating RTLIL representation for module `\my_fifo_359'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: my_fifo_359         
root of   1 design levels: lp_fltr_v1          
Automatically selected lp_fltr_v1 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \lp_fltr_v1
Used module:     \my_fifo_359

2.3. Analyzing design hierarchy..
Top module:  \lp_fltr_v1
Used module:     \my_fifo_359
Removed 0 unused modules.
Mapping positional arguments of cell lp_fltr_v1.ints_fifo_2 (my_fifo_359).
Mapping positional arguments of cell lp_fltr_v1.ints_fifo_1 (my_fifo_359).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\my_fifo_359.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:50$5'.
     1/3: $0\buff2[7:0]
     2/3: $0\buff1[7:0]
     3/3: $0\dout[7:0]
Creating decoders for process `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
     1/5: $0\din_3_reg[7:0]
     2/5: $0\din_2_reg[7:0]
     3/5: $0\din_1_reg[7:0]
     4/5: $0\dout_2[7:0]
     5/5: $0\dout_1[7:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\my_fifo_359.\dout' using process `\my_fifo_359.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:50$5'.
  created $dff cell `$procdff$23' with positive edge clock.
Creating register for signal `\my_fifo_359.\buff1' using process `\my_fifo_359.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:50$5'.
  created $dff cell `$procdff$24' with positive edge clock.
Creating register for signal `\my_fifo_359.\buff2' using process `\my_fifo_359.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:50$5'.
  created $dff cell `$procdff$25' with positive edge clock.
Creating register for signal `\lp_fltr_v1.\dout_1' using process `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
  created $dff cell `$procdff$26' with positive edge clock.
Creating register for signal `\lp_fltr_v1.\dout_2' using process `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
  created $dff cell `$procdff$27' with positive edge clock.
Creating register for signal `\lp_fltr_v1.\din_1_reg' using process `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
  created $dff cell `$procdff$28' with positive edge clock.
Creating register for signal `\lp_fltr_v1.\din_2_reg' using process `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
  created $dff cell `$procdff$29' with positive edge clock.
Creating register for signal `\lp_fltr_v1.\din_3_reg' using process `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
  created $dff cell `$procdff$30' with positive edge clock.
Creating register for signal `\lp_fltr_v1.\add_tmp_1' using process `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
  created $dff cell `$procdff$31' with positive edge clock.
Creating register for signal `\lp_fltr_v1.\add_tmp_2' using process `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
  created $dff cell `$procdff$32' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\my_fifo_359.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:50$5'.
Removing empty process `my_fifo_359.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:50$5'.
Found and cleaned up 1 empty switch in `\lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
Removing empty process `lp_fltr_v1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision0_submodules/lp_fltr_v1.v:23$1'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_fifo_359.
<suppressed ~1 debug messages>
Optimizing module lp_fltr_v1.
<suppressed ~1 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_fifo_359.
Optimizing module lp_fltr_v1.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_fifo_359'.
Finding identical cells in module `\lp_fltr_v1'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \my_fifo_359..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \lp_fltr_v1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \my_fifo_359.
  Optimizing cells in module \lp_fltr_v1.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_fifo_359'.
Finding identical cells in module `\lp_fltr_v1'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$25 ($dff) from module my_fifo_359 (D = \buff1, Q = \buff2).
Adding EN signal on $procdff$23 ($dff) from module my_fifo_359 (D = \buff2, Q = \dout).
Adding EN signal on $procdff$24 ($dff) from module my_fifo_359 (D = \din, Q = \buff1).
Adding EN signal on $procdff$26 ($dff) from module lp_fltr_v1 (D = \din, Q = \dout_1).
Adding EN signal on $procdff$27 ($dff) from module lp_fltr_v1 (D = \add_tmp_2 [9:2], Q = \dout_2).
Adding EN signal on $procdff$28 ($dff) from module lp_fltr_v1 (D = \din, Q = \din_1_reg).
Adding EN signal on $procdff$29 ($dff) from module lp_fltr_v1 (D = \buff_out_1, Q = \din_2_reg).
Adding EN signal on $procdff$30 ($dff) from module lp_fltr_v1 (D = \buff_out_2, Q = \din_3_reg).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_fifo_359..
Finding unused cells or wires in module \lp_fltr_v1..
Removed 8 unused cells and 28 unused wires.
<suppressed ~10 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lp_fltr_v1.
Optimizing module my_fifo_359.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lp_fltr_v1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \my_fifo_359..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lp_fltr_v1.
  Optimizing cells in module \my_fifo_359.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lp_fltr_v1'.
<suppressed ~3 debug messages>
Finding identical cells in module `\my_fifo_359'.
Removed a total of 1 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lp_fltr_v1..
Finding unused cells or wires in module \my_fifo_359..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lp_fltr_v1.
Optimizing module my_fifo_359.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lp_fltr_v1..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \my_fifo_359..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lp_fltr_v1.
  Optimizing cells in module \my_fifo_359.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lp_fltr_v1'.
Finding identical cells in module `\my_fifo_359'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lp_fltr_v1..
Finding unused cells or wires in module \my_fifo_359..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module lp_fltr_v1.
Optimizing module my_fifo_359.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== lp_fltr_v1 ===

   Number of wires:                 14
   Number of wire bits:            106
   Number of public wires:          12
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                           20
     $dff                           20
     $dffe                          32

=== my_fifo_359 ===

   Number of wires:                  6
   Number of wire bits:             34
   Number of public wires:           6
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dffe                          24

=== design hierarchy ===

   lp_fltr_v1                        1
     my_fifo_359                     0

   Number of wires:                 14
   Number of wire bits:            106
   Number of public wires:          12
   Number of public wire bits:      86
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                           20
     $dff                           20
     $dffe                          32

End of script. Logfile hash: 9c33c808b9, CPU: user 0.03s system 0.00s, MEM: 11.27 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 5x opt_expr (0 sec), 28% 4x opt_merge (0 sec), ...
