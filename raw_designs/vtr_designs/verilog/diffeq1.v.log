
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v' to AST representation.
Generating RTLIL representation for module `\diffeq_paj_convert'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: diffeq_paj_convert  
Automatically selected diffeq_paj_convert as design top module.

2.2. Analyzing design hierarchy..
Top module:  \diffeq_paj_convert

2.3. Analyzing design hierarchy..
Top module:  \diffeq_paj_convert
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2 in module diffeq_paj_convert.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
     1/7: $0\looping[0:0]
     2/7: $0\u_var[31:0]
     3/7: $0\y_var[31:0]
     4/7: $0\x_var[31:0]
     5/7: $0\Uoutport[31:0]
     6/7: $0\Youtport[31:0]
     7/7: $0\Xoutport[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\diffeq_paj_convert.\Xoutport' using process `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
  created $dff cell `$procdff$77' with positive edge clock.
Creating register for signal `\diffeq_paj_convert.\Youtport' using process `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
  created $dff cell `$procdff$78' with positive edge clock.
Creating register for signal `\diffeq_paj_convert.\Uoutport' using process `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
  created $dff cell `$procdff$79' with positive edge clock.
Creating register for signal `\diffeq_paj_convert.\x_var' using process `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
  created $dff cell `$procdff$80' with positive edge clock.
Creating register for signal `\diffeq_paj_convert.\y_var' using process `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
  created $dff cell `$procdff$81' with positive edge clock.
Creating register for signal `\diffeq_paj_convert.\u_var' using process `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
  created $dff cell `$procdff$82' with positive edge clock.
Creating register for signal `\diffeq_paj_convert.\looping' using process `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
  created $dff cell `$procdff$83' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
Removing empty process `diffeq_paj_convert.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/diffeq1.v:23$2'.
Cleaned up 3 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module diffeq_paj_convert.
<suppressed ~9 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module diffeq_paj_convert.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\diffeq_paj_convert'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \diffeq_paj_convert..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$15: \looping -> 1'1
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \diffeq_paj_convert.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\diffeq_paj_convert'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$83 ($dff) from module diffeq_paj_convert (D = $procmux$18_Y, Q = \looping, rval = 1'0).
Adding EN signal on $procdff$77 ($dff) from module diffeq_paj_convert (D = \x_var, Q = \Xoutport).
Adding EN signal on $procdff$78 ($dff) from module diffeq_paj_convert (D = \y_var, Q = \Youtport).
Adding EN signal on $procdff$79 ($dff) from module diffeq_paj_convert (D = \u_var, Q = \Uoutport).
Adding SRST signal on $procdff$80 ($dff) from module diffeq_paj_convert (D = $procmux$45_Y, Q = \x_var, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$106 ($sdff) from module diffeq_paj_convert (D = $procmux$45_Y, Q = \x_var).
Adding SRST signal on $procdff$81 ($dff) from module diffeq_paj_convert (D = $procmux$36_Y, Q = \y_var, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$110 ($sdff) from module diffeq_paj_convert (D = $procmux$36_Y, Q = \y_var).
Adding SRST signal on $procdff$82 ($dff) from module diffeq_paj_convert (D = $procmux$27_Y, Q = \u_var, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$114 ($sdff) from module diffeq_paj_convert (D = $procmux$27_Y, Q = \u_var).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \diffeq_paj_convert..
Removed 14 unused cells and 44 unused wires.
<suppressed ~15 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module diffeq_paj_convert.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \diffeq_paj_convert..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \diffeq_paj_convert.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\diffeq_paj_convert'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \diffeq_paj_convert..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module diffeq_paj_convert.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \diffeq_paj_convert..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \diffeq_paj_convert.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\diffeq_paj_convert'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \diffeq_paj_convert..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module diffeq_paj_convert.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== diffeq_paj_convert ===

   Number of wires:                 36
   Number of wire bits:            842
   Number of public wires:          15
   Number of public wire bits:     387
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 29
     $add                           64
     $dffe                          96
     $lt                            32
     $mul                          160
     $mux                          194
     $ne                             2
     $not                            2
     $reduce_and                     3
     $sdff                           1
     $sdffe                         96
     $sub                           64

End of script. Logfile hash: 2102998801, CPU: user 0.08s system 0.00s, MEM: 12.38 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 5x opt_expr (0 sec), 18% 3x opt_dff (0 sec), ...
