
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v' to AST representation.
Generating RTLIL representation for module `\comparator'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: comparator          
Automatically selected comparator as design top module.

2.2. Analyzing design hierarchy..
Top module:  \comparator

2.3. Analyzing design hierarchy..
Top module:  \comparator
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v:56$7 in module comparator.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\comparator.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v:56$7'.
     1/30: $10\eq[0:0]
     2/30: $10\gt[0:0]
     3/30: $10\lt[0:0]
     4/30: $9\eq[0:0]
     5/30: $9\gt[0:0]
     6/30: $9\lt[0:0]
     7/30: $8\gt[0:0]
     8/30: $8\eq[0:0]
     9/30: $8\lt[0:0]
    10/30: $7\eq[0:0]
    11/30: $7\gt[0:0]
    12/30: $7\lt[0:0]
    13/30: $6\eq[0:0]
    14/30: $6\gt[0:0]
    15/30: $6\lt[0:0]
    16/30: $5\gt[0:0]
    17/30: $5\eq[0:0]
    18/30: $5\lt[0:0]
    19/30: $4\eq[0:0]
    20/30: $4\gt[0:0]
    21/30: $4\lt[0:0]
    22/30: $3\gt[0:0]
    23/30: $3\eq[0:0]
    24/30: $3\lt[0:0]
    25/30: $2\gt[0:0]
    26/30: $2\lt[0:0]
    27/30: $2\eq[0:0]
    28/30: $1\gt[0:0]
    29/30: $1\eq[0:0]
    30/30: $1\lt[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\comparator.\lt' from process `\comparator.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v:56$7': $auto$proc_dlatch.cc:427:proc_dlatch$422
Latch inferred for signal `\comparator.\eq' from process `\comparator.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v:56$7': $auto$proc_dlatch.cc:427:proc_dlatch$425
Latch inferred for signal `\comparator.\gt' from process `\comparator.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v:56$7': $auto$proc_dlatch.cc:427:proc_dlatch$428

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 10 empty switches in `\comparator.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v:56$7'.
Removing empty process `comparator.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/comparator.v:56$7'.
Cleaned up 10 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module comparator.
<suppressed ~110 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module comparator.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\comparator'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \comparator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \comparator.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\comparator'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \comparator..
Removed 1 unused cells and 256 unused wires.
<suppressed ~4 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module comparator.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \comparator..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \comparator.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\comparator'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \comparator..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module comparator.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== comparator ===

   Number of wires:                 63
   Number of wire bits:            247
   Number of public wires:          14
   Number of public wire bits:      74
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 55
     $add                           64
     $and                            9
     $dlatch                         3
     $gt                            32
     $logic_and                      4
     $lt                            32
     $mux                           21
     $ne                            16
     $not                           71
     $or                             2

End of script. Logfile hash: 5b2db95dfb, CPU: user 0.07s system 0.00s, MEM: 12.07 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 4x opt_expr (0 sec), 16% 2x read_verilog (0 sec), ...
