
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v' to AST representation.
Generating RTLIL representation for module `\float_to_int_fp16'.
Generating RTLIL representation for module `\final_out_t'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:51.1-61.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\two_comp_t'.
Generating RTLIL representation for module `\am_shift_t'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:78.1-85.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\sub_t'.
Generating RTLIL representation for module `\align_t'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: align_t             
root of   0 design levels: sub_t               
root of   0 design levels: am_shift_t          
root of   0 design levels: two_comp_t          
root of   0 design levels: final_out_t         
root of   1 design levels: float_to_int_fp16   
Automatically selected float_to_int_fp16 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \float_to_int_fp16
Used module:     \final_out_t
Used module:     \two_comp_t
Used module:     \am_shift_t
Used module:     \sub_t
Used module:     \align_t

2.3. Analyzing design hierarchy..
Top module:  \float_to_int_fp16
Used module:     \final_out_t
Used module:     \two_comp_t
Used module:     \am_shift_t
Used module:     \sub_t
Used module:     \align_t
Removed 0 unused modules.
Mapping positional arguments of cell float_to_int_fp16.dut_final_out (final_out_t).
Mapping positional arguments of cell float_to_int_fp16.dut_two_comp (two_comp_t).
Mapping positional arguments of cell float_to_int_fp16.dut_am_shift (am_shift_t).
Mapping positional arguments of cell float_to_int_fp16.dut_sub (sub_t).
Mapping positional arguments of cell float_to_int_fp16.dut_align (align_t).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:78$11 in module am_shift_t.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:51$1 in module final_out_t.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\am_shift_t.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:78$11'.
     1/1: $1\a_m_shift[27:0]
Creating decoders for process `\final_out_t.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:51$1'.
     1/2: $2\output_z_temp[27:0]
     2/2: $1\output_z_temp[27:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\am_shift_t.\a_m_shift' from process `\am_shift_t.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:78$11'.
No latch inferred for signal `\final_out_t.\output_z_temp' from process `\final_out_t.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:51$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\am_shift_t.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:78$11'.
Removing empty process `am_shift_t.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:78$11'.
Found and cleaned up 2 empty switches in `\final_out_t.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:51$1'.
Removing empty process `final_out_t.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/attention_layer_submodules/float_to_int_fp16.v:51$1'.
Cleaned up 3 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module align_t.
Optimizing module sub_t.
Optimizing module am_shift_t.
Optimizing module two_comp_t.
Optimizing module final_out_t.
<suppressed ~3 debug messages>
Optimizing module float_to_int_fp16.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module align_t.
Optimizing module sub_t.
Optimizing module am_shift_t.
Optimizing module two_comp_t.
Optimizing module final_out_t.
Optimizing module float_to_int_fp16.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\align_t'.
Finding identical cells in module `\sub_t'.
Finding identical cells in module `\am_shift_t'.
Finding identical cells in module `\two_comp_t'.
Finding identical cells in module `\final_out_t'.
Finding identical cells in module `\float_to_int_fp16'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \align_t..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_t..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \am_shift_t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \two_comp_t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \final_out_t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$25.
Running muxtree optimizer on module \float_to_int_fp16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 1 multiplexer ports.
<suppressed ~3 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \align_t.
  Optimizing cells in module \sub_t.
  Optimizing cells in module \am_shift_t.
  Optimizing cells in module \two_comp_t.
  Optimizing cells in module \final_out_t.
  Optimizing cells in module \float_to_int_fp16.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\align_t'.
Finding identical cells in module `\sub_t'.
Finding identical cells in module `\am_shift_t'.
Finding identical cells in module `\two_comp_t'.
Finding identical cells in module `\final_out_t'.
Finding identical cells in module `\float_to_int_fp16'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \align_t..
Finding unused cells or wires in module \sub_t..
Finding unused cells or wires in module \am_shift_t..
Finding unused cells or wires in module \two_comp_t..
Finding unused cells or wires in module \final_out_t..
Finding unused cells or wires in module \float_to_int_fp16..
Removed 0 unused cells and 15 unused wires.
<suppressed ~3 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module align_t.
Optimizing module am_shift_t.
Optimizing module final_out_t.
Optimizing module float_to_int_fp16.
Optimizing module sub_t.
Optimizing module two_comp_t.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \align_t..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \am_shift_t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \final_out_t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \float_to_int_fp16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sub_t..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \two_comp_t..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \align_t.
  Optimizing cells in module \am_shift_t.
  Optimizing cells in module \final_out_t.
  Optimizing cells in module \float_to_int_fp16.
  Optimizing cells in module \sub_t.
  Optimizing cells in module \two_comp_t.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\align_t'.
Finding identical cells in module `\am_shift_t'.
Finding identical cells in module `\final_out_t'.
Finding identical cells in module `\float_to_int_fp16'.
Finding identical cells in module `\sub_t'.
Finding identical cells in module `\two_comp_t'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \align_t..
Finding unused cells or wires in module \am_shift_t..
Finding unused cells or wires in module \final_out_t..
Finding unused cells or wires in module \float_to_int_fp16..
Finding unused cells or wires in module \sub_t..
Finding unused cells or wires in module \two_comp_t..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module align_t.
Optimizing module am_shift_t.
Optimizing module final_out_t.
Optimizing module float_to_int_fp16.
Optimizing module sub_t.
Optimizing module two_comp_t.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== align_t ===

   Number of wires:                  6
   Number of wire bits:             87
   Number of public wires:           5
   Number of public wire bits:      55
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $sub                           32

=== am_shift_t ===

   Number of wires:                  8
   Number of wire bits:             87
   Number of public wires:           4
   Number of public wire bits:      56
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $ge                            32
     $le                            32
     $logic_and                      1
     $mux                           28
     $shr                           28

=== final_out_t ===

   Number of wires:                 10
   Number of wire bits:            111
   Number of public wires:           4
   Number of public wire bits:      78
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             5
     $gt                             5
     $logic_and                      2
     $mux                           56
     $not                            1

=== float_to_int_fp16 ===

   Number of wires:                  8
   Number of wire bits:            117
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5

=== sub_t ===

   Number of wires:                  3
   Number of wire bits:             44
   Number of public wires:           2
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     $sub                           32

=== two_comp_t ===

   Number of wires:                  4
   Number of wire bits:             85
   Number of public wires:           3
   Number of public wire bits:      57
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $mux                           28
     $neg                           28

=== design hierarchy ===

   float_to_int_fp16                 1
     align_t                         0
     am_shift_t                      0
     final_out_t                     0
     sub_t                           0
     two_comp_t                      0

   Number of wires:                  8
   Number of wire bits:            117
   Number of public wires:           8
   Number of public wire bits:     117
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5

End of script. Logfile hash: 14fb596f79, CPU: user 0.07s system 0.01s, MEM: 11.19 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 3x opt_merge (0 sec), 21% 4x opt_expr (0 sec), ...
