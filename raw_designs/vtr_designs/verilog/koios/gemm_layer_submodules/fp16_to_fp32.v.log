
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v' to AST representation.
Generating RTLIL representation for module `\fp16_to_fp32'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: fp16_to_fp32        
Automatically selected fp16_to_fp32 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \fp16_to_fp32

2.3. Analyzing design hierarchy..
Top module:  \fp16_to_fp32
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 13 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v:24$2 in module fp16_to_fp32.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v:24$2'.
     1/24: $3\b_temp[31:0] [31]
     2/24: $3\b_temp[31:0] [30:23]
     3/24: $3\b_temp[31:0] [22:0]
     4/24: $2\b_temp[31:0] [31]
     5/24: $11\k_temp[3:0]
     6/24: $10\k_temp[3:0]
     7/24: $9\k_temp[3:0]
     8/24: $8\k_temp[3:0]
     9/24: $7\k_temp[3:0]
    10/24: $6\k_temp[3:0]
    11/24: $5\k_temp[3:0]
    12/24: $4\k_temp[3:0]
    13/24: $3\k_temp[3:0]
    14/24: $2\b_temp[31:0] [30:23]
    15/24: $2\b_temp[31:0] [22:0]
    16/24: $12\k_temp[3:0]
    17/24: $2\k[3:0]
    18/24: $2\j[3:0]
    19/24: $2\k_temp[3:0]
    20/24: $1\b_temp[31:0] [31]
    21/24: $1\b_temp[31:0] [30:0]
    22/24: $1\k_temp[3:0]
    23/24: $1\k[3:0]
    24/24: $1\j[3:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fp16_to_fp32.\b_temp' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v:24$2'.
Latch inferred for signal `\fp16_to_fp32.\j' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v:24$2': $auto$proc_dlatch.cc:427:proc_dlatch$222
Latch inferred for signal `\fp16_to_fp32.\k' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v:24$2': $auto$proc_dlatch.cc:427:proc_dlatch$225
Latch inferred for signal `\fp16_to_fp32.\k_temp' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v:24$2': $auto$proc_dlatch.cc:427:proc_dlatch$470

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 13 empty switches in `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v:24$2'.
Removing empty process `fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/fp16_to_fp32.v:24$2'.
Cleaned up 13 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module fp16_to_fp32.
<suppressed ~121 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fp16_to_fp32.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fp16_to_fp32'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fp16_to_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$148.
    dead port 1/2 on $mux $procmux$142.
    dead port 1/2 on $mux $procmux$55.
    dead port 1/2 on $mux $procmux$49.
    dead port 1/2 on $mux $procmux$46.
    dead port 1/2 on $mux $procmux$40.
    dead port 1/2 on $mux $procmux$37.
    dead port 1/2 on $mux $procmux$31.
    dead port 1/2 on $mux $procmux$28.
Removed 9 multiplexer ports.
<suppressed ~3 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fp16_to_fp32.
    New ctrl vector for $mux cell $procmux$52: { }
    New ctrl vector for $mux cell $procmux$178: { }
  Optimizing cells in module \fp16_to_fp32.
Performed a total of 2 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fp16_to_fp32'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$proc_dlatch.cc:427:proc_dlatch$222 ($dlatch) from module fp16_to_fp32.
Setting constant 1-bit at position 1 on $auto$proc_dlatch.cc:427:proc_dlatch$222 ($dlatch) from module fp16_to_fp32.
Setting constant 0-bit at position 2 on $auto$proc_dlatch.cc:427:proc_dlatch$222 ($dlatch) from module fp16_to_fp32.
Setting constant 1-bit at position 3 on $auto$proc_dlatch.cc:427:proc_dlatch$222 ($dlatch) from module fp16_to_fp32.

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fp16_to_fp32..
Removed 6 unused cells and 226 unused wires.
<suppressed ~8 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fp16_to_fp32.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fp16_to_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fp16_to_fp32.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fp16_to_fp32'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fp16_to_fp32..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fp16_to_fp32.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== fp16_to_fp32 ===

   Number of wires:                 73
   Number of wire bits:            343
   Number of public wires:           5
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     $add                           12
     $and                           55
     $dlatch                         4
     $eq                             5
     $logic_not                     20
     $mux                          110
     $not                           12
     $reduce_or                      4
     $shl                           23
     $sub                           40

End of script. Logfile hash: 4c5004dadc, CPU: user 0.05s system 0.01s, MEM: 12.46 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 21% 4x opt_expr (0 sec), 14% 3x opt_merge (0 sec), ...
