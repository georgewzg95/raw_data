
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v' to AST representation.
Generating RTLIL representation for module `\qmult'.
Generating RTLIL representation for module `\fp16_to_fp32'.
Generating RTLIL representation for module `\FPMult_16'.
Generating RTLIL representation for module `\FPMult_RoundModule'.
Generating RTLIL representation for module `\FPMult_NormalizeModule'.
Generating RTLIL representation for module `\FPMult_ExecuteModule'.
Generating RTLIL representation for module `\FPMult_PrepModule'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: FPMult_PrepModule   
root of   0 design levels: FPMult_ExecuteModule
root of   0 design levels: FPMult_NormalizeModule
root of   0 design levels: FPMult_RoundModule  
root of   1 design levels: FPMult_16           
root of   0 design levels: fp16_to_fp32        
root of   2 design levels: qmult               
Automatically selected qmult as design top module.

2.2. Analyzing design hierarchy..
Top module:  \qmult
Used module:     \fp16_to_fp32
Used module:     \FPMult_16
Used module:         \FPMult_RoundModule
Used module:         \FPMult_NormalizeModule
Used module:         \FPMult_ExecuteModule
Used module:         \FPMult_PrepModule

2.3. Analyzing design hierarchy..
Top module:  \qmult
Used module:     \fp16_to_fp32
Used module:     \FPMult_16
Used module:         \FPMult_RoundModule
Used module:         \FPMult_NormalizeModule
Used module:         \FPMult_ExecuteModule
Used module:         \FPMult_PrepModule
Removed 0 unused modules.
Mapping positional arguments of cell FPMult_16.RoundModule (FPMult_RoundModule).
Mapping positional arguments of cell FPMult_16.NormalizeModule (FPMult_NormalizeModule).
Mapping positional arguments of cell FPMult_16.ExecuteModule (FPMult_ExecuteModule).
Mapping positional arguments of cell FPMult_16.PrepModule (FPMult_PrepModule).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25 in module FPMult_16.
Marked 13 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:49$2 in module fp16_to_fp32.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 4 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25'.
     1/5: $0\pipe_4[20:0]
     2/5: $0\pipe_3[40:0]
     3/5: $0\pipe_2[22:0]
     4/5: $0\pipe_1[58:0]
     5/5: $0\pipe_0[31:0]
Creating decoders for process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:49$2'.
     1/24: $3\b_temp[31:0] [31]
     2/24: $3\b_temp[31:0] [30:23]
     3/24: $3\b_temp[31:0] [22:0]
     4/24: $2\b_temp[31:0] [31]
     5/24: $11\k_temp[3:0]
     6/24: $10\k_temp[3:0]
     7/24: $9\k_temp[3:0]
     8/24: $8\k_temp[3:0]
     9/24: $7\k_temp[3:0]
    10/24: $6\k_temp[3:0]
    11/24: $5\k_temp[3:0]
    12/24: $4\k_temp[3:0]
    13/24: $3\k_temp[3:0]
    14/24: $2\b_temp[31:0] [30:23]
    15/24: $2\b_temp[31:0] [22:0]
    16/24: $12\k_temp[3:0]
    17/24: $2\k[3:0]
    18/24: $2\j[3:0]
    19/24: $2\k_temp[3:0]
    20/24: $1\b_temp[31:0] [31]
    21/24: $1\b_temp[31:0] [30:0]
    22/24: $1\k_temp[3:0]
    23/24: $1\k[3:0]
    24/24: $1\j[3:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fp16_to_fp32.\b_temp' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:49$2'.
Latch inferred for signal `\fp16_to_fp32.\j' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:49$2': $auto$proc_dlatch.cc:427:proc_dlatch$269
Latch inferred for signal `\fp16_to_fp32.\k' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:49$2': $auto$proc_dlatch.cc:427:proc_dlatch$272
Latch inferred for signal `\fp16_to_fp32.\k_temp' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:49$2': $auto$proc_dlatch.cc:427:proc_dlatch$517

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\FPMult_16.\pipe_0' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25'.
  created $dff cell `$procdff$518' with positive edge clock.
Creating register for signal `\FPMult_16.\pipe_1' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25'.
  created $dff cell `$procdff$519' with positive edge clock.
Creating register for signal `\FPMult_16.\pipe_2' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25'.
  created $dff cell `$procdff$520' with positive edge clock.
Creating register for signal `\FPMult_16.\pipe_3' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25'.
  created $dff cell `$procdff$521' with positive edge clock.
Creating register for signal `\FPMult_16.\pipe_4' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25'.
  created $dff cell `$procdff$522' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25'.
Removing empty process `FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:161$25'.
Found and cleaned up 13 empty switches in `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:49$2'.
Removing empty process `fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:49$2'.
Cleaned up 14 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPMult_PrepModule.
Optimizing module FPMult_ExecuteModule.
Optimizing module FPMult_NormalizeModule.
Optimizing module FPMult_RoundModule.
Optimizing module FPMult_16.
Optimizing module fp16_to_fp32.
<suppressed ~121 debug messages>
Optimizing module qmult.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPMult_PrepModule.
Optimizing module FPMult_ExecuteModule.
Optimizing module FPMult_NormalizeModule.
Optimizing module FPMult_RoundModule.
Optimizing module FPMult_16.
Optimizing module fp16_to_fp32.
Optimizing module qmult.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPMult_PrepModule'.
<suppressed ~9 debug messages>
Finding identical cells in module `\FPMult_ExecuteModule'.
Finding identical cells in module `\FPMult_NormalizeModule'.
Finding identical cells in module `\FPMult_RoundModule'.
Finding identical cells in module `\FPMult_16'.
Finding identical cells in module `\fp16_to_fp32'.
<suppressed ~42 debug messages>
Finding identical cells in module `\qmult'.
Removed a total of 17 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPMult_PrepModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_ExecuteModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPMult_NormalizeModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_RoundModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:250$27: \PreShiftM -> { 1'0 \PreShiftM [9:0] }
      Replacing known input bits on port B of cell $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/qmult.v:250$27: { 1'0 \PreShiftM [10:1] } -> { 2'01 \PreShiftM [9:1] }
  Analyzing evaluation results.
Running muxtree optimizer on module \FPMult_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fp16_to_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$195.
    dead port 1/2 on $mux $procmux$189.
    dead port 1/2 on $mux $procmux$102.
    dead port 1/2 on $mux $procmux$96.
    dead port 1/2 on $mux $procmux$93.
    dead port 1/2 on $mux $procmux$87.
    dead port 1/2 on $mux $procmux$84.
    dead port 1/2 on $mux $procmux$78.
    dead port 1/2 on $mux $procmux$75.
Running muxtree optimizer on module \qmult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 9 multiplexer ports.
<suppressed ~12 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPMult_PrepModule.
  Optimizing cells in module \FPMult_ExecuteModule.
  Optimizing cells in module \FPMult_NormalizeModule.
  Optimizing cells in module \FPMult_RoundModule.
  Optimizing cells in module \FPMult_16.
  Optimizing cells in module \fp16_to_fp32.
    New ctrl vector for $mux cell $procmux$99: { }
    New ctrl vector for $mux cell $procmux$225: { }
  Optimizing cells in module \fp16_to_fp32.
  Optimizing cells in module \qmult.
Performed a total of 2 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPMult_PrepModule'.
Finding identical cells in module `\FPMult_ExecuteModule'.
Finding identical cells in module `\FPMult_NormalizeModule'.
Finding identical cells in module `\FPMult_RoundModule'.
Finding identical cells in module `\FPMult_16'.
Finding identical cells in module `\fp16_to_fp32'.
Finding identical cells in module `\qmult'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$518 ($dff) from module FPMult_16 (D = { \a \b }, Q = \pipe_0, rval = 0).
Adding SRST signal on $procdff$519 ($dff) from module FPMult_16 (D = { \pipe_0 [25:16] \pipe_0 [8:0] \Sa \Sb \Ea \Eb \Mp \InputExc }, Q = \pipe_1 [57:0], rval = 58'0000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$520 ($dff) from module FPMult_16 (D = { \pipe_1 [4:0] \GRS \Sp \NormE \NormM }, Q = \pipe_2, rval = 23'00000000000000000000000).
Adding SRST signal on $procdff$521 ($dff) from module FPMult_16 (D = { \pipe_2 [22:16] \RoundE \RoundEP \RoundM \RoundMP }, Q = \pipe_3, rval = 41'00000000000000000000000000000000000000000).
Adding SRST signal on $procdff$522 ($dff) from module FPMult_16 (D = { \Z_int \Flags_int }, Q = \pipe_4, rval = 21'000000000000000000000).
Setting constant 0-bit at position 0 on $auto$proc_dlatch.cc:427:proc_dlatch$269 ($dlatch) from module fp16_to_fp32.
Setting constant 1-bit at position 1 on $auto$proc_dlatch.cc:427:proc_dlatch$269 ($dlatch) from module fp16_to_fp32.
Setting constant 0-bit at position 2 on $auto$proc_dlatch.cc:427:proc_dlatch$269 ($dlatch) from module fp16_to_fp32.
Setting constant 1-bit at position 3 on $auto$proc_dlatch.cc:427:proc_dlatch$269 ($dlatch) from module fp16_to_fp32.

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPMult_PrepModule..
Finding unused cells or wires in module \FPMult_ExecuteModule..
Finding unused cells or wires in module \FPMult_NormalizeModule..
Finding unused cells or wires in module \FPMult_RoundModule..
Finding unused cells or wires in module \FPMult_16..
Finding unused cells or wires in module \fp16_to_fp32..
Finding unused cells or wires in module \qmult..
Removed 12 unused cells and 262 unused wires.
<suppressed ~23 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPMult_16.
Optimizing module FPMult_ExecuteModule.
Optimizing module FPMult_NormalizeModule.
Optimizing module FPMult_PrepModule.
Optimizing module FPMult_RoundModule.
Optimizing module fp16_to_fp32.
Optimizing module qmult.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPMult_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_ExecuteModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPMult_NormalizeModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_PrepModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_RoundModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fp16_to_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \qmult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPMult_16.
  Optimizing cells in module \FPMult_ExecuteModule.
  Optimizing cells in module \FPMult_NormalizeModule.
  Optimizing cells in module \FPMult_PrepModule.
  Optimizing cells in module \FPMult_RoundModule.
  Optimizing cells in module \fp16_to_fp32.
  Optimizing cells in module \qmult.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPMult_16'.
Finding identical cells in module `\FPMult_ExecuteModule'.
Finding identical cells in module `\FPMult_NormalizeModule'.
Finding identical cells in module `\FPMult_PrepModule'.
Finding identical cells in module `\FPMult_RoundModule'.
Finding identical cells in module `\fp16_to_fp32'.
Finding identical cells in module `\qmult'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPMult_16..
Finding unused cells or wires in module \FPMult_ExecuteModule..
Finding unused cells or wires in module \FPMult_NormalizeModule..
Finding unused cells or wires in module \FPMult_PrepModule..
Finding unused cells or wires in module \FPMult_RoundModule..
Finding unused cells or wires in module \fp16_to_fp32..
Finding unused cells or wires in module \qmult..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPMult_16.
Optimizing module FPMult_ExecuteModule.
Optimizing module FPMult_NormalizeModule.
Optimizing module FPMult_PrepModule.
Optimizing module FPMult_RoundModule.
Optimizing module fp16_to_fp32.
Optimizing module qmult.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== FPMult_16 ===

   Number of wires:                 27
   Number of wire bits:            343
   Number of public wires:          27
   Number of public wire bits:     343
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $sdff                         175

=== FPMult_ExecuteModule ===

   Number of wires:                 15
   Number of wire bits:            103
   Number of public wires:          12
   Number of public wire bits:      95
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $add                           12
     $and                            1
     $mux                           10
     $or                             1
     $reduce_or                     10
     $xor                            1

=== FPMult_NormalizeModule ===

   Number of wires:                  9
   Number of wire bits:            119
   Number of public wires:           7
   Number of public wire bits:      55
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $sub                           70

=== FPMult_PrepModule ===

   Number of wires:                 23
   Number of wire bits:             86
   Number of public wires:          14
   Number of public wire bits:      77
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $and                            4
     $logic_not                      2
     $mul                           22
     $or                             3
     $reduce_and                    10
     $reduce_or                     20

=== FPMult_RoundModule ===

   Number of wires:                 12
   Number of wire bits:             90
   Number of public wires:          12
   Number of public wire bits:      90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $mux                           28

=== fp16_to_fp32 ===

   Number of wires:                 73
   Number of wire bits:            343
   Number of public wires:           5
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     $add                           12
     $and                           55
     $dlatch                         4
     $eq                             5
     $logic_not                     20
     $mux                          110
     $not                           12
     $reduce_or                      4
     $shl                           23
     $sub                           40

=== qmult ===

   Number of wires:                  7
   Number of wire bits:             87
   Number of public wires:           7
   Number of public wire bits:      87
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2

=== design hierarchy ===

   qmult                             1
     FPMult_16                       0
       FPMult_ExecuteModule          0
       FPMult_NormalizeModule        0
       FPMult_PrepModule             0
       FPMult_RoundModule            0
     fp16_to_fp32                    0

   Number of wires:                  7
   Number of wire bits:             87
   Number of public wires:           7
   Number of public wire bits:      87
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2

End of script. Logfile hash: c623e14543, CPU: user 0.18s system 0.00s, MEM: 12.86 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 4x opt_expr (0 sec), 18% 3x opt_merge (0 sec), ...
