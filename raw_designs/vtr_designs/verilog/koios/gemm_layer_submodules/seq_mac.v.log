
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v' to AST representation.
Generating RTLIL representation for module `\seq_mac'.
Generating RTLIL representation for module `\fp32_to_fp16'.
Generating RTLIL representation for module `\qadd'.
Generating RTLIL representation for module `\FPAddSub_single'.
Generating RTLIL representation for module `\FPAddSub_d'.
Generating RTLIL representation for module `\FPAddSub_c'.
Generating RTLIL representation for module `\FpAddSub_b'.
Generating RTLIL representation for module `\FPAddSub_a'.
Generating RTLIL representation for module `\qmult'.
Generating RTLIL representation for module `\fp16_to_fp32'.
Generating RTLIL representation for module `\FPMult_16'.
Generating RTLIL representation for module `\FPMult_RoundModule'.
Generating RTLIL representation for module `\FPMult_NormalizeModule'.
Generating RTLIL representation for module `\FPMult_ExecuteModule'.
Generating RTLIL representation for module `\FPMult_PrepModule'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: FPMult_PrepModule   
root of   0 design levels: FPMult_ExecuteModule
root of   0 design levels: FPMult_NormalizeModule
root of   0 design levels: FPMult_RoundModule  
root of   1 design levels: FPMult_16           
root of   0 design levels: fp16_to_fp32        
root of   2 design levels: qmult               
root of   0 design levels: FPAddSub_a          
root of   0 design levels: FpAddSub_b          
root of   0 design levels: FPAddSub_c          
root of   0 design levels: FPAddSub_d          
root of   1 design levels: FPAddSub_single     
root of   2 design levels: qadd                
root of   0 design levels: fp32_to_fp16        
root of   3 design levels: seq_mac             
Automatically selected seq_mac as design top module.

2.2. Analyzing design hierarchy..
Top module:  \seq_mac
Used module:     \fp32_to_fp16
Used module:     \qadd
Used module:         \FPAddSub_single
Used module:             \FPAddSub_d
Used module:             \FPAddSub_c
Used module:             \FpAddSub_b
Used module:             \FPAddSub_a
Used module:     \qmult
Used module:         \fp16_to_fp32
Used module:         \FPMult_16
Used module:             \FPMult_RoundModule
Used module:             \FPMult_NormalizeModule
Used module:             \FPMult_ExecuteModule
Used module:             \FPMult_PrepModule

2.3. Analyzing design hierarchy..
Top module:  \seq_mac
Used module:     \fp32_to_fp16
Used module:     \qadd
Used module:         \FPAddSub_single
Used module:             \FPAddSub_d
Used module:             \FPAddSub_c
Used module:             \FpAddSub_b
Used module:             \FPAddSub_a
Used module:     \qmult
Used module:         \fp16_to_fp32
Used module:         \FPMult_16
Used module:             \FPMult_RoundModule
Used module:             \FPMult_NormalizeModule
Used module:             \FPMult_ExecuteModule
Used module:             \FPMult_PrepModule
Removed 0 unused modules.
Mapping positional arguments of cell FPMult_16.RoundModule (FPMult_RoundModule).
Mapping positional arguments of cell FPMult_16.NormalizeModule (FPMult_NormalizeModule).
Mapping positional arguments of cell FPMult_16.ExecuteModule (FPMult_ExecuteModule).
Mapping positional arguments of cell FPMult_16.PrepModule (FPMult_PrepModule).
Mapping positional arguments of cell FPAddSub_single.M4 (FPAddSub_d).
Mapping positional arguments of cell FPAddSub_single.M3 (FPAddSub_c).
Mapping positional arguments of cell FPAddSub_single.M2 (FpAddSub_b).
Mapping positional arguments of cell FPAddSub_single.M1 (FPAddSub_a).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169 in module FPMult_16.
Marked 13 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:729$146 in module fp16_to_fp32.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:680$145 in module FPAddSub_a.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:680$145 in module FPAddSub_a.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:652$144 in module FPAddSub_a.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:652$144 in module FPAddSub_a.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:422$68 in module FPAddSub_c.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:422$68 in module FPAddSub_c.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:407$67 in module FPAddSub_c.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:407$67 in module FPAddSub_c.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:196$27 in module FPAddSub_single.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:78$17 in module fp32_to_fp16.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:60$16 in module seq_mac.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:48$15 in module seq_mac.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:35$14 in module seq_mac.
Removed a total of 4 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 16 redundant assignments.
Promoted 11 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169'.
     1/5: $0\pipe_4[20:0]
     2/5: $0\pipe_3[40:0]
     3/5: $0\pipe_2[22:0]
     4/5: $0\pipe_1[58:0]
     5/5: $0\pipe_0[31:0]
Creating decoders for process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:729$146'.
     1/24: $3\b_temp[31:0] [31]
     2/24: $3\b_temp[31:0] [30:23]
     3/24: $3\b_temp[31:0] [22:0]
     4/24: $2\b_temp[31:0] [31]
     5/24: $11\k_temp[3:0]
     6/24: $10\k_temp[3:0]
     7/24: $9\k_temp[3:0]
     8/24: $8\k_temp[3:0]
     9/24: $7\k_temp[3:0]
    10/24: $6\k_temp[3:0]
    11/24: $5\k_temp[3:0]
    12/24: $4\k_temp[3:0]
    13/24: $3\k_temp[3:0]
    14/24: $2\b_temp[31:0] [30:23]
    15/24: $2\b_temp[31:0] [22:0]
    16/24: $12\k_temp[3:0]
    17/24: $2\k[3:0]
    18/24: $2\j[3:0]
    19/24: $2\k_temp[3:0]
    20/24: $1\b_temp[31:0] [31]
    21/24: $1\b_temp[31:0] [30:0]
    22/24: $1\k_temp[3:0]
    23/24: $1\k[3:0]
    24/24: $1\j[3:0]
Creating decoders for process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:680$145'.
     1/25: $0\Lvl3[23:0] [23]
     2/25: $0\Lvl3[23:0] [21]
     3/25: $0\Lvl3[23:0] [22]
     4/25: $0\Lvl3[23:0] [20]
     5/25: $0\Lvl3[23:0] [19]
     6/25: $0\Lvl3[23:0] [18]
     7/25: $0\Lvl3[23:0] [17]
     8/25: $0\Lvl3[23:0] [16]
     9/25: $0\Lvl3[23:0] [15]
    10/25: $0\Lvl3[23:0] [14]
    11/25: $0\Lvl3[23:0] [13]
    12/25: $0\Lvl3[23:0] [12]
    13/25: $0\Lvl3[23:0] [11]
    14/25: $0\Lvl3[23:0] [10]
    15/25: $0\Lvl3[23:0] [9]
    16/25: $0\Lvl3[23:0] [8]
    17/25: $0\Lvl3[23:0] [7]
    18/25: $0\Lvl3[23:0] [6]
    19/25: $0\Lvl3[23:0] [5]
    20/25: $0\Lvl3[23:0] [4]
    21/25: $0\Lvl3[23:0] [3]
    22/25: $0\Lvl3[23:0] [2]
    23/25: $0\Lvl3[23:0] [1]
    24/25: $0\Lvl3[23:0] [0]
    25/25: $1\j[31:0]
Creating decoders for process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:652$144'.
     1/21: $0\Lvl2[23:0] [23:19]
     2/21: $0\Lvl2[23:0] [16]
     3/21: $0\Lvl2[23:0] [15]
     4/21: $0\Lvl2[23:0] [14]
     5/21: $0\Lvl2[23:0] [17]
     6/21: $0\Lvl2[23:0] [13]
     7/21: $0\Lvl2[23:0] [12]
     8/21: $0\Lvl2[23:0] [11]
     9/21: $0\Lvl2[23:0] [18]
    10/21: $0\Lvl2[23:0] [10]
    11/21: $0\Lvl2[23:0] [9]
    12/21: $0\Lvl2[23:0] [8]
    13/21: $0\Lvl2[23:0] [7]
    14/21: $0\Lvl2[23:0] [6]
    15/21: $0\Lvl2[23:0] [5]
    16/21: $0\Lvl2[23:0] [4]
    17/21: $0\Lvl2[23:0] [3]
    18/21: $0\Lvl2[23:0] [2]
    19/21: $0\Lvl2[23:0] [1]
    20/21: $0\Lvl2[23:0] [0]
    21/21: $1\i[31:0]
Creating decoders for process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:645$142'.
Creating decoders for process `\FpAddSub_b.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:529$110'.
Creating decoders for process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:422$68'.
     1/34: $0\Lvl3[32:0] [2]
     2/34: $0\Lvl3[32:0] [0]
     3/34: $0\Lvl3[32:0] [1]
     4/34: $0\Lvl3[32:0] [3]
     5/34: $0\Lvl3[32:0] [4]
     6/34: $0\Lvl3[32:0] [5]
     7/34: $0\Lvl3[32:0] [6]
     8/34: $0\Lvl3[32:0] [7]
     9/34: $0\Lvl3[32:0] [8]
    10/34: $0\Lvl3[32:0] [9]
    11/34: $0\Lvl3[32:0] [10]
    12/34: $0\Lvl3[32:0] [11]
    13/34: $0\Lvl3[32:0] [12]
    14/34: $0\Lvl3[32:0] [13]
    15/34: $0\Lvl3[32:0] [14]
    16/34: $0\Lvl3[32:0] [15]
    17/34: $0\Lvl3[32:0] [16]
    18/34: $0\Lvl3[32:0] [17]
    19/34: $0\Lvl3[32:0] [18]
    20/34: $0\Lvl3[32:0] [19]
    21/34: $0\Lvl3[32:0] [20]
    22/34: $0\Lvl3[32:0] [21]
    23/34: $0\Lvl3[32:0] [22]
    24/34: $0\Lvl3[32:0] [23]
    25/34: $0\Lvl3[32:0] [24]
    26/34: $0\Lvl3[32:0] [25]
    27/34: $0\Lvl3[32:0] [26]
    28/34: $0\Lvl3[32:0] [27]
    29/34: $0\Lvl3[32:0] [28]
    30/34: $0\Lvl3[32:0] [29]
    31/34: $0\Lvl3[32:0] [30]
    32/34: $0\Lvl3[32:0] [31]
    33/34: $0\Lvl3[32:0] [32]
    34/34: $3\i[31:0]
Creating decoders for process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:407$67'.
     1/31: $0\Lvl2[32:0] [11]
     2/31: $0\Lvl2[32:0] [6]
     3/31: $0\Lvl2[32:0] [3:0]
     4/31: $0\Lvl2[32:0] [4]
     5/31: $0\Lvl2[32:0] [5]
     6/31: $0\Lvl2[32:0] [7]
     7/31: $0\Lvl2[32:0] [8]
     8/31: $0\Lvl2[32:0] [9]
     9/31: $0\Lvl2[32:0] [10]
    10/31: $0\Lvl2[32:0] [12]
    11/31: $0\Lvl2[32:0] [13]
    12/31: $0\Lvl2[32:0] [14]
    13/31: $0\Lvl2[32:0] [15]
    14/31: $0\Lvl2[32:0] [16]
    15/31: $0\Lvl2[32:0] [17]
    16/31: $0\Lvl2[32:0] [18]
    17/31: $0\Lvl2[32:0] [19]
    18/31: $0\Lvl2[32:0] [20]
    19/31: $0\Lvl2[32:0] [21]
    20/31: $0\Lvl2[32:0] [22]
    21/31: $0\Lvl2[32:0] [23]
    22/31: $0\Lvl2[32:0] [24]
    23/31: $0\Lvl2[32:0] [25]
    24/31: $0\Lvl2[32:0] [26]
    25/31: $0\Lvl2[32:0] [27]
    26/31: $0\Lvl2[32:0] [28]
    27/31: $0\Lvl2[32:0] [29]
    28/31: $0\Lvl2[32:0] [30]
    29/31: $0\Lvl2[32:0] [31]
    30/31: $0\Lvl2[32:0] [32]
    31/31: $1\i[31:0]
Creating decoders for process `\FPAddSub_single.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:196$27'.
     1/3: $0\pipe_3[45:0]
     2/3: $0\pipe_2[54:0]
     3/3: $0\pipe_1[68:0]
Creating decoders for process `\fp32_to_fp16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:78$17'.
     1/8: $3\b_temp[15:0] [15]
     2/8: $3\b_temp[15:0] [14:10]
     3/8: $3\b_temp[15:0] [9:0]
     4/8: $2\b_temp[15:0] [15]
     5/8: $2\b_temp[15:0] [9:0]
     6/8: $2\b_temp[15:0] [14:10]
     7/8: $1\b_temp[15:0] [15]
     8/8: $1\b_temp[15:0] [14:0]
Creating decoders for process `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:60$16'.
     1/1: $0\out_temp[31:0]
Creating decoders for process `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:48$15'.
     1/1: $0\mul_out_temp_reg[31:0]
Creating decoders for process `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:35$14'.
     1/2: $0\b_flopped[15:0]
     2/2: $0\a_flopped[15:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\fp16_to_fp32.\b_temp' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:729$146'.
Latch inferred for signal `\fp16_to_fp32.\j' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:729$146': $auto$proc_dlatch.cc:427:proc_dlatch$1038
Latch inferred for signal `\fp16_to_fp32.\k' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:729$146': $auto$proc_dlatch.cc:427:proc_dlatch$1041
Latch inferred for signal `\fp16_to_fp32.\k_temp' from process `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:729$146': $auto$proc_dlatch.cc:427:proc_dlatch$1286
No latch inferred for signal `\FPAddSub_a.\Lvl3' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:680$145'.
Latch inferred for signal `\FPAddSub_a.\j' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:680$145': $auto$proc_dlatch.cc:427:proc_dlatch$1295
No latch inferred for signal `\FPAddSub_a.\Lvl2' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:652$144'.
Latch inferred for signal `\FPAddSub_a.\i' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:652$144': $auto$proc_dlatch.cc:427:proc_dlatch$1304
No latch inferred for signal `\FPAddSub_a.\Lvl1' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:645$142'.
No latch inferred for signal `\FpAddSub_b.\Lvl1' from process `\FpAddSub_b.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:529$110'.
No latch inferred for signal `\FPAddSub_c.\Lvl3' from process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:422$68'.
Latch inferred for signal `\FPAddSub_c.\i' from process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:422$68': $auto$proc_dlatch.cc:427:proc_dlatch$1313
No latch inferred for signal `\FPAddSub_c.\Lvl2' from process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:407$67'.
Latch inferred for signal `\FPAddSub_c.\i' from process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:407$67': $auto$proc_dlatch.cc:427:proc_dlatch$1322
No latch inferred for signal `\fp32_to_fp16.\b_temp' from process `\fp32_to_fp16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:78$17'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\FPMult_16.\pipe_1' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169'.
  created $dff cell `$procdff$1323' with positive edge clock.
Creating register for signal `\FPMult_16.\pipe_2' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169'.
  created $dff cell `$procdff$1324' with positive edge clock.
Creating register for signal `\FPMult_16.\pipe_3' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169'.
  created $dff cell `$procdff$1325' with positive edge clock.
Creating register for signal `\FPMult_16.\pipe_0' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169'.
  created $dff cell `$procdff$1326' with positive edge clock.
Creating register for signal `\FPMult_16.\pipe_4' using process `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169'.
  created $dff cell `$procdff$1327' with positive edge clock.
Creating register for signal `\FPAddSub_single.\pipe_1' using process `\FPAddSub_single.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:196$27'.
  created $dff cell `$procdff$1328' with positive edge clock.
Creating register for signal `\FPAddSub_single.\pipe_2' using process `\FPAddSub_single.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:196$27'.
  created $dff cell `$procdff$1329' with positive edge clock.
Creating register for signal `\FPAddSub_single.\pipe_3' using process `\FPAddSub_single.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:196$27'.
  created $dff cell `$procdff$1330' with positive edge clock.
Creating register for signal `\seq_mac.\out_temp' using process `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:60$16'.
  created $dff cell `$procdff$1331' with positive edge clock.
Creating register for signal `\seq_mac.\mul_out_temp_reg' using process `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:48$15'.
  created $dff cell `$procdff$1332' with positive edge clock.
Creating register for signal `\seq_mac.\a_flopped' using process `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:35$14'.
  created $dff cell `$procdff$1333' with positive edge clock.
Creating register for signal `\seq_mac.\b_flopped' using process `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:35$14'.
  created $dff cell `$procdff$1334' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169'.
Removing empty process `FPMult_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:841$169'.
Found and cleaned up 13 empty switches in `\fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:729$146'.
Removing empty process `fp16_to_fp32.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:729$146'.
Found and cleaned up 1 empty switch in `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:680$145'.
Removing empty process `FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:680$145'.
Found and cleaned up 1 empty switch in `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:652$144'.
Removing empty process `FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:652$144'.
Removing empty process `FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:645$142'.
Removing empty process `FpAddSub_b.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:529$110'.
Found and cleaned up 1 empty switch in `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:422$68'.
Removing empty process `FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:422$68'.
Found and cleaned up 1 empty switch in `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:407$67'.
Removing empty process `FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:407$67'.
Found and cleaned up 1 empty switch in `\FPAddSub_single.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:196$27'.
Removing empty process `FPAddSub_single.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:196$27'.
Found and cleaned up 3 empty switches in `\fp32_to_fp16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:78$17'.
Removing empty process `fp32_to_fp16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:78$17'.
Found and cleaned up 1 empty switch in `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:60$16'.
Removing empty process `seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:60$16'.
Found and cleaned up 1 empty switch in `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:48$15'.
Removing empty process `seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:48$15'.
Found and cleaned up 1 empty switch in `\seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:35$14'.
Removing empty process `seq_mac.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:35$14'.
Cleaned up 25 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPMult_PrepModule.
Optimizing module FPMult_ExecuteModule.
Optimizing module FPMult_NormalizeModule.
Optimizing module FPMult_RoundModule.
Optimizing module FPMult_16.
Optimizing module fp16_to_fp32.
<suppressed ~121 debug messages>
Optimizing module qmult.
Optimizing module FPAddSub_a.
<suppressed ~54 debug messages>
Optimizing module FpAddSub_b.
Optimizing module FPAddSub_c.
<suppressed ~73 debug messages>
Optimizing module FPAddSub_d.
<suppressed ~1 debug messages>
Optimizing module FPAddSub_single.
Optimizing module qadd.
Optimizing module fp32_to_fp16.
<suppressed ~1 debug messages>
Optimizing module seq_mac.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPMult_PrepModule.
Optimizing module FPMult_ExecuteModule.
Optimizing module FPMult_NormalizeModule.
Optimizing module FPMult_RoundModule.
Optimizing module FPMult_16.
Optimizing module fp16_to_fp32.
Optimizing module qmult.
Optimizing module FPAddSub_a.
Optimizing module FpAddSub_b.
Optimizing module FPAddSub_c.
Optimizing module FPAddSub_d.
Optimizing module FPAddSub_single.
Optimizing module qadd.
Optimizing module fp32_to_fp16.
Optimizing module seq_mac.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPMult_PrepModule'.
<suppressed ~9 debug messages>
Finding identical cells in module `\FPMult_ExecuteModule'.
Finding identical cells in module `\FPMult_NormalizeModule'.
Finding identical cells in module `\FPMult_RoundModule'.
Finding identical cells in module `\FPMult_16'.
Finding identical cells in module `\fp16_to_fp32'.
<suppressed ~42 debug messages>
Finding identical cells in module `\qmult'.
Finding identical cells in module `\FPAddSub_a'.
<suppressed ~540 debug messages>
Finding identical cells in module `\FpAddSub_b'.
<suppressed ~6 debug messages>
Finding identical cells in module `\FPAddSub_c'.
<suppressed ~759 debug messages>
Finding identical cells in module `\FPAddSub_d'.
<suppressed ~6 debug messages>
Finding identical cells in module `\FPAddSub_single'.
Finding identical cells in module `\qadd'.
Finding identical cells in module `\fp32_to_fp16'.
Finding identical cells in module `\seq_mac'.
Removed a total of 454 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPMult_PrepModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_ExecuteModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPMult_NormalizeModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_RoundModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:930$171: \PreShiftM -> { 1'0 \PreShiftM [9:0] }
      Replacing known input bits on port B of cell $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/seq_mac.v:930$171: { 1'0 \PreShiftM [10:1] } -> { 2'01 \PreShiftM [9:1] }
  Analyzing evaluation results.
Running muxtree optimizer on module \FPMult_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fp16_to_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$339.
    dead port 1/2 on $mux $procmux$333.
    dead port 1/2 on $mux $procmux$246.
    dead port 1/2 on $mux $procmux$240.
    dead port 1/2 on $mux $procmux$237.
    dead port 1/2 on $mux $procmux$231.
    dead port 1/2 on $mux $procmux$228.
    dead port 1/2 on $mux $procmux$222.
    dead port 1/2 on $mux $procmux$219.
Running muxtree optimizer on module \qmult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPAddSub_a..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FpAddSub_b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPAddSub_c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPAddSub_d..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPAddSub_single..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \qadd..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fp32_to_fp16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$988.
    dead port 1/2 on $mux $procmux$982.
    dead port 1/2 on $mux $procmux$976.
    dead port 1/2 on $mux $procmux$970.
    dead port 1/2 on $mux $procmux$967.
    dead port 1/2 on $mux $procmux$962.
    dead port 1/2 on $mux $procmux$959.
    dead port 1/2 on $mux $procmux$953.
    dead port 1/2 on $mux $procmux$950.
Running muxtree optimizer on module \seq_mac..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 18 multiplexer ports.
<suppressed ~143 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPMult_PrepModule.
  Optimizing cells in module \FPMult_ExecuteModule.
  Optimizing cells in module \FPMult_NormalizeModule.
  Optimizing cells in module \FPMult_RoundModule.
  Optimizing cells in module \FPMult_16.
  Optimizing cells in module \fp16_to_fp32.
    New ctrl vector for $mux cell $procmux$243: { }
    New ctrl vector for $mux cell $procmux$369: { }
  Optimizing cells in module \fp16_to_fp32.
  Optimizing cells in module \qmult.
  Optimizing cells in module \FPAddSub_a.
    New ctrl vector for $pmux cell $procmux$608: { }
    New ctrl vector for $pmux cell $procmux$518: { $procmux$612_CMP $procmux$611_CMP $auto$opt_reduce.cc:134:opt_mux$1336 }
    New ctrl vector for $pmux cell $procmux$513: { $procmux$612_CMP $procmux$611_CMP $auto$opt_reduce.cc:134:opt_mux$1338 }
    New ctrl vector for $pmux cell $procmux$508: { $procmux$612_CMP $auto$opt_reduce.cc:134:opt_mux$1340 }
    New ctrl vector for $pmux cell $procmux$503: { }
    New ctrl vector for $pmux cell $procmux$393: { $procmux$507_CMP $procmux$506_CMP $auto$opt_reduce.cc:134:opt_mux$1342 }
    New ctrl vector for $pmux cell $procmux$528: { $procmux$612_CMP $procmux$611_CMP $auto$opt_reduce.cc:134:opt_mux$1344 }
    New ctrl vector for $pmux cell $procmux$383: { $procmux$507_CMP $auto$opt_reduce.cc:134:opt_mux$1346 }
    New ctrl vector for $pmux cell $procmux$548: { $procmux$612_CMP $procmux$611_CMP $auto$opt_reduce.cc:134:opt_mux$1348 }
  Optimizing cells in module \FPAddSub_a.
  Optimizing cells in module \FpAddSub_b.
  Optimizing cells in module \FPAddSub_c.
    New ctrl vector for $pmux cell $procmux$798: { $procmux$937_CMP $procmux$936_CMP $auto$opt_reduce.cc:134:opt_mux$1350 }
    New ctrl vector for $pmux cell $procmux$793: { $procmux$937_CMP $auto$opt_reduce.cc:134:opt_mux$1352 }
    New ctrl vector for $pmux cell $procmux$788: { $procmux$937_CMP $procmux$936_CMP $auto$opt_reduce.cc:134:opt_mux$1354 }
    New ctrl vector for $pmux cell $procmux$778: { }
    New ctrl vector for $pmux cell $procmux$933: { }
    New ctrl vector for $pmux cell $procmux$808: { $procmux$937_CMP $procmux$936_CMP $auto$opt_reduce.cc:134:opt_mux$1356 }
    New ctrl vector for $pmux cell $procmux$623: { $procmux$782_CMP $procmux$781_CMP $auto$opt_reduce.cc:134:opt_mux$1358 }
    New ctrl vector for $pmux cell $procmux$803: { $procmux$937_CMP $procmux$936_CMP $auto$opt_reduce.cc:134:opt_mux$1360 }
    New ctrl vector for $pmux cell $procmux$618: { $procmux$782_CMP $auto$opt_reduce.cc:134:opt_mux$1362 }
  Optimizing cells in module \FPAddSub_c.
  Optimizing cells in module \FPAddSub_d.
  Optimizing cells in module \FPAddSub_single.
  Optimizing cells in module \qadd.
  Optimizing cells in module \fp32_to_fp16.
    New ctrl vector for $mux cell $procmux$973: { }
  Optimizing cells in module \fp32_to_fp16.
  Optimizing cells in module \seq_mac.
Performed a total of 21 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPMult_PrepModule'.
Finding identical cells in module `\FPMult_ExecuteModule'.
Finding identical cells in module `\FPMult_NormalizeModule'.
Finding identical cells in module `\FPMult_RoundModule'.
Finding identical cells in module `\FPMult_16'.
Finding identical cells in module `\fp16_to_fp32'.
Finding identical cells in module `\qmult'.
Finding identical cells in module `\FPAddSub_a'.
<suppressed ~9 debug messages>
Finding identical cells in module `\FpAddSub_b'.
Finding identical cells in module `\FPAddSub_c'.
<suppressed ~9 debug messages>
Finding identical cells in module `\FPAddSub_d'.
Finding identical cells in module `\FPAddSub_single'.
Finding identical cells in module `\qadd'.
Finding identical cells in module `\fp32_to_fp16'.
Finding identical cells in module `\seq_mac'.
Removed a total of 6 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$1323 ($dff) from module FPMult_16 (D = { \pipe_0 [25:16] \pipe_0 [8:0] \Sa \Sb \Ea \Eb \Mp \InputExc }, Q = \pipe_1 [57:0], rval = 58'0000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$1324 ($dff) from module FPMult_16 (D = { \pipe_1 [4:0] \GRS \Sp \NormE \NormM }, Q = \pipe_2, rval = 23'00000000000000000000000).
Adding SRST signal on $procdff$1325 ($dff) from module FPMult_16 (D = { \pipe_2 [22:16] \RoundE \RoundEP \RoundM \RoundMP }, Q = \pipe_3, rval = 41'00000000000000000000000000000000000000000).
Adding SRST signal on $procdff$1326 ($dff) from module FPMult_16 (D = { \a \b }, Q = \pipe_0, rval = 0).
Adding SRST signal on $procdff$1327 ($dff) from module FPMult_16 (D = { \Z_int \Flags_int }, Q = \pipe_4, rval = 21'000000000000000000000).
Setting constant 0-bit at position 0 on $auto$proc_dlatch.cc:427:proc_dlatch$1038 ($dlatch) from module fp16_to_fp32.
Setting constant 1-bit at position 1 on $auto$proc_dlatch.cc:427:proc_dlatch$1038 ($dlatch) from module fp16_to_fp32.
Setting constant 0-bit at position 2 on $auto$proc_dlatch.cc:427:proc_dlatch$1038 ($dlatch) from module fp16_to_fp32.
Setting constant 1-bit at position 3 on $auto$proc_dlatch.cc:427:proc_dlatch$1038 ($dlatch) from module fp16_to_fp32.
Adding SRST signal on $procdff$1328 ($dff) from module FPAddSub_single (D = { \Opout \Sa \Sb \MaxAB \CExp \Shift \Mmax \InputExc \Mmin_3 }, Q = \pipe_1, rval = 69'000000000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$1329 ($dff) from module FPAddSub_single (D = { \SumS_5 \Shift_1 \pipe_1 [64:57] \pipe_1 [67:66] \pipe_1 [68] \pipe_1 [65] \pipe_1 [28:24] }, Q = \pipe_2, rval = 55'0000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$1330 ($dff) from module FPAddSub_single (D = { \NormM \NormE \ZeroSum \NegE \R \S \FG \pipe_2 [8:0] }, Q = \pipe_3, rval = 46'0000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$1331 ($dff) from module seq_mac (D = \add_out, Q = \out_temp, rval = 0).
Adding SRST signal on $procdff$1332 ($dff) from module seq_mac (D = \mul_out_temp, Q = \mul_out_temp_reg, rval = 0).
Adding SRST signal on $procdff$1333 ($dff) from module seq_mac (D = \a, Q = \a_flopped, rval = 16'0000000000000000).
Adding SRST signal on $procdff$1334 ($dff) from module seq_mac (D = \b, Q = \b_flopped, rval = 16'0000000000000000).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPMult_PrepModule..
Finding unused cells or wires in module \FPMult_ExecuteModule..
Finding unused cells or wires in module \FPMult_NormalizeModule..
Finding unused cells or wires in module \FPMult_RoundModule..
Finding unused cells or wires in module \FPMult_16..
Finding unused cells or wires in module \fp16_to_fp32..
Finding unused cells or wires in module \qmult..
Finding unused cells or wires in module \FPAddSub_a..
Finding unused cells or wires in module \FpAddSub_b..
Finding unused cells or wires in module \FPAddSub_c..
Finding unused cells or wires in module \FPAddSub_d..
Finding unused cells or wires in module \FPAddSub_single..
Finding unused cells or wires in module \qadd..
Finding unused cells or wires in module \fp32_to_fp16..
Finding unused cells or wires in module \seq_mac..
Removed 27 unused cells and 940 unused wires.
<suppressed ~53 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_a.
Optimizing module FPAddSub_c.
Optimizing module FPAddSub_d.
Optimizing module FPAddSub_single.
Optimizing module FPMult_16.
Optimizing module FPMult_ExecuteModule.
Optimizing module FPMult_NormalizeModule.
Optimizing module FPMult_PrepModule.
Optimizing module FPMult_RoundModule.
Optimizing module FpAddSub_b.
Optimizing module fp16_to_fp32.
Optimizing module fp32_to_fp16.
Optimizing module qadd.
Optimizing module qmult.
Optimizing module seq_mac.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_a..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPAddSub_c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPAddSub_d..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPAddSub_single..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_16..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_ExecuteModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FPMult_NormalizeModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_PrepModule..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \FPMult_RoundModule..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \FpAddSub_b..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fp16_to_fp32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \fp32_to_fp16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \qadd..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \qmult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \seq_mac..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~126 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_a.
  Optimizing cells in module \FPAddSub_c.
  Optimizing cells in module \FPAddSub_d.
  Optimizing cells in module \FPAddSub_single.
  Optimizing cells in module \FPMult_16.
  Optimizing cells in module \FPMult_ExecuteModule.
  Optimizing cells in module \FPMult_NormalizeModule.
  Optimizing cells in module \FPMult_PrepModule.
  Optimizing cells in module \FPMult_RoundModule.
  Optimizing cells in module \FpAddSub_b.
  Optimizing cells in module \fp16_to_fp32.
  Optimizing cells in module \fp32_to_fp16.
  Optimizing cells in module \qadd.
  Optimizing cells in module \qmult.
  Optimizing cells in module \seq_mac.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_a'.
Finding identical cells in module `\FPAddSub_c'.
Finding identical cells in module `\FPAddSub_d'.
Finding identical cells in module `\FPAddSub_single'.
Finding identical cells in module `\FPMult_16'.
Finding identical cells in module `\FPMult_ExecuteModule'.
Finding identical cells in module `\FPMult_NormalizeModule'.
Finding identical cells in module `\FPMult_PrepModule'.
Finding identical cells in module `\FPMult_RoundModule'.
Finding identical cells in module `\FpAddSub_b'.
Finding identical cells in module `\fp16_to_fp32'.
Finding identical cells in module `\fp32_to_fp16'.
Finding identical cells in module `\qadd'.
Finding identical cells in module `\qmult'.
Finding identical cells in module `\seq_mac'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_a..
Finding unused cells or wires in module \FPAddSub_c..
Finding unused cells or wires in module \FPAddSub_d..
Finding unused cells or wires in module \FPAddSub_single..
Finding unused cells or wires in module \FPMult_16..
Finding unused cells or wires in module \FPMult_ExecuteModule..
Finding unused cells or wires in module \FPMult_NormalizeModule..
Finding unused cells or wires in module \FPMult_PrepModule..
Finding unused cells or wires in module \FPMult_RoundModule..
Finding unused cells or wires in module \FpAddSub_b..
Finding unused cells or wires in module \fp16_to_fp32..
Finding unused cells or wires in module \fp32_to_fp16..
Finding unused cells or wires in module \qadd..
Finding unused cells or wires in module \qmult..
Finding unused cells or wires in module \seq_mac..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_a.
Optimizing module FPAddSub_c.
Optimizing module FPAddSub_d.
Optimizing module FPAddSub_single.
Optimizing module FPMult_16.
Optimizing module FPMult_ExecuteModule.
Optimizing module FPMult_NormalizeModule.
Optimizing module FPMult_PrepModule.
Optimizing module FPMult_RoundModule.
Optimizing module FpAddSub_b.
Optimizing module fp16_to_fp32.
Optimizing module fp32_to_fp16.
Optimizing module qadd.
Optimizing module qmult.
Optimizing module seq_mac.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== FPAddSub_a ===

   Number of wires:                 56
   Number of wire bits:            658
   Number of public wires:          30
   Number of public wire bits:     446
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $add                          128
     $and                            4
     $eq                            12
     $logic_not                      6
     $lt                            31
     $mux                           83
     $not                           64
     $or                             3
     $pmux                          48
     $reduce_and                    16
     $reduce_or                     56

=== FPAddSub_c ===

   Number of wires:                 32
   Number of wire bits:            350
   Number of public wires:          19
   Number of public wire bits:     337
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $add                            9
     $eq                            12
     $logic_not                      5
     $mux                            9
     $pmux                          66
     $reduce_or                     50
     $sub                            9

=== FPAddSub_d ===

   Number of wires:                 53
   Number of wire bits:            245
   Number of public wires:          28
   Number of public wire bits:     181
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 36
     $add                           41
     $and                           11
     $logic_not                      1
     $mux                           34
     $not                            4
     $or                             9
     $reduce_and                     8
     $reduce_or                     11
     $xor                            2

=== FPAddSub_single ===

   Number of wires:                 30
   Number of wire bits:            420
   Number of public wires:          30
   Number of public wire bits:     420
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $sdff                         170

=== FPMult_16 ===

   Number of wires:                 27
   Number of wire bits:            343
   Number of public wires:          27
   Number of public wire bits:     343
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $sdff                         175

=== FPMult_ExecuteModule ===

   Number of wires:                 15
   Number of wire bits:            103
   Number of public wires:          12
   Number of public wire bits:      95
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $add                           12
     $and                            1
     $mux                           10
     $or                             1
     $reduce_or                     10
     $xor                            1

=== FPMult_NormalizeModule ===

   Number of wires:                  9
   Number of wire bits:            119
   Number of public wires:           7
   Number of public wire bits:      55
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $sub                           70

=== FPMult_PrepModule ===

   Number of wires:                 23
   Number of wire bits:             86
   Number of public wires:          14
   Number of public wire bits:      77
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $and                            4
     $logic_not                      2
     $mul                           22
     $or                             3
     $reduce_and                    10
     $reduce_or                     20

=== FPMult_RoundModule ===

   Number of wires:                 12
   Number of wire bits:             90
   Number of public wires:          12
   Number of public wire bits:      90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $mux                           28

=== FpAddSub_b ===

   Number of wires:                 40
   Number of wire bits:            349
   Number of public wires:          12
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     $add                           33
     $mux                          197
     $sub                           33
     $xor                            2

=== fp16_to_fp32 ===

   Number of wires:                 73
   Number of wire bits:            343
   Number of public wires:           5
   Number of public wire bits:      88
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 70
     $add                           12
     $and                           55
     $dlatch                         4
     $eq                             5
     $logic_not                     20
     $mux                          110
     $not                           12
     $reduce_or                      4
     $shl                           23
     $sub                           40

=== fp32_to_fp16 ===

   Number of wires:                 14
   Number of wire bits:            136
   Number of public wires:           3
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $add                           16
     $eq                             8
     $ge                             8
     $le                             8
     $logic_and                      1
     $logic_not                     31
     $mux                           36
     $shr                           11
     $sub                            8

=== qadd ===

   Number of wires:                  6
   Number of wire bits:            103
   Number of public wires:           6
   Number of public wire bits:     103
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1

=== qmult ===

   Number of wires:                  7
   Number of wire bits:             87
   Number of public wires:           7
   Number of public wire bits:      87
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2

=== seq_mac ===

   Number of wires:                 12
   Number of wire bits:            242
   Number of public wires:          12
   Number of public wire bits:     242
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $sdff                          96

=== design hierarchy ===

   seq_mac                           1
     fp32_to_fp16                    0
     qadd                            0
       FPAddSub_single               0
         FPAddSub_a                  0
         FPAddSub_c                  0
         FPAddSub_d                  0
         FpAddSub_b                  0
     qmult                           0
       FPMult_16                     0
         FPMult_ExecuteModule        0
         FPMult_NormalizeModule      0
         FPMult_PrepModule           0
         FPMult_RoundModule          0
       fp16_to_fp32                  0

   Number of wires:                 12
   Number of wire bits:            242
   Number of public wires:          12
   Number of public wire bits:     242
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $sdff                          96

End of script. Logfile hash: 6183dd75a4, CPU: user 0.38s system 0.01s, MEM: 17.77 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 2x read_verilog (0 sec), 24% 4x opt_expr (0 sec), ...
