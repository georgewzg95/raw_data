
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/vtr_designs/verilog/koios/gemm_layer.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/vtr_designs/verilog/koios/gemm_layer.v' to AST representation.
Generating RTLIL representation for module `\gemm_layer'.
Generating RTLIL representation for module `\gemm_0_S00_AXI'.
Generating RTLIL representation for module `\matmul_20x20_systolic'.
Generating RTLIL representation for module `\output_logic'.
Generating RTLIL representation for module `\systolic_data_setup'.
Generating RTLIL representation for module `\systolic_pe_matrix'.
Generating RTLIL representation for module `\processing_element'.
Generating RTLIL representation for module `\seq_mac'.
Generating RTLIL representation for module `\qmult'.
Generating RTLIL representation for module `\qadd'.
Generating RTLIL representation for module `\FPMult_16'.
Generating RTLIL representation for module `\FPMult_PrepModule'.
Generating RTLIL representation for module `\FPMult_ExecuteModule'.
Generating RTLIL representation for module `\FPMult_NormalizeModule'.
Generating RTLIL representation for module `\FPMult_RoundModule'.
Generating RTLIL representation for module `\fp16_to_fp32'.
Generating RTLIL representation for module `\fp32_to_fp16'.
Generating RTLIL representation for module `\FPAddSub_single'.
Generating RTLIL representation for module `\FPAddSub_a'.
Generating RTLIL representation for module `\FpAddSub_b'.
Generating RTLIL representation for module `\FPAddSub_c'.
Generating RTLIL representation for module `\FPAddSub_d'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: FPAddSub_d          
root of   0 design levels: FPAddSub_c          
root of   0 design levels: FpAddSub_b          
root of   0 design levels: FPAddSub_a          
root of   1 design levels: FPAddSub_single     
root of   0 design levels: fp32_to_fp16        
root of   0 design levels: fp16_to_fp32        
root of   0 design levels: FPMult_RoundModule  
root of   0 design levels: FPMult_NormalizeModule
root of   0 design levels: FPMult_ExecuteModule
root of   0 design levels: FPMult_PrepModule   
root of   1 design levels: FPMult_16           
root of   2 design levels: qadd                
root of   2 design levels: qmult               
root of   3 design levels: seq_mac             
root of   4 design levels: processing_element  
root of   5 design levels: systolic_pe_matrix  
root of   0 design levels: systolic_data_setup 
root of   0 design levels: output_logic        
root of   6 design levels: matmul_20x20_systolic
root of   7 design levels: gemm_0_S00_AXI      
root of   8 design levels: gemm_layer          
Automatically selected gemm_layer as design top module.

2.2. Analyzing design hierarchy..
Top module:  \gemm_layer
Used module:     \gemm_0_S00_AXI
Used module:         \matmul_20x20_systolic
Used module:             \systolic_pe_matrix
Used module:                 \processing_element
Used module:                     \seq_mac
Used module:                         \fp32_to_fp16
Used module:                         \qadd
Used module:                             \FPAddSub_single
Used module:                                 \FPAddSub_d
Used module:                                 \FPAddSub_c
Used module:                                 \FpAddSub_b
Used module:                                 \FPAddSub_a
Used module:                         \qmult
Used module:                             \fp16_to_fp32
Used module:                             \FPMult_16
Used module:                                 \FPMult_RoundModule
Used module:                                 \FPMult_NormalizeModule
Used module:                                 \FPMult_ExecuteModule
Used module:                                 \FPMult_PrepModule
Used module:             \output_logic
Used module:             \systolic_data_setup
Parameter \C_S_AXI_DATA_WIDTH = 32
Parameter \C_S_AXI_ADDR_WIDTH = 6

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\gemm_0_S00_AXI'.
Parameter \C_S_AXI_DATA_WIDTH = 32
Parameter \C_S_AXI_ADDR_WIDTH = 6
Generating RTLIL representation for module `$paramod$41ce7cf734738109e6d2d7e48c357ff7b2e866ef\gemm_0_S00_AXI'.

2.4. Analyzing design hierarchy..
Top module:  \gemm_layer
Used module:     $paramod$41ce7cf734738109e6d2d7e48c357ff7b2e866ef\gemm_0_S00_AXI
Used module:         \matmul_20x20_systolic
Used module:             \systolic_pe_matrix
Used module:                 \processing_element
Used module:                     \seq_mac
Used module:                         \fp32_to_fp16
Used module:                         \qadd
Used module:                             \FPAddSub_single
Used module:                                 \FPAddSub_d
Used module:                                 \FPAddSub_c
Used module:                                 \FpAddSub_b
Used module:                                 \FPAddSub_a
Used module:                         \qmult
Used module:                             \fp16_to_fp32
Used module:                             \FPMult_16
Used module:                                 \FPMult_RoundModule
Used module:                                 \FPMult_NormalizeModule
Used module:                                 \FPMult_ExecuteModule
Used module:                                 \FPMult_PrepModule
Used module:             \output_logic
Used module:             \systolic_data_setup

2.5. Analyzing design hierarchy..
Top module:  \gemm_layer
Used module:     $paramod$41ce7cf734738109e6d2d7e48c357ff7b2e866ef\gemm_0_S00_AXI
Used module:         \matmul_20x20_systolic
Used module:             \systolic_pe_matrix
Used module:                 \processing_element
Used module:                     \seq_mac
Used module:                         \fp32_to_fp16
Used module:                         \qadd
Used module:                             \FPAddSub_single
Used module:                                 \FPAddSub_d
Used module:                                 \FPAddSub_c
Used module:                                 \FpAddSub_b
Used module:                                 \FPAddSub_a
Used module:                         \qmult
Used module:                             \fp16_to_fp32
Used module:                             \FPMult_16
Used module:                                 \FPMult_RoundModule
Used module:                                 \FPMult_NormalizeModule
Used module:                                 \FPMult_ExecuteModule
Used module:                                 \FPMult_PrepModule
Used module:             \output_logic
Used module:             \systolic_data_setup
Removing unused module `\gemm_0_S00_AXI'.
Removed 1 unused modules.
Mapping positional arguments of cell FPAddSub_single.M4 (FPAddSub_d).
Mapping positional arguments of cell FPAddSub_single.M3 (FPAddSub_c).
Mapping positional arguments of cell FPAddSub_single.M2 (FpAddSub_b).
Mapping positional arguments of cell FPAddSub_single.M1 (FPAddSub_a).
Mapping positional arguments of cell FPMult_16.RoundModule (FPMult_RoundModule).
Mapping positional arguments of cell FPMult_16.NormalizeModule (FPMult_NormalizeModule).
Mapping positional arguments of cell FPMult_16.ExecuteModule (FPMult_ExecuteModule).
Mapping positional arguments of cell FPMult_16.PrepModule (FPMult_PrepModule).
Warning: Resizing cell port $paramod$41ce7cf734738109e6d2d7e48c357ff7b2e866ef\gemm_0_S00_AXI.u_matmul.c_addr from 15 bits to 8 bits.
Warning: Resizing cell port $paramod$41ce7cf734738109e6d2d7e48c357ff7b2e866ef\gemm_0_S00_AXI.u_matmul.b_addr from 15 bits to 8 bits.
Warning: Resizing cell port $paramod$41ce7cf734738109e6d2d7e48c357ff7b2e866ef\gemm_0_S00_AXI.u_matmul.a_addr from 15 bits to 8 bits.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 61d9b2b13f, CPU: user 0.48s system 0.01s, MEM: 57.76 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 93% 2x read_verilog (0 sec), 6% 1x hierarchy (0 sec)
