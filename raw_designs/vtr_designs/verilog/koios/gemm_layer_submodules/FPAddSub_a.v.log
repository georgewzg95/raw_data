
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v' to AST representation.
Generating RTLIL representation for module `\FPAddSub_a'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: FPAddSub_a          
Automatically selected FPAddSub_a as design top module.

2.2. Analyzing design hierarchy..
Top module:  \FPAddSub_a

2.3. Analyzing design hierarchy..
Top module:  \FPAddSub_a
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:160$40 in module FPAddSub_a.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:160$40 in module FPAddSub_a.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:132$39 in module FPAddSub_a.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:132$39 in module FPAddSub_a.
Removed a total of 2 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 3 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:160$40'.
     1/25: $0\Lvl3[23:0] [23]
     2/25: $0\Lvl3[23:0] [21]
     3/25: $0\Lvl3[23:0] [22]
     4/25: $0\Lvl3[23:0] [20]
     5/25: $0\Lvl3[23:0] [19]
     6/25: $0\Lvl3[23:0] [18]
     7/25: $0\Lvl3[23:0] [17]
     8/25: $0\Lvl3[23:0] [16]
     9/25: $0\Lvl3[23:0] [15]
    10/25: $0\Lvl3[23:0] [14]
    11/25: $0\Lvl3[23:0] [13]
    12/25: $0\Lvl3[23:0] [12]
    13/25: $0\Lvl3[23:0] [11]
    14/25: $0\Lvl3[23:0] [10]
    15/25: $0\Lvl3[23:0] [9]
    16/25: $0\Lvl3[23:0] [8]
    17/25: $0\Lvl3[23:0] [7]
    18/25: $0\Lvl3[23:0] [6]
    19/25: $0\Lvl3[23:0] [5]
    20/25: $0\Lvl3[23:0] [4]
    21/25: $0\Lvl3[23:0] [3]
    22/25: $0\Lvl3[23:0] [2]
    23/25: $0\Lvl3[23:0] [1]
    24/25: $0\Lvl3[23:0] [0]
    25/25: $1\j[31:0]
Creating decoders for process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:132$39'.
     1/21: $0\Lvl2[23:0] [23:19]
     2/21: $0\Lvl2[23:0] [16]
     3/21: $0\Lvl2[23:0] [15]
     4/21: $0\Lvl2[23:0] [14]
     5/21: $0\Lvl2[23:0] [17]
     6/21: $0\Lvl2[23:0] [13]
     7/21: $0\Lvl2[23:0] [12]
     8/21: $0\Lvl2[23:0] [11]
     9/21: $0\Lvl2[23:0] [18]
    10/21: $0\Lvl2[23:0] [10]
    11/21: $0\Lvl2[23:0] [9]
    12/21: $0\Lvl2[23:0] [8]
    13/21: $0\Lvl2[23:0] [7]
    14/21: $0\Lvl2[23:0] [6]
    15/21: $0\Lvl2[23:0] [5]
    16/21: $0\Lvl2[23:0] [4]
    17/21: $0\Lvl2[23:0] [3]
    18/21: $0\Lvl2[23:0] [2]
    19/21: $0\Lvl2[23:0] [1]
    20/21: $0\Lvl2[23:0] [0]
    21/21: $1\i[31:0]
Creating decoders for process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:125$37'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\FPAddSub_a.\Lvl3' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:160$40'.
Latch inferred for signal `\FPAddSub_a.\j' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:160$40': $auto$proc_dlatch.cc:427:proc_dlatch$279
No latch inferred for signal `\FPAddSub_a.\Lvl2' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:132$39'.
Latch inferred for signal `\FPAddSub_a.\i' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:132$39': $auto$proc_dlatch.cc:427:proc_dlatch$288
No latch inferred for signal `\FPAddSub_a.\Lvl1' from process `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:125$37'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:160$40'.
Removing empty process `FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:160$40'.
Found and cleaned up 1 empty switch in `\FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:132$39'.
Removing empty process `FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:132$39'.
Removing empty process `FPAddSub_a.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_a.v:125$37'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_a.
<suppressed ~54 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_a.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_a'.
<suppressed ~540 debug messages>
Removed a total of 180 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_a..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~49 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_a.
    New ctrl vector for $pmux cell $procmux$266: { }
    New ctrl vector for $pmux cell $procmux$176: { $procmux$270_CMP $procmux$269_CMP $auto$opt_reduce.cc:134:opt_mux$290 }
    New ctrl vector for $pmux cell $procmux$171: { $procmux$270_CMP $procmux$269_CMP $auto$opt_reduce.cc:134:opt_mux$292 }
    New ctrl vector for $pmux cell $procmux$166: { $procmux$270_CMP $auto$opt_reduce.cc:134:opt_mux$294 }
    New ctrl vector for $pmux cell $procmux$161: { }
    New ctrl vector for $pmux cell $procmux$51: { $procmux$165_CMP $procmux$164_CMP $auto$opt_reduce.cc:134:opt_mux$296 }
    New ctrl vector for $pmux cell $procmux$186: { $procmux$270_CMP $procmux$269_CMP $auto$opt_reduce.cc:134:opt_mux$298 }
    New ctrl vector for $pmux cell $procmux$41: { $procmux$165_CMP $auto$opt_reduce.cc:134:opt_mux$300 }
    New ctrl vector for $pmux cell $procmux$206: { $procmux$270_CMP $procmux$269_CMP $auto$opt_reduce.cc:134:opt_mux$302 }
  Optimizing cells in module \FPAddSub_a.
Performed a total of 9 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_a'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_a..
Removed 4 unused cells and 259 unused wires.
<suppressed ~9 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_a.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_a..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~47 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_a.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_a'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_a..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_a.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== FPAddSub_a ===

   Number of wires:                 56
   Number of wire bits:            658
   Number of public wires:          30
   Number of public wire bits:     446
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $add                          128
     $and                            4
     $eq                            12
     $logic_not                      6
     $lt                            31
     $mux                           83
     $not                           64
     $or                             3
     $pmux                          48
     $reduce_and                    16
     $reduce_or                     56

End of script. Logfile hash: 59855f03df, CPU: user 0.14s system 0.00s, MEM: 12.74 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 4x opt_expr (0 sec), 27% 2x read_verilog (0 sec), ...
