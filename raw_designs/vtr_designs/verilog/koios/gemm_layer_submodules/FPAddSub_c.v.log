
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v' to AST representation.
Generating RTLIL representation for module `\FPAddSub_c'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: FPAddSub_c          
Automatically selected FPAddSub_c as design top module.

2.2. Analyzing design hierarchy..
Top module:  \FPAddSub_c

2.3. Analyzing design hierarchy..
Top module:  \FPAddSub_c
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:79$8 in module FPAddSub_c.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:79$8 in module FPAddSub_c.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:64$7 in module FPAddSub_c.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:64$7 in module FPAddSub_c.
Removed a total of 2 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:79$8'.
     1/34: $0\Lvl3[32:0] [2]
     2/34: $0\Lvl3[32:0] [0]
     3/34: $0\Lvl3[32:0] [1]
     4/34: $0\Lvl3[32:0] [3]
     5/34: $0\Lvl3[32:0] [4]
     6/34: $0\Lvl3[32:0] [5]
     7/34: $0\Lvl3[32:0] [6]
     8/34: $0\Lvl3[32:0] [7]
     9/34: $0\Lvl3[32:0] [8]
    10/34: $0\Lvl3[32:0] [9]
    11/34: $0\Lvl3[32:0] [10]
    12/34: $0\Lvl3[32:0] [11]
    13/34: $0\Lvl3[32:0] [12]
    14/34: $0\Lvl3[32:0] [13]
    15/34: $0\Lvl3[32:0] [14]
    16/34: $0\Lvl3[32:0] [15]
    17/34: $0\Lvl3[32:0] [16]
    18/34: $0\Lvl3[32:0] [17]
    19/34: $0\Lvl3[32:0] [18]
    20/34: $0\Lvl3[32:0] [19]
    21/34: $0\Lvl3[32:0] [20]
    22/34: $0\Lvl3[32:0] [21]
    23/34: $0\Lvl3[32:0] [22]
    24/34: $0\Lvl3[32:0] [23]
    25/34: $0\Lvl3[32:0] [24]
    26/34: $0\Lvl3[32:0] [25]
    27/34: $0\Lvl3[32:0] [26]
    28/34: $0\Lvl3[32:0] [27]
    29/34: $0\Lvl3[32:0] [28]
    30/34: $0\Lvl3[32:0] [29]
    31/34: $0\Lvl3[32:0] [30]
    32/34: $0\Lvl3[32:0] [31]
    33/34: $0\Lvl3[32:0] [32]
    34/34: $3\i[31:0]
Creating decoders for process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:64$7'.
     1/31: $0\Lvl2[32:0] [11]
     2/31: $0\Lvl2[32:0] [6]
     3/31: $0\Lvl2[32:0] [3:0]
     4/31: $0\Lvl2[32:0] [4]
     5/31: $0\Lvl2[32:0] [5]
     6/31: $0\Lvl2[32:0] [7]
     7/31: $0\Lvl2[32:0] [8]
     8/31: $0\Lvl2[32:0] [9]
     9/31: $0\Lvl2[32:0] [10]
    10/31: $0\Lvl2[32:0] [12]
    11/31: $0\Lvl2[32:0] [13]
    12/31: $0\Lvl2[32:0] [14]
    13/31: $0\Lvl2[32:0] [15]
    14/31: $0\Lvl2[32:0] [16]
    15/31: $0\Lvl2[32:0] [17]
    16/31: $0\Lvl2[32:0] [18]
    17/31: $0\Lvl2[32:0] [19]
    18/31: $0\Lvl2[32:0] [20]
    19/31: $0\Lvl2[32:0] [21]
    20/31: $0\Lvl2[32:0] [22]
    21/31: $0\Lvl2[32:0] [23]
    22/31: $0\Lvl2[32:0] [24]
    23/31: $0\Lvl2[32:0] [25]
    24/31: $0\Lvl2[32:0] [26]
    25/31: $0\Lvl2[32:0] [27]
    26/31: $0\Lvl2[32:0] [28]
    27/31: $0\Lvl2[32:0] [29]
    28/31: $0\Lvl2[32:0] [30]
    29/31: $0\Lvl2[32:0] [31]
    30/31: $0\Lvl2[32:0] [32]
    31/31: $1\i[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\FPAddSub_c.\Lvl3' from process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:79$8'.
Latch inferred for signal `\FPAddSub_c.\i' from process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:79$8': $auto$proc_dlatch.cc:427:proc_dlatch$349
No latch inferred for signal `\FPAddSub_c.\Lvl2' from process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:64$7'.
Latch inferred for signal `\FPAddSub_c.\i' from process `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:64$7': $auto$proc_dlatch.cc:427:proc_dlatch$358

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:79$8'.
Removing empty process `FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:79$8'.
Found and cleaned up 1 empty switch in `\FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:64$7'.
Removing empty process `FPAddSub_c.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/FPAddSub_c.v:64$7'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_c.
<suppressed ~73 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_c.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_c'.
<suppressed ~759 debug messages>
Removed a total of 253 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~65 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_c.
    New ctrl vector for $pmux cell $procmux$201: { $procmux$340_CMP $procmux$339_CMP $auto$opt_reduce.cc:134:opt_mux$360 }
    New ctrl vector for $pmux cell $procmux$196: { $procmux$340_CMP $auto$opt_reduce.cc:134:opt_mux$362 }
    New ctrl vector for $pmux cell $procmux$191: { $procmux$340_CMP $procmux$339_CMP $auto$opt_reduce.cc:134:opt_mux$364 }
    New ctrl vector for $pmux cell $procmux$181: { }
    New ctrl vector for $pmux cell $procmux$336: { }
    New ctrl vector for $pmux cell $procmux$211: { $procmux$340_CMP $procmux$339_CMP $auto$opt_reduce.cc:134:opt_mux$366 }
    New ctrl vector for $pmux cell $procmux$26: { $procmux$185_CMP $procmux$184_CMP $auto$opt_reduce.cc:134:opt_mux$368 }
    New ctrl vector for $pmux cell $procmux$206: { $procmux$340_CMP $procmux$339_CMP $auto$opt_reduce.cc:134:opt_mux$370 }
    New ctrl vector for $pmux cell $procmux$21: { $procmux$185_CMP $auto$opt_reduce.cc:134:opt_mux$372 }
  Optimizing cells in module \FPAddSub_c.
Performed a total of 9 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_c'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_c..
Removed 4 unused cells and 341 unused wires.
<suppressed ~6 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_c.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_c..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~63 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_c.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_c'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_c..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_c.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== FPAddSub_c ===

   Number of wires:                 32
   Number of wire bits:            350
   Number of public wires:          19
   Number of public wire bits:     337
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $add                            9
     $eq                            12
     $logic_not                      5
     $mux                            9
     $pmux                          66
     $reduce_or                     50
     $sub                            9

End of script. Logfile hash: 1ae58879d8, CPU: user 0.10s system 0.00s, MEM: 12.93 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 2x read_verilog (0 sec), 22% 4x opt_expr (0 sec), ...
