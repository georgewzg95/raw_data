
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v' to AST representation.
Generating RTLIL representation for module `\output_logic'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: output_logic        
Automatically selected output_logic as design top module.

2.2. Analyzing design hierarchy..
Top module:  \output_logic

2.3. Analyzing design hierarchy..
Top module:  \output_logic
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2 in module output_logic.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
     1/24: $0\c_data_out_19[319:0]
     2/24: $0\c_data_out_18[319:0]
     3/24: $0\c_data_out_17[319:0]
     4/24: $0\c_data_out_16[319:0]
     5/24: $0\c_data_out_15[319:0]
     6/24: $0\c_data_out_14[319:0]
     7/24: $0\c_data_out_13[319:0]
     8/24: $0\c_data_out_12[319:0]
     9/24: $0\c_data_out_11[319:0]
    10/24: $0\c_data_out_10[319:0]
    11/24: $0\c_data_out_9[319:0]
    12/24: $0\c_data_out_8[319:0]
    13/24: $0\c_data_out_7[319:0]
    14/24: $0\c_data_out_6[319:0]
    15/24: $0\c_data_out_5[319:0]
    16/24: $0\c_data_out_4[319:0]
    17/24: $0\c_data_out_3[319:0]
    18/24: $0\c_data_out_2[319:0]
    19/24: $0\c_data_out_1[319:0]
    20/24: $0\counter[31:0]
    21/24: $0\start_capturing_c_data[0:0]
    22/24: $0\c_data_available[0:0]
    23/24: $0\c_addr[7:0]
    24/24: $0\c_data_out[319:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\output_logic.\c_data_out' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$344' with positive edge clock.
Creating register for signal `\output_logic.\c_addr' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$345' with positive edge clock.
Creating register for signal `\output_logic.\c_data_available' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$346' with positive edge clock.
Creating register for signal `\output_logic.\start_capturing_c_data' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$347' with positive edge clock.
Creating register for signal `\output_logic.\counter' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$348' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_1' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$349' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_2' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$350' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_3' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$351' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_4' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_5' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_6' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$354' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_7' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$355' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_8' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$356' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_9' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$357' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_10' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_11' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_12' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_13' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_14' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_15' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_16' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_17' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_18' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `\output_logic.\c_data_out_19' using process `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
  created $dff cell `$procdff$367' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
Removing empty process `output_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/gemm_layer_submodules/output_logic.v:889$2'.
Cleaned up 5 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module output_logic.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module output_logic.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\output_logic'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \output_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \output_logic.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\output_logic'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$364 ($dff) from module output_logic (D = $procmux$64_Y, Q = \c_data_out_16, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$368 ($sdff) from module output_logic (D = $procmux$64_Y, Q = \c_data_out_16).
Adding SRST signal on $procdff$365 ($dff) from module output_logic (D = $procmux$50_Y, Q = \c_data_out_17, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$372 ($sdff) from module output_logic (D = $procmux$50_Y, Q = \c_data_out_17).
Adding SRST signal on $procdff$366 ($dff) from module output_logic (D = $procmux$36_Y, Q = \c_data_out_18, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$376 ($sdff) from module output_logic (D = $procmux$36_Y, Q = \c_data_out_18).
Adding SRST signal on $procdff$367 ($dff) from module output_logic (D = $procmux$22_Y, Q = \c_data_out_19, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$380 ($sdff) from module output_logic (D = $procmux$22_Y, Q = \c_data_out_19).
Adding SRST signal on $procdff$344 ($dff) from module output_logic (D = $procmux$339_Y, Q = \c_data_out, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$384 ($sdff) from module output_logic (D = $procmux$339_Y, Q = \c_data_out).
Adding EN signal on $procdff$345 ($dff) from module output_logic (D = $procmux$328_Y, Q = \c_addr).
Adding SRST signal on $procdff$346 ($dff) from module output_logic (D = $procmux$311_Y, Q = \c_data_available, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$391 ($sdff) from module output_logic (D = $procmux$311_Y, Q = \c_data_available).
Adding SRST signal on $procdff$347 ($dff) from module output_logic (D = $procmux$297_Y, Q = \start_capturing_c_data, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$399 ($sdff) from module output_logic (D = $procmux$297_Y, Q = \start_capturing_c_data).
Adding SRST signal on $procdff$348 ($dff) from module output_logic (D = $procmux$288_Y, Q = \counter, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$403 ($sdff) from module output_logic (D = $procmux$288_Y, Q = \counter).
Adding SRST signal on $procdff$349 ($dff) from module output_logic (D = $procmux$274_Y, Q = \c_data_out_1, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$413 ($sdff) from module output_logic (D = $procmux$274_Y, Q = \c_data_out_1).
Adding SRST signal on $procdff$350 ($dff) from module output_logic (D = $procmux$260_Y, Q = \c_data_out_2, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$417 ($sdff) from module output_logic (D = $procmux$260_Y, Q = \c_data_out_2).
Adding SRST signal on $procdff$351 ($dff) from module output_logic (D = $procmux$246_Y, Q = \c_data_out_3, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$421 ($sdff) from module output_logic (D = $procmux$246_Y, Q = \c_data_out_3).
Adding SRST signal on $procdff$352 ($dff) from module output_logic (D = $procmux$232_Y, Q = \c_data_out_4, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$425 ($sdff) from module output_logic (D = $procmux$232_Y, Q = \c_data_out_4).
Adding SRST signal on $procdff$353 ($dff) from module output_logic (D = $procmux$218_Y, Q = \c_data_out_5, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$429 ($sdff) from module output_logic (D = $procmux$218_Y, Q = \c_data_out_5).
Adding SRST signal on $procdff$354 ($dff) from module output_logic (D = $procmux$204_Y, Q = \c_data_out_6, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$433 ($sdff) from module output_logic (D = $procmux$204_Y, Q = \c_data_out_6).
Adding SRST signal on $procdff$355 ($dff) from module output_logic (D = $procmux$190_Y, Q = \c_data_out_7, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$437 ($sdff) from module output_logic (D = $procmux$190_Y, Q = \c_data_out_7).
Adding SRST signal on $procdff$356 ($dff) from module output_logic (D = $procmux$176_Y, Q = \c_data_out_8, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$441 ($sdff) from module output_logic (D = $procmux$176_Y, Q = \c_data_out_8).
Adding SRST signal on $procdff$357 ($dff) from module output_logic (D = $procmux$162_Y, Q = \c_data_out_9, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$445 ($sdff) from module output_logic (D = $procmux$162_Y, Q = \c_data_out_9).
Adding SRST signal on $procdff$358 ($dff) from module output_logic (D = $procmux$148_Y, Q = \c_data_out_10, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$449 ($sdff) from module output_logic (D = $procmux$148_Y, Q = \c_data_out_10).
Adding SRST signal on $procdff$359 ($dff) from module output_logic (D = $procmux$134_Y, Q = \c_data_out_11, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$453 ($sdff) from module output_logic (D = $procmux$134_Y, Q = \c_data_out_11).
Adding SRST signal on $procdff$360 ($dff) from module output_logic (D = $procmux$120_Y, Q = \c_data_out_12, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$457 ($sdff) from module output_logic (D = $procmux$120_Y, Q = \c_data_out_12).
Adding SRST signal on $procdff$361 ($dff) from module output_logic (D = $procmux$106_Y, Q = \c_data_out_13, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$461 ($sdff) from module output_logic (D = $procmux$106_Y, Q = \c_data_out_13).
Adding SRST signal on $procdff$362 ($dff) from module output_logic (D = $procmux$92_Y, Q = \c_data_out_14, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$465 ($sdff) from module output_logic (D = $procmux$92_Y, Q = \c_data_out_14).
Adding SRST signal on $procdff$363 ($dff) from module output_logic (D = $procmux$78_Y, Q = \c_data_out_15, rval = 320'00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$469 ($sdff) from module output_logic (D = $procmux$78_Y, Q = \c_data_out_15).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \output_logic..
Removed 23 unused cells and 170 unused wires.
<suppressed ~24 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module output_logic.
<suppressed ~24 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \output_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \output_logic.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\output_logic'.
<suppressed ~66 debug messages>
Removed a total of 22 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \output_logic..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module output_logic.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \output_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \output_logic.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\output_logic'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \output_logic..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module output_logic.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== output_logic ===

   Number of wires:                542
   Number of wire bits:          39024
   Number of public wires:         434
   Number of public wire bits:   13192
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                133
     $add                           40
     $dffe                           8
     $eq                             8
     $ge                            32
     $mux                        25774
     $ne                             5
     $not                            1
     $or                             1
     $reduce_and                     5
     $reduce_bool                   11
     $sdffe                       6434
     $sub                            8

End of script. Logfile hash: 412604c2cf, CPU: user 2.89s system 0.02s, MEM: 47.95 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 47% 3x opt_dff (1 sec), 19% 3x opt_clean (0 sec), ...
