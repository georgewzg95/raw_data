
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v' to AST representation.
Generating RTLIL representation for module `\FPAddSub_AlignShift1'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: FPAddSub_AlignShift1
Automatically selected FPAddSub_AlignShift1 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \FPAddSub_AlignShift1

2.3. Analyzing design hierarchy..
Top module:  \FPAddSub_AlignShift1
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 2 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:95$9 in module FPAddSub_AlignShift1.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:95$9 in module FPAddSub_AlignShift1.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:79$4 in module FPAddSub_AlignShift1.
Removed a total of 2 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:95$9'.
     1/11: $0\Lvl2[10:0] [10:7]
     2/11: $0\Lvl2[10:0] [4]
     3/11: $0\Lvl2[10:0] [3]
     4/11: $0\Lvl2[10:0] [2]
     5/11: $0\Lvl2[10:0] [5]
     6/11: $0\Lvl2[10:0] [1]
     7/11: $0\Lvl2[10:0] [0]
     8/11: $0\Lvl2[10:0] [6]
     9/11: $3\i[31:0]
    10/11: $2\i[31:0]
    11/11: $1\i[31:0]
Creating decoders for process `\FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:79$4'.
     1/1: $0\Lvl1[10:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\FPAddSub_AlignShift1.\Lvl2' from process `\FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:95$9'.
Latch inferred for signal `\FPAddSub_AlignShift1.\i' from process `\FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:95$9': $auto$proc_dlatch.cc:427:proc_dlatch$163
No latch inferred for signal `\FPAddSub_AlignShift1.\Lvl1' from process `\FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:79$4'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:95$9'.
Removing empty process `FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:95$9'.
Found and cleaned up 1 empty switch in `\FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:79$4'.
Removing empty process `FPAddSub_AlignShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:79$4'.
Cleaned up 4 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_AlignShift1.
<suppressed ~56 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_AlignShift1.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_AlignShift1'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_AlignShift1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/5 on $pmux $procmux$77.
    dead port 2/5 on $pmux $procmux$77.
    dead port 3/5 on $pmux $procmux$77.
    dead port 4/5 on $pmux $procmux$77.
    dead port 5/5 on $pmux $procmux$77.
    dead port 1/5 on $pmux $procmux$33.
    dead port 2/5 on $pmux $procmux$33.
    dead port 3/5 on $pmux $procmux$33.
    dead port 4/5 on $pmux $procmux$33.
    dead port 5/5 on $pmux $procmux$33.
    dead port 1/5 on $pmux $procmux$88.
    dead port 2/5 on $pmux $procmux$88.
    dead port 3/5 on $pmux $procmux$88.
    dead port 4/5 on $pmux $procmux$88.
    dead port 5/5 on $pmux $procmux$88.
    dead port 1/3 on $pmux $procmux$99.
    dead port 2/3 on $pmux $procmux$99.
    dead port 3/3 on $pmux $procmux$99.
    dead port 1/5 on $pmux $procmux$55.
    dead port 2/5 on $pmux $procmux$55.
    dead port 3/5 on $pmux $procmux$55.
    dead port 4/5 on $pmux $procmux$55.
    dead port 5/5 on $pmux $procmux$55.
    dead port 1/5 on $pmux $procmux$22.
    dead port 2/5 on $pmux $procmux$22.
    dead port 3/5 on $pmux $procmux$22.
    dead port 4/5 on $pmux $procmux$22.
    dead port 5/5 on $pmux $procmux$22.
    dead port 1/5 on $pmux $procmux$66.
    dead port 2/5 on $pmux $procmux$66.
    dead port 3/5 on $pmux $procmux$66.
    dead port 4/5 on $pmux $procmux$66.
    dead port 5/5 on $pmux $procmux$66.
    dead port 1/5 on $pmux $procmux$44.
    dead port 2/5 on $pmux $procmux$44.
    dead port 3/5 on $pmux $procmux$44.
    dead port 4/5 on $pmux $procmux$44.
    dead port 5/5 on $pmux $procmux$44.
    dead port 1/5 on $pmux $procmux$11.
    dead port 2/5 on $pmux $procmux$11.
    dead port 3/5 on $pmux $procmux$11.
    dead port 4/5 on $pmux $procmux$11.
    dead port 5/5 on $pmux $procmux$11.
    dead port 1/2 on $mux $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:89$8.
    dead port 2/2 on $mux $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/softmax_submodules/FPAddSub_AlignShift1.v:89$8.
Removed 45 multiplexer ports.
<suppressed ~9 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_AlignShift1.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_AlignShift1'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 1-bit at position 1 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 2 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 1-bit at position 3 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 4 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 5 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 6 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 7 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 8 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 9 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 10 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 11 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 12 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 13 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 14 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 15 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 16 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 17 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 18 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 19 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 20 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 21 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 22 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 23 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 24 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 25 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 26 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 27 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 28 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 29 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 30 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.
Setting constant 0-bit at position 31 on $auto$proc_dlatch.cc:427:proc_dlatch$163 ($dlatch) from module FPAddSub_AlignShift1.

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_AlignShift1..
Removed 5 unused cells and 127 unused wires.
<suppressed ~6 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_AlignShift1.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_AlignShift1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_AlignShift1.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_AlignShift1'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_AlignShift1..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_AlignShift1.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== FPAddSub_AlignShift1 ===

   Number of wires:                 11
   Number of wire bits:            114
   Number of public wires:           9
   Number of public wire bits:     112
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $mux                           11
     $not                            1
     $pmux                          11
     $reduce_or                      2

End of script. Logfile hash: fee4489b48, CPU: user 0.06s system 0.00s, MEM: 11.91 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 4x opt_expr (0 sec), 21% 3x opt_merge (0 sec), ...
