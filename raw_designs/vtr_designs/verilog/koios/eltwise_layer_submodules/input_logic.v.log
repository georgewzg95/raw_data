
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v' to AST representation.
Generating RTLIL representation for module `\input_logic'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: input_logic         
Automatically selected input_logic as design top module.

2.2. Analyzing design hierarchy..
Top module:  \input_logic

2.3. Analyzing design hierarchy..
Top module:  \input_logic
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:169$42 in module input_logic.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:150$37 in module input_logic.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:113$7 in module input_logic.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:91$1 in module input_logic.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:169$42'.
     1/1: $0\b_mem_access_counter[7:0]
Creating decoders for process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:150$37'.
     1/2: $0\b_mem_access[0:0]
     2/2: $0\b_addr[9:0]
Creating decoders for process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:113$7'.
     1/1: $0\a_mem_access_counter[7:0]
Creating decoders for process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:91$1'.
     1/3: $0\a_mem_access[0:0]
     2/3: $0\iterations[7:0]
     3/3: $0\a_addr[9:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\input_logic.\b_mem_access_counter' using process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:169$42'.
  created $dff cell `$procdff$109' with positive edge clock.
Creating register for signal `\input_logic.\b_addr' using process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:150$37'.
  created $dff cell `$procdff$110' with positive edge clock.
Creating register for signal `\input_logic.\b_mem_access' using process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:150$37'.
  created $dff cell `$procdff$111' with positive edge clock.
Creating register for signal `\input_logic.\a_mem_access_counter' using process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:113$7'.
  created $dff cell `$procdff$112' with positive edge clock.
Creating register for signal `\input_logic.\a_addr' using process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:91$1'.
  created $dff cell `$procdff$113' with positive edge clock.
Creating register for signal `\input_logic.\iterations' using process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:91$1'.
  created $dff cell `$procdff$114' with positive edge clock.
Creating register for signal `\input_logic.\a_mem_access' using process `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:91$1'.
  created $dff cell `$procdff$115' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:169$42'.
Removing empty process `input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:169$42'.
Found and cleaned up 2 empty switches in `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:150$37'.
Removing empty process `input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:150$37'.
Found and cleaned up 2 empty switches in `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:113$7'.
Removing empty process `input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:113$7'.
Found and cleaned up 2 empty switches in `\input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:91$1'.
Removing empty process `input_logic.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:91$1'.
Cleaned up 8 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module input_logic.
<suppressed ~10 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module input_logic.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\input_logic'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \input_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \input_logic.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\input_logic'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$110 ($dff) from module input_logic (D = $procmux$86_Y, Q = \b_addr).
Adding SRST signal on $procdff$111 ($dff) from module input_logic (D = $procmux$78_Y, Q = \b_mem_access, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$119 ($sdff) from module input_logic (D = 1'1, Q = \b_mem_access).
Adding SRST signal on $procdff$112 ($dff) from module input_logic (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:118$11_Y [7:0], Q = \a_mem_access_counter, rval = 8'00000000).
Adding SRST signal on $procdff$115 ($dff) from module input_logic (D = $procmux$94_Y, Q = \a_mem_access, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$126 ($sdff) from module input_logic (D = 1'1, Q = \a_mem_access).
Adding EN signal on $procdff$113 ($dff) from module input_logic (D = $procmux$107_Y, Q = \a_addr).
Adding SRST signal on $procdff$109 ($dff) from module input_logic (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:174$46_Y [7:0], Q = \b_mem_access_counter, rval = 8'00000000).
Adding SRST signal on $procdff$114 ($dff) from module input_logic (D = $procmux$99_Y, Q = \iterations, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:262:slice$136 ($sdff) from module input_logic (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/eltwise_layer_submodules/input_logic.v:105$6_Y [7:0], Q = \iterations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \input_logic..
Removed 10 unused cells and 50 unused wires.
<suppressed ~11 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module input_logic.
<suppressed ~2 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \input_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \input_logic.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\input_logic'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \input_logic..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module input_logic.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \input_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \input_logic.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\input_logic'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \input_logic..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module input_logic.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== input_logic ===

   Number of wires:                 82
   Number of wire bits:            733
   Number of public wires:          27
   Number of public wire bits:     367
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 71
     $add                          160
     $and                          256
     $dffe                          20
     $eq                            64
     $ge                            64
     $le                            32
     $logic_and                      8
     $logic_or                       7
     $mux                           42
     $not                           10
     $reduce_bool                    2
     $reduce_or                      2
     $sdff                          16
     $sdffe                          9

End of script. Logfile hash: 8a9622d079, CPU: user 0.10s system 0.00s, MEM: 12.46 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 31% 5x opt_expr (0 sec), 15% 3x opt_clean (0 sec), ...
