
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v' to AST representation.
Generating RTLIL representation for module `\pipelined_input_18_1_16'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: pipelined_input_18_1_16
Automatically selected pipelined_input_18_1_16 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \pipelined_input_18_1_16

2.3. Analyzing design hierarchy..
Top module:  \pipelined_input_18_1_16
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1 in module pipelined_input_18_1_16.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
     1/17: $0\pipeline_valid_0[0:0]
     2/17: $0\pipeline_0_15[17:0]
     3/17: $0\pipeline_0_14[17:0]
     4/17: $0\pipeline_0_13[17:0]
     5/17: $0\pipeline_0_12[17:0]
     6/17: $0\pipeline_0_11[17:0]
     7/17: $0\pipeline_0_10[17:0]
     8/17: $0\pipeline_0_9[17:0]
     9/17: $0\pipeline_0_8[17:0]
    10/17: $0\pipeline_0_7[17:0]
    11/17: $0\pipeline_0_6[17:0]
    12/17: $0\pipeline_0_5[17:0]
    13/17: $0\pipeline_0_4[17:0]
    14/17: $0\pipeline_0_3[17:0]
    15/17: $0\pipeline_0_2[17:0]
    16/17: $0\pipeline_0_1[17:0]
    17/17: $0\pipeline_0_0[17:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_0' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$138' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_1' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$139' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_2' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$140' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_3' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$141' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_4' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$142' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_5' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$143' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_6' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_7' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_8' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$146' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_9' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$147' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_10' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$148' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_11' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$149' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_12' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$150' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_13' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$151' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_14' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$152' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_0_15' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$153' with positive edge clock.
Creating register for signal `\pipelined_input_18_1_16.\pipeline_valid_0' using process `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
  created $dff cell `$procdff$154' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
Removing empty process `pipelined_input_18_1_16.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/clstm_like.small_submodules/pipelined_input_18_1_16.v:61$1'.
Cleaned up 3 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_input_18_1_16.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_input_18_1_16.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_input_18_1_16'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_input_18_1_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_input_18_1_16.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_input_18_1_16'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$138 ($dff) from module pipelined_input_18_1_16 (D = $procmux$133_Y, Q = \pipeline_0_0, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$155 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$131_Y, Q = \pipeline_0_0).
Adding SRST signal on $procdff$139 ($dff) from module pipelined_input_18_1_16 (D = $procmux$125_Y, Q = \pipeline_0_1, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$157 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$123_Y, Q = \pipeline_0_1).
Adding SRST signal on $procdff$140 ($dff) from module pipelined_input_18_1_16 (D = $procmux$117_Y, Q = \pipeline_0_2, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$159 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$115_Y, Q = \pipeline_0_2).
Adding SRST signal on $procdff$141 ($dff) from module pipelined_input_18_1_16 (D = $procmux$109_Y, Q = \pipeline_0_3, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$161 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$107_Y, Q = \pipeline_0_3).
Adding SRST signal on $procdff$142 ($dff) from module pipelined_input_18_1_16 (D = $procmux$101_Y, Q = \pipeline_0_4, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$163 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$99_Y, Q = \pipeline_0_4).
Adding SRST signal on $procdff$143 ($dff) from module pipelined_input_18_1_16 (D = $procmux$93_Y, Q = \pipeline_0_5, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$165 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$91_Y, Q = \pipeline_0_5).
Adding SRST signal on $procdff$144 ($dff) from module pipelined_input_18_1_16 (D = $procmux$85_Y, Q = \pipeline_0_6, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$167 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$83_Y, Q = \pipeline_0_6).
Adding SRST signal on $procdff$145 ($dff) from module pipelined_input_18_1_16 (D = $procmux$77_Y, Q = \pipeline_0_7, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$169 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$75_Y, Q = \pipeline_0_7).
Adding SRST signal on $procdff$146 ($dff) from module pipelined_input_18_1_16 (D = $procmux$69_Y, Q = \pipeline_0_8, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$171 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$67_Y, Q = \pipeline_0_8).
Adding SRST signal on $procdff$147 ($dff) from module pipelined_input_18_1_16 (D = $procmux$61_Y, Q = \pipeline_0_9, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$173 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$59_Y, Q = \pipeline_0_9).
Adding SRST signal on $procdff$148 ($dff) from module pipelined_input_18_1_16 (D = $procmux$53_Y, Q = \pipeline_0_10, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$175 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$51_Y, Q = \pipeline_0_10).
Adding SRST signal on $procdff$149 ($dff) from module pipelined_input_18_1_16 (D = $procmux$45_Y, Q = \pipeline_0_11, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$177 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$43_Y, Q = \pipeline_0_11).
Adding SRST signal on $procdff$150 ($dff) from module pipelined_input_18_1_16 (D = $procmux$37_Y, Q = \pipeline_0_12, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$179 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$35_Y, Q = \pipeline_0_12).
Adding SRST signal on $procdff$151 ($dff) from module pipelined_input_18_1_16 (D = $procmux$29_Y, Q = \pipeline_0_13, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$181 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$27_Y, Q = \pipeline_0_13).
Adding SRST signal on $procdff$152 ($dff) from module pipelined_input_18_1_16 (D = $procmux$21_Y, Q = \pipeline_0_14, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$183 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$19_Y, Q = \pipeline_0_14).
Adding SRST signal on $procdff$153 ($dff) from module pipelined_input_18_1_16 (D = $procmux$13_Y, Q = \pipeline_0_15, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$185 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$11_Y, Q = \pipeline_0_15).
Adding SRST signal on $procdff$154 ($dff) from module pipelined_input_18_1_16 (D = $procmux$5_Y, Q = \pipeline_valid_0, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$187 ($sdff) from module pipelined_input_18_1_16 (D = $procmux$3_Y, Q = \pipeline_valid_0).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_input_18_1_16..
Removed 34 unused cells and 102 unused wires.
<suppressed ~35 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_input_18_1_16.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipelined_input_18_1_16..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipelined_input_18_1_16.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipelined_input_18_1_16'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipelined_input_18_1_16..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipelined_input_18_1_16.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== pipelined_input_18_1_16 ===

   Number of wires:                 71
   Number of wire bits:           1159
   Number of public wires:          54
   Number of public wire bits:     870
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $mux                          289
     $sdffe                        289

End of script. Logfile hash: ac46085b67, CPU: user 0.05s system 0.00s, MEM: 12.92 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 4x opt_expr (0 sec), 16% 3x opt_merge (0 sec), ...
