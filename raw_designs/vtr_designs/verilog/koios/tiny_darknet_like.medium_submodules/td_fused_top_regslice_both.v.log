
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v' to AST representation.
Generating RTLIL representation for module `\td_fused_top_regslice_both'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: td_fused_top_regslice_both
Automatically selected td_fused_top_regslice_both as design top module.

2.2. Analyzing design hierarchy..
Top module:  \td_fused_top_regslice_both

2.3. Analyzing design hierarchy..
Top module:  \td_fused_top_regslice_both
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:101$56 in module td_fused_top_regslice_both.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:73$13 in module td_fused_top_regslice_both.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:61$7 in module td_fused_top_regslice_both.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:49$1 in module td_fused_top_regslice_both.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:101$56'.
     1/1: $1\B_V_data_1_data_out[31:0]
Creating decoders for process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:95$54'.
     1/1: $0\B_V_data_1_payload_B[31:0]
Creating decoders for process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:89$52'.
     1/1: $0\B_V_data_1_payload_A[31:0]
Creating decoders for process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:73$13'.
     1/1: $0\B_V_data_1_state[1:0]
Creating decoders for process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:61$7'.
     1/1: $0\B_V_data_1_sel_wr[0:0]
Creating decoders for process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:49$1'.
     1/1: $0\B_V_data_1_sel_rd[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\td_fused_top_regslice_both.\B_V_data_1_data_out' from process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:101$56'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\td_fused_top_regslice_both.\B_V_data_1_payload_B' using process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:95$54'.
  created $dff cell `$procdff$99' with positive edge clock.
Creating register for signal `\td_fused_top_regslice_both.\B_V_data_1_payload_A' using process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:89$52'.
  created $dff cell `$procdff$100' with positive edge clock.
Creating register for signal `\td_fused_top_regslice_both.\B_V_data_1_state' using process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:73$13'.
  created $dff cell `$procdff$101' with positive edge clock.
Creating register for signal `\td_fused_top_regslice_both.\B_V_data_1_sel_wr' using process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:61$7'.
  created $dff cell `$procdff$102' with positive edge clock.
Creating register for signal `\td_fused_top_regslice_both.\B_V_data_1_sel_rd' using process `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:49$1'.
  created $dff cell `$procdff$103' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:101$56'.
Removing empty process `td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:101$56'.
Found and cleaned up 1 empty switch in `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:95$54'.
Removing empty process `td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:95$54'.
Found and cleaned up 1 empty switch in `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:89$52'.
Removing empty process `td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:89$52'.
Found and cleaned up 4 empty switches in `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:73$13'.
Removing empty process `td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:73$13'.
Found and cleaned up 2 empty switches in `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:61$7'.
Removing empty process `td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:61$7'.
Found and cleaned up 2 empty switches in `\td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:49$1'.
Removing empty process `td_fused_top_regslice_both.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:49$1'.
Cleaned up 11 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module td_fused_top_regslice_both.
<suppressed ~23 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module td_fused_top_regslice_both.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\td_fused_top_regslice_both'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \td_fused_top_regslice_both..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \td_fused_top_regslice_both.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\td_fused_top_regslice_both'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$103 ($dff) from module td_fused_top_regslice_both (D = $procmux$94_Y, Q = \B_V_data_1_sel_rd, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$104 ($sdff) from module td_fused_top_regslice_both (D = $not$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:54$6_Y, Q = \B_V_data_1_sel_rd).
Adding SRST signal on $procdff$102 ($dff) from module td_fused_top_regslice_both (D = $procmux$88_Y, Q = \B_V_data_1_sel_wr, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$106 ($sdff) from module td_fused_top_regslice_both (D = $not$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.medium_submodules/td_fused_top_regslice_both.v:110$58_Y, Q = \B_V_data_1_sel_wr).
Adding SRST signal on $procdff$101 ($dff) from module td_fused_top_regslice_both (D = $procmux$82_Y [1], Q = \B_V_data_1_state [1], rval = 1'0).
Adding SRST signal on $procdff$101 ($dff) from module td_fused_top_regslice_both (D = $procmux$79_Y [0], Q = \B_V_data_1_state [0], rval = 1'0).
Adding EN signal on $procdff$100 ($dff) from module td_fused_top_regslice_both (D = \data_in, Q = \B_V_data_1_payload_A).
Adding EN signal on $procdff$99 ($dff) from module td_fused_top_regslice_both (D = \data_in, Q = \B_V_data_1_payload_B).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \td_fused_top_regslice_both..
Removed 7 unused cells and 57 unused wires.
<suppressed ~9 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module td_fused_top_regslice_both.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \td_fused_top_regslice_both..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \td_fused_top_regslice_both.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\td_fused_top_regslice_both'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \td_fused_top_regslice_both..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module td_fused_top_regslice_both.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== td_fused_top_regslice_both ===

   Number of wires:                 59
   Number of wire bits:            249
   Number of public wires:          24
   Number of public wire bits:     211
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     $and                           16
     $dffe                          64
     $eq                            10
     $logic_and                      1
     $mux                           39
     $ne                             2
     $not                            6
     $or                             5
     $reduce_or                      2
     $sdff                           2
     $sdffe                          2

End of script. Logfile hash: eb74f16756, CPU: user 0.06s system 0.00s, MEM: 12.09 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 4x opt_expr (0 sec), 21% 2x read_verilog (0 sec), ...
