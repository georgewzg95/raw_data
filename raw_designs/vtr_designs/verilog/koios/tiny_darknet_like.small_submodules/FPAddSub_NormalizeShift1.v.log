
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v' to AST representation.
Generating RTLIL representation for module `\FPAddSub_NormalizeShift1'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: FPAddSub_NormalizeShift1
Automatically selected FPAddSub_NormalizeShift1 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \FPAddSub_NormalizeShift1

2.3. Analyzing design hierarchy..
Top module:  \FPAddSub_NormalizeShift1
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:55$2 in module FPAddSub_NormalizeShift1.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:55$2 in module FPAddSub_NormalizeShift1.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:36$1 in module FPAddSub_NormalizeShift1.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:36$1 in module FPAddSub_NormalizeShift1.
Removed a total of 2 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\FPAddSub_NormalizeShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:55$2'.
     1/4: $1\Lvl3[16:0] [16:15]
     2/4: $1\Lvl3[16:0] [12:0]
     3/4: $1\Lvl3[16:0] [14]
     4/4: $1\Lvl3[16:0] [13]
Creating decoders for process `\FPAddSub_NormalizeShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:36$1'.
     1/4: $1\Lvl2[16:0] [16:12]
     2/4: $1\Lvl2[16:0] [3:0]
     3/4: $1\Lvl2[16:0] [11:8]
     4/4: $1\Lvl2[16:0] [7:4]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\FPAddSub_NormalizeShift1.\Lvl3' from process `\FPAddSub_NormalizeShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:55$2'.
No latch inferred for signal `\FPAddSub_NormalizeShift1.\Lvl2' from process `\FPAddSub_NormalizeShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:36$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\FPAddSub_NormalizeShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:55$2'.
Removing empty process `FPAddSub_NormalizeShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:55$2'.
Found and cleaned up 1 empty switch in `\FPAddSub_NormalizeShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:36$1'.
Removing empty process `FPAddSub_NormalizeShift1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/tiny_darknet_like.small_submodules/FPAddSub_NormalizeShift1.v:36$1'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_NormalizeShift1.
<suppressed ~8 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_NormalizeShift1.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_NormalizeShift1'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_NormalizeShift1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_NormalizeShift1.
    New ctrl vector for $pmux cell $procmux$33: { $procmux$42_CMP $procmux$40_CMP $auto$opt_reduce.cc:134:opt_mux$44 }
    New ctrl vector for $pmux cell $procmux$38: { $procmux$42_CMP $auto$opt_reduce.cc:134:opt_mux$46 $procmux$39_CMP }
    New ctrl vector for $pmux cell $procmux$23: { $procmux$42_CMP $procmux$41_CMP $auto$opt_reduce.cc:134:opt_mux$48 }
    New ctrl vector for $pmux cell $procmux$18: { $procmux$22_CMP $auto$opt_reduce.cc:134:opt_mux$50 $procmux$19_CMP }
  Optimizing cells in module \FPAddSub_NormalizeShift1.
Performed a total of 4 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_NormalizeShift1'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_NormalizeShift1..
Removed 0 unused cells and 37 unused wires.
<suppressed ~2 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_NormalizeShift1.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \FPAddSub_NormalizeShift1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \FPAddSub_NormalizeShift1.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\FPAddSub_NormalizeShift1'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \FPAddSub_NormalizeShift1..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module FPAddSub_NormalizeShift1.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== FPAddSub_NormalizeShift1 ===

   Number of wires:                 19
   Number of wire bits:            152
   Number of public wires:           7
   Number of public wire bits:     140
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     $eq                            12
     $logic_not                      4
     $pmux                          34
     $reduce_or                      8

End of script. Logfile hash: f8eb91d7c7, CPU: user 0.03s system 0.00s, MEM: 11.28 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 37% 4x opt_expr (0 sec), 24% 2x opt_dff (0 sec), ...
