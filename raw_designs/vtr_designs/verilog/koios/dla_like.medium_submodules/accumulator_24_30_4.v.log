
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v' to AST representation.
Generating RTLIL representation for module `\accumulator_24_30_4'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: accumulator_24_30_4 
Automatically selected accumulator_24_30_4 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \accumulator_24_30_4

2.3. Analyzing design hierarchy..
Top module:  \accumulator_24_30_4
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1 in module accumulator_24_30_4.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
     1/6: $0\in_reg[29:0]
     2/6: $0\cir_shift_reg_3[29:0]
     3/6: $0\cir_shift_reg_2[29:0]
     4/6: $0\cir_shift_reg_1[29:0]
     5/6: $0\cir_shift_reg_0[29:0]
     6/6: $0\out_reg[29:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\accumulator_24_30_4.\cir_shift_reg_0' using process `\accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
  created $dff cell `$procdff$34' with positive edge clock.
Creating register for signal `\accumulator_24_30_4.\cir_shift_reg_1' using process `\accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
  created $dff cell `$procdff$35' with positive edge clock.
Creating register for signal `\accumulator_24_30_4.\cir_shift_reg_2' using process `\accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
  created $dff cell `$procdff$36' with positive edge clock.
Creating register for signal `\accumulator_24_30_4.\cir_shift_reg_3' using process `\accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
  created $dff cell `$procdff$37' with positive edge clock.
Creating register for signal `\accumulator_24_30_4.\out_reg' using process `\accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
  created $dff cell `$procdff$38' with positive edge clock.
Creating register for signal `\accumulator_24_30_4.\in_reg' using process `\accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
  created $dff cell `$procdff$39' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
Removing empty process `accumulator_24_30_4.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:18$1'.
Cleaned up 3 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module accumulator_24_30_4.
<suppressed ~4 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module accumulator_24_30_4.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\accumulator_24_30_4'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \accumulator_24_30_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$8: { 6'000000 \i_result } -> { 7'0000000 \i_result [22:0] }
      Replacing known input bits on port B of cell $procmux$8: { 6'111111 \i_result } -> { 7'1111111 \i_result [22:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \accumulator_24_30_4.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\accumulator_24_30_4'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$39 ($dff) from module accumulator_24_30_4 (D = $procmux$8_Y, Q = \in_reg, rval = 30'000000000000000000000000000000).
Adding SRST signal on $procdff$38 ($dff) from module accumulator_24_30_4 (D = $procmux$29_Y, Q = \out_reg, rval = 30'000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$41 ($sdff) from module accumulator_24_30_4 (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:36$6_Y, Q = \out_reg).
Adding SRST signal on $procdff$37 ($dff) from module accumulator_24_30_4 (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/accumulator_24_30_4.v:36$6_Y, Q = \cir_shift_reg_3, rval = 30'000000000000000000000000000000).
Adding SRST signal on $procdff$34 ($dff) from module accumulator_24_30_4 (D = \cir_shift_reg_1, Q = \cir_shift_reg_0, rval = 30'000000000000000000000000000000).
Adding SRST signal on $procdff$35 ($dff) from module accumulator_24_30_4 (D = \cir_shift_reg_2, Q = \cir_shift_reg_1, rval = 30'000000000000000000000000000000).
Adding SRST signal on $procdff$36 ($dff) from module accumulator_24_30_4 (D = \cir_shift_reg_3, Q = \cir_shift_reg_2, rval = 30'000000000000000000000000000000).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \accumulator_24_30_4..
Removed 9 unused cells and 27 unused wires.
<suppressed ~10 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module accumulator_24_30_4.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \accumulator_24_30_4..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \accumulator_24_30_4.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\accumulator_24_30_4'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \accumulator_24_30_4..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module accumulator_24_30_4.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== accumulator_24_30_4 ===

   Number of wires:                 14
   Number of wire bits:            298
   Number of public wires:          11
   Number of public wire bits:     237
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $add                           30
     $mux                           30
     $reduce_or                      2
     $sdff                         150
     $sdffe                         30

End of script. Logfile hash: 05fc25503b, CPU: user 0.03s system 0.00s, MEM: 11.60 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 3x opt_merge (0 sec), 24% 2x opt_clean (0 sec), ...
