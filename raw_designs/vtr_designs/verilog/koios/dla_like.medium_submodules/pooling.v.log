
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v' to AST representation.
Generating RTLIL representation for module `\pooling'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: pooling             
Automatically selected pooling as design top module.

2.2. Analyzing design hierarchy..
Top module:  \pooling

2.3. Analyzing design hierarchy..
Top module:  \pooling
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:52$6 in module pooling.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1 in module pooling.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 5 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:52$6'.
     1/3: $0\s_count[0:0]
     2/3: $0\result_1[15:0]
     3/3: $0\result_0[15:0]
Creating decoders for process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
     1/3: $0\count[1:0]
     2/3: $0\buffer_1_0[15:0]
     3/3: $0\buffer_0_0[15:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pooling.\s_count' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:52$6'.
  created $dff cell `$procdff$63' with positive edge clock.
Creating register for signal `\pooling.\result_0' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:52$6'.
  created $dff cell `$procdff$64' with positive edge clock.
Creating register for signal `\pooling.\result_1' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:52$6'.
  created $dff cell `$procdff$65' with positive edge clock.
Creating register for signal `\pooling.\buffer_0_0' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
  created $dff cell `$procdff$66' with positive edge clock.
Creating register for signal `\pooling.\buffer_0_1' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
  created $dff cell `$procdff$67' with positive edge clock.
Creating register for signal `\pooling.\buffer_1_0' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
  created $dff cell `$procdff$68' with positive edge clock.
Creating register for signal `\pooling.\buffer_1_1' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
  created $dff cell `$procdff$69' with positive edge clock.
Creating register for signal `\pooling.\count' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\pooling.\valid_1' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\pooling.\valid_2' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\pooling.\valid_3' using process `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
  created $dff cell `$procdff$73' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:52$6'.
Removing empty process `pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:52$6'.
Found and cleaned up 4 empty switches in `\pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
Removing empty process `pooling.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:25$1'.
Cleaned up 9 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pooling.
<suppressed ~1 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pooling.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pooling'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pooling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pooling.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pooling'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$63 ($dff) from module pooling (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:70$11_Y, Q = \s_count, rval = 1'0).
Adding EN signal on $procdff$64 ($dff) from module pooling (D = $procmux$38_Y, Q = \result_0).
Adding EN signal on $procdff$65 ($dff) from module pooling (D = $procmux$24_Y, Q = \result_1).
Adding EN signal on $procdff$66 ($dff) from module pooling (D = $procmux$58_Y, Q = \buffer_0_0).
Adding EN signal on $procdff$68 ($dff) from module pooling (D = $procmux$52_Y, Q = \buffer_1_0).
Adding SRST signal on $procdff$70 ($dff) from module pooling (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.medium_submodules/pooling.v:37$3_Y, Q = \count, rval = 2'00).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pooling..
Removed 16 unused cells and 45 unused wires.
<suppressed ~18 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pooling.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pooling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pooling.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pooling'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pooling..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pooling.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pooling..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pooling.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pooling'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pooling..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pooling.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== pooling ===

   Number of wires:                 35
   Number of wire bits:            275
   Number of public wires:          19
   Number of public wire bits:     184
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     $add                            1
     $dff                           35
     $dffe                          64
     $gt                            64
     $logic_or                       1
     $mux                           80
     $not                            2
     $reduce_and                     5
     $reduce_or                      3
     $sdff                           1

End of script. Logfile hash: 2365a59684, CPU: user 0.06s system 0.00s, MEM: 11.57 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 4x opt_merge (0 sec), 24% 3x opt_clean (0 sec), ...
