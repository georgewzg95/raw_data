
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v' to AST representation.
Generating RTLIL representation for module `\dot_product_16_8_30_2'.
Generating RTLIL representation for module `\dsp_block_16_8_false'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: dsp_block_16_8_false
root of   1 design levels: dot_product_16_8_30_2
Automatically selected dot_product_16_8_30_2 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \dot_product_16_8_30_2
Used module:     \dsp_block_16_8_false

2.3. Analyzing design hierarchy..
Top module:  \dot_product_16_8_30_2
Used module:     \dsp_block_16_8_false
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3 in module dsp_block_16_8_false.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1 in module dot_product_16_8_30_2.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 9 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dsp_block_16_8_false.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3'.
     1/5: $0\by_reg[7:0]
     2/5: $0\bx_reg[15:0]
     3/5: $0\ay_reg[7:0]
     4/5: $0\ax_reg[15:0]
     5/5: $0\resulta[23:0]
Creating decoders for process `\dot_product_16_8_30_2.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1'.
     1/4: $0\w_pipeline_1_0[7:0]
     2/4: $0\f_pipeline_1_0[15:0]
     3/4: $0\w_pipeline_0_0[7:0]
     4/4: $0\f_pipeline_0_0[15:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dsp_block_16_8_false.\resulta' using process `\dsp_block_16_8_false.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3'.
  created $dff cell `$procdff$35' with positive edge clock.
Creating register for signal `\dsp_block_16_8_false.\ax_reg' using process `\dsp_block_16_8_false.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3'.
  created $dff cell `$procdff$36' with positive edge clock.
Creating register for signal `\dsp_block_16_8_false.\ay_reg' using process `\dsp_block_16_8_false.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3'.
  created $dff cell `$procdff$37' with positive edge clock.
Creating register for signal `\dsp_block_16_8_false.\bx_reg' using process `\dsp_block_16_8_false.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3'.
  created $dff cell `$procdff$38' with positive edge clock.
Creating register for signal `\dsp_block_16_8_false.\by_reg' using process `\dsp_block_16_8_false.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3'.
  created $dff cell `$procdff$39' with positive edge clock.
Creating register for signal `\dot_product_16_8_30_2.\f_pipeline_0_0' using process `\dot_product_16_8_30_2.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1'.
  created $dff cell `$procdff$40' with positive edge clock.
Creating register for signal `\dot_product_16_8_30_2.\w_pipeline_0_0' using process `\dot_product_16_8_30_2.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1'.
  created $dff cell `$procdff$41' with positive edge clock.
Creating register for signal `\dot_product_16_8_30_2.\f_pipeline_1_0' using process `\dot_product_16_8_30_2.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1'.
  created $dff cell `$procdff$42' with positive edge clock.
Creating register for signal `\dot_product_16_8_30_2.\w_pipeline_1_0' using process `\dot_product_16_8_30_2.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1'.
  created $dff cell `$procdff$43' with positive edge clock.
Creating register for signal `\dot_product_16_8_30_2.\r_pipeline_0' using process `\dot_product_16_8_30_2.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1'.
  created $dff cell `$procdff$44' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\dsp_block_16_8_false.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3'.
Removing empty process `dsp_block_16_8_false.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:88$3'.
Found and cleaned up 1 empty switch in `\dot_product_16_8_30_2.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1'.
Removing empty process `dot_product_16_8_30_2.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:21$1'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module dsp_block_16_8_false.
Optimizing module dot_product_16_8_30_2.
<suppressed ~1 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dsp_block_16_8_false.
Optimizing module dot_product_16_8_30_2.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dsp_block_16_8_false'.
Finding identical cells in module `\dot_product_16_8_30_2'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dsp_block_16_8_false..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dot_product_16_8_30_2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dsp_block_16_8_false.
  Optimizing cells in module \dot_product_16_8_30_2.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dsp_block_16_8_false'.
Finding identical cells in module `\dot_product_16_8_30_2'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$35 ($dff) from module dsp_block_16_8_false (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/koios/dla_like.small_submodules/dot_product_16_8_30_2.v:101$7_Y [23:0], Q = \resulta, rval = 24'000000000000000000000000).
Adding SRST signal on $procdff$36 ($dff) from module dsp_block_16_8_false (D = \ax, Q = \ax_reg, rval = 16'0000000000000000).
Adding SRST signal on $procdff$37 ($dff) from module dsp_block_16_8_false (D = \ay, Q = \ay_reg, rval = 8'00000000).
Adding SRST signal on $procdff$38 ($dff) from module dsp_block_16_8_false (D = \bx, Q = \bx_reg, rval = 16'0000000000000000).
Adding SRST signal on $procdff$39 ($dff) from module dsp_block_16_8_false (D = \by, Q = \by_reg, rval = 8'00000000).
Adding SRST signal on $procdff$40 ($dff) from module dot_product_16_8_30_2 (D = \i_features_0, Q = \f_pipeline_0_0, rval = 16'0000000000000000).
Adding SRST signal on $procdff$41 ($dff) from module dot_product_16_8_30_2 (D = \i_weights_0, Q = \w_pipeline_0_0, rval = 8'00000000).
Adding SRST signal on $procdff$42 ($dff) from module dot_product_16_8_30_2 (D = \i_features_1, Q = \f_pipeline_1_0, rval = 16'0000000000000000).
Adding SRST signal on $procdff$43 ($dff) from module dot_product_16_8_30_2 (D = \i_weights_1, Q = \w_pipeline_1_0, rval = 8'00000000).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dsp_block_16_8_false..
Finding unused cells or wires in module \dot_product_16_8_30_2..
Removed 9 unused cells and 29 unused wires.
<suppressed ~11 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dot_product_16_8_30_2.
Optimizing module dsp_block_16_8_false.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dot_product_16_8_30_2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \dsp_block_16_8_false..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dot_product_16_8_30_2.
  Optimizing cells in module \dsp_block_16_8_false.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dot_product_16_8_30_2'.
Finding identical cells in module `\dsp_block_16_8_false'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dot_product_16_8_30_2..
Finding unused cells or wires in module \dsp_block_16_8_false..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dot_product_16_8_30_2.
Optimizing module dsp_block_16_8_false.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== dot_product_16_8_30_2 ===

   Number of wires:                 14
   Number of wire bits:            211
   Number of public wires:          14
   Number of public wire bits:     211
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $dff                            1
     $sdff                          48

=== dsp_block_16_8_false ===

   Number of wires:                 19
   Number of wire bits:            518
   Number of public wires:          15
   Number of public wire bits:     262
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $add                          128
     $mul                          128
     $sdff                          72

=== design hierarchy ===

   dot_product_16_8_30_2             1
     dsp_block_16_8_false            0

   Number of wires:                 14
   Number of wire bits:            211
   Number of public wires:          14
   Number of public wire bits:     211
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $dff                            1
     $sdff                          48

End of script. Logfile hash: 463916d6b3, CPU: user 0.06s system 0.00s, MEM: 11.62 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 23% 4x opt_expr (0 sec), 23% 2x opt_dff (0 sec), ...
