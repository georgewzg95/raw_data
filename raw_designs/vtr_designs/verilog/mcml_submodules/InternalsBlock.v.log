
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v' to AST representation.
Generating RTLIL representation for module `\InternalsBlock'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: InternalsBlock      
Automatically selected InternalsBlock as design top module.

2.2. Analyzing design hierarchy..
Top module:  \InternalsBlock

2.3. Analyzing design hierarchy..
Top module:  \InternalsBlock
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1 in module InternalsBlock.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
     1/24: $0\o_uyQuotient[31:0]
     2/24: $0\o_uxQuotient[31:0]
     3/24: $0\o_uyCost[31:0]
     4/24: $0\o_uyNumerator[31:0]
     5/24: $0\o_uxNumerator[31:0]
     6/24: $0\o_sqrtOneMinusUz2_inv[31:0]
     7/24: $0\o_uzCost[31:0]
     8/24: $0\o_uxCost[31:0]
     9/24: $0\o_sintCospSqrtOneMinusUz2[31:0]
    10/24: $0\o_sqrtOneMinusUz2[31:0]
    11/24: $0\o_uxSintSinp[31:0]
    12/24: $0\o_uxUzSintCosp[31:0]
    13/24: $0\o_uyUzSintCosp[31:0]
    14/24: $0\o_oneMinusUz2[63:0]
    15/24: $0\o_uySintSinp[31:0]
    16/24: $0\o_uyUz[31:0]
    17/24: $0\o_uxUz[31:0]
    18/24: $0\o_uz2[63:0]
    19/24: $0\o_sintSinp[31:0]
    20/24: $0\o_sintCosp[31:0]
    21/24: $0\o_cosp[31:0]
    22/24: $0\o_sinp[31:0]
    23/24: $0\o_cost[31:0]
    24/24: $0\o_sint[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\InternalsBlock.\o_sint' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$122' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_cost' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$123' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_sinp' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$124' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_cosp' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$125' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_sintCosp' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$126' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_sintSinp' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$127' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uz2' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$128' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uxUz' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$129' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uyUz' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$130' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uySintSinp' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$131' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_oneMinusUz2' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$132' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uyUzSintCosp' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$133' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uxUzSintCosp' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$134' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uxSintSinp' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$135' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_sqrtOneMinusUz2' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$136' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_sintCospSqrtOneMinusUz2' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$137' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uxCost' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$138' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uzCost' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$139' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_sqrtOneMinusUz2_inv' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$140' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uxNumerator' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$141' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uyNumerator' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$142' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uyCost' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$143' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uxQuotient' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$144' with positive edge clock.
Creating register for signal `\InternalsBlock.\o_uyQuotient' using process `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
  created $dff cell `$procdff$145' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
Removing empty process `InternalsBlock.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/InternalsBlock.v:225$1'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module InternalsBlock.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module InternalsBlock.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\InternalsBlock'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \InternalsBlock..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \InternalsBlock.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\InternalsBlock'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$122 ($dff) from module InternalsBlock (D = $procmux$117_Y, Q = \o_sint, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$146 ($sdff) from module InternalsBlock (D = \i_sint, Q = \o_sint).
Adding SRST signal on $procdff$123 ($dff) from module InternalsBlock (D = $procmux$112_Y, Q = \o_cost, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$148 ($sdff) from module InternalsBlock (D = \i_cost, Q = \o_cost).
Adding SRST signal on $procdff$124 ($dff) from module InternalsBlock (D = $procmux$107_Y, Q = \o_sinp, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$150 ($sdff) from module InternalsBlock (D = \i_sinp, Q = \o_sinp).
Adding SRST signal on $procdff$125 ($dff) from module InternalsBlock (D = $procmux$102_Y, Q = \o_cosp, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$152 ($sdff) from module InternalsBlock (D = \i_cosp, Q = \o_cosp).
Adding SRST signal on $procdff$126 ($dff) from module InternalsBlock (D = $procmux$97_Y, Q = \o_sintCosp, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$154 ($sdff) from module InternalsBlock (D = \i_sintCosp, Q = \o_sintCosp).
Adding SRST signal on $procdff$127 ($dff) from module InternalsBlock (D = $procmux$92_Y, Q = \o_sintSinp, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$156 ($sdff) from module InternalsBlock (D = \i_sintSinp, Q = \o_sintSinp).
Adding SRST signal on $procdff$128 ($dff) from module InternalsBlock (D = $procmux$87_Y, Q = \o_uz2, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$158 ($sdff) from module InternalsBlock (D = \i_uz2, Q = \o_uz2).
Adding SRST signal on $procdff$129 ($dff) from module InternalsBlock (D = $procmux$82_Y, Q = \o_uxUz, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$160 ($sdff) from module InternalsBlock (D = \i_uxUz, Q = \o_uxUz).
Adding SRST signal on $procdff$130 ($dff) from module InternalsBlock (D = $procmux$77_Y, Q = \o_uyUz, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$162 ($sdff) from module InternalsBlock (D = \i_uyUz, Q = \o_uyUz).
Adding SRST signal on $procdff$131 ($dff) from module InternalsBlock (D = $procmux$72_Y, Q = \o_uySintSinp, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$164 ($sdff) from module InternalsBlock (D = \i_uySintSinp, Q = \o_uySintSinp).
Adding SRST signal on $procdff$132 ($dff) from module InternalsBlock (D = $procmux$67_Y, Q = \o_oneMinusUz2, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$166 ($sdff) from module InternalsBlock (D = \i_oneMinusUz2, Q = \o_oneMinusUz2).
Adding SRST signal on $procdff$133 ($dff) from module InternalsBlock (D = $procmux$62_Y, Q = \o_uyUzSintCosp, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$168 ($sdff) from module InternalsBlock (D = \i_uyUzSintCosp, Q = \o_uyUzSintCosp).
Adding SRST signal on $procdff$134 ($dff) from module InternalsBlock (D = $procmux$57_Y, Q = \o_uxUzSintCosp, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$170 ($sdff) from module InternalsBlock (D = \i_uxUzSintCosp, Q = \o_uxUzSintCosp).
Adding SRST signal on $procdff$135 ($dff) from module InternalsBlock (D = $procmux$52_Y, Q = \o_uxSintSinp, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$172 ($sdff) from module InternalsBlock (D = \i_uxSintSinp, Q = \o_uxSintSinp).
Adding SRST signal on $procdff$136 ($dff) from module InternalsBlock (D = $procmux$47_Y, Q = \o_sqrtOneMinusUz2, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$174 ($sdff) from module InternalsBlock (D = \i_sqrtOneMinusUz2, Q = \o_sqrtOneMinusUz2).
Adding SRST signal on $procdff$137 ($dff) from module InternalsBlock (D = $procmux$42_Y, Q = \o_sintCospSqrtOneMinusUz2, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$176 ($sdff) from module InternalsBlock (D = \i_sintCospSqrtOneMinusUz2, Q = \o_sintCospSqrtOneMinusUz2).
Adding SRST signal on $procdff$138 ($dff) from module InternalsBlock (D = $procmux$37_Y, Q = \o_uxCost, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$178 ($sdff) from module InternalsBlock (D = \i_uxCost, Q = \o_uxCost).
Adding SRST signal on $procdff$139 ($dff) from module InternalsBlock (D = $procmux$32_Y, Q = \o_uzCost, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$180 ($sdff) from module InternalsBlock (D = \i_uzCost, Q = \o_uzCost).
Adding SRST signal on $procdff$140 ($dff) from module InternalsBlock (D = $procmux$27_Y, Q = \o_sqrtOneMinusUz2_inv, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$182 ($sdff) from module InternalsBlock (D = \i_sqrtOneMinusUz2_inv, Q = \o_sqrtOneMinusUz2_inv).
Adding SRST signal on $procdff$141 ($dff) from module InternalsBlock (D = $procmux$22_Y, Q = \o_uxNumerator, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$184 ($sdff) from module InternalsBlock (D = \i_uxNumerator, Q = \o_uxNumerator).
Adding SRST signal on $procdff$142 ($dff) from module InternalsBlock (D = $procmux$17_Y, Q = \o_uyNumerator, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$186 ($sdff) from module InternalsBlock (D = \i_uyNumerator, Q = \o_uyNumerator).
Adding SRST signal on $procdff$143 ($dff) from module InternalsBlock (D = $procmux$12_Y, Q = \o_uyCost, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$188 ($sdff) from module InternalsBlock (D = \i_uyCost, Q = \o_uyCost).
Adding SRST signal on $procdff$144 ($dff) from module InternalsBlock (D = $procmux$7_Y, Q = \o_uxQuotient, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$190 ($sdff) from module InternalsBlock (D = \i_uxQuotient, Q = \o_uxQuotient).
Adding SRST signal on $procdff$145 ($dff) from module InternalsBlock (D = $procmux$2_Y, Q = \o_uyQuotient, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$192 ($sdff) from module InternalsBlock (D = \i_uyQuotient, Q = \o_uyQuotient).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \InternalsBlock..
Removed 48 unused cells and 120 unused wires.
<suppressed ~49 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module InternalsBlock.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \InternalsBlock..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \InternalsBlock.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\InternalsBlock'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \InternalsBlock..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module InternalsBlock.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== InternalsBlock ===

   Number of wires:                 51
   Number of wire bits:           1667
   Number of public wires:          51
   Number of public wire bits:    1667
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 24
     $sdffe                        832

End of script. Logfile hash: cee4dc6a01, CPU: user 0.11s system 0.00s, MEM: 13.87 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 22% 4x opt_expr (0 sec), 18% 2x opt_dff (0 sec), ...
