
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v' to AST representation.
Generating RTLIL representation for module `\Move'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:190.1-241.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244.1-262.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265.1-288.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: Move                
Automatically selected Move as design top module.

2.2. Analyzing design hierarchy..
Top module:  \Move

2.3. Analyzing design hierarchy..
Top module:  \Move
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75 in module Move.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71 in module Move.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244$67 in module Move.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:190$66 in module Move.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 13 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
     1/13: $0\dead_mover[0:0]
     2/13: $0\weight_mover[31:0]
     3/13: $0\layer_mover[2:0]
     4/13: $0\sleftr_mover[31:0]
     5/13: $0\sleftz_mover[31:0]
     6/13: $0\sr_mover[31:0]
     7/13: $0\sz_mover[31:0]
     8/13: $0\uz_mover[31:0]
     9/13: $0\uy_mover[31:0]
    10/13: $0\ux_mover[31:0]
    11/13: $0\z_mover[31:0]
    12/13: $0\y_mover[31:0]
    13/13: $0\x_mover[31:0]
Creating decoders for process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
     1/4: $1\c_sleftz[31:0]
     2/4: $1\c_sleftr[31:0]
     3/4: $1\c_sz[31:0]
     4/4: $1\c_sr[31:0]
Creating decoders for process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244$67'.
     1/4: $1\c_z_op1[31:0]
     2/4: $1\c_z_op0[31:0]
     3/4: $1\c_r_op1[31:0]
     4/4: $1\c_r_op0[31:0]
Creating decoders for process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:190$66'.
     1/3: $1\OneOver_Mut[31:0]
     2/3: $1\OneOver_MutMaxdep[31:0]
     3/3: $1\OneOver_MutMaxrad[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\Move.\c_sr' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
No latch inferred for signal `\Move.\c_sz' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
No latch inferred for signal `\Move.\c_sr_big' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
No latch inferred for signal `\Move.\c_sz_big' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
No latch inferred for signal `\Move.\c_sleftr' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
No latch inferred for signal `\Move.\c_sleftz' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
No latch inferred for signal `\Move.\c_r_op0' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244$67'.
No latch inferred for signal `\Move.\c_r_op1' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244$67'.
No latch inferred for signal `\Move.\c_z_op0' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244$67'.
No latch inferred for signal `\Move.\c_z_op1' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244$67'.
No latch inferred for signal `\Move.\OneOver_MutMaxrad' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:190$66'.
No latch inferred for signal `\Move.\OneOver_MutMaxdep' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:190$66'.
No latch inferred for signal `\Move.\OneOver_Mut' from process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:190$66'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\Move.\x_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$188' with positive edge clock.
Creating register for signal `\Move.\y_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$189' with positive edge clock.
Creating register for signal `\Move.\z_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$190' with positive edge clock.
Creating register for signal `\Move.\ux_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$191' with positive edge clock.
Creating register for signal `\Move.\uy_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$192' with positive edge clock.
Creating register for signal `\Move.\uz_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$193' with positive edge clock.
Creating register for signal `\Move.\sz_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$194' with positive edge clock.
Creating register for signal `\Move.\sr_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$195' with positive edge clock.
Creating register for signal `\Move.\sleftz_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$196' with positive edge clock.
Creating register for signal `\Move.\sleftr_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$197' with positive edge clock.
Creating register for signal `\Move.\layer_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$198' with positive edge clock.
Creating register for signal `\Move.\weight_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$199' with positive edge clock.
Creating register for signal `\Move.\dead_mover' using process `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
  created $dff cell `$procdff$200' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
Removing empty process `Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:291$75'.
Found and cleaned up 1 empty switch in `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
Removing empty process `Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:265$71'.
Found and cleaned up 1 empty switch in `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244$67'.
Removing empty process `Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:244$67'.
Found and cleaned up 1 empty switch in `\Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:190$66'.
Removing empty process `Move.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/Move.v:190$66'.
Cleaned up 5 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module Move.
<suppressed ~7 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module Move.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Move'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Move..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Move.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Move'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$200 ($dff) from module Move (D = $procmux$76_Y, Q = \dead_mover, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$201 ($sdff) from module Move (D = \dead_moverMux, Q = \dead_mover).
Adding SRST signal on $procdff$199 ($dff) from module Move (D = $procmux$81_Y, Q = \weight_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$203 ($sdff) from module Move (D = \weight_moverMux, Q = \weight_mover).
Adding SRST signal on $procdff$188 ($dff) from module Move (D = $procmux$136_Y, Q = \x_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$205 ($sdff) from module Move (D = \x_moverMux, Q = \x_mover).
Adding SRST signal on $procdff$189 ($dff) from module Move (D = $procmux$131_Y, Q = \y_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$207 ($sdff) from module Move (D = \y_moverMux, Q = \y_mover).
Adding SRST signal on $procdff$190 ($dff) from module Move (D = $procmux$126_Y, Q = \z_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$209 ($sdff) from module Move (D = \z_moverMux, Q = \z_mover).
Adding SRST signal on $procdff$191 ($dff) from module Move (D = $procmux$121_Y, Q = \ux_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$211 ($sdff) from module Move (D = \ux_moverMux, Q = \ux_mover).
Adding SRST signal on $procdff$192 ($dff) from module Move (D = $procmux$116_Y, Q = \uy_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$213 ($sdff) from module Move (D = \uy_moverMux, Q = \uy_mover).
Adding SRST signal on $procdff$193 ($dff) from module Move (D = $procmux$111_Y, Q = \uz_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$215 ($sdff) from module Move (D = \uz_moverMux, Q = \uz_mover).
Adding SRST signal on $procdff$194 ($dff) from module Move (D = $procmux$106_Y, Q = \sz_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$217 ($sdff) from module Move (D = $procmux$147_Y, Q = \sz_mover).
Adding SRST signal on $procdff$195 ($dff) from module Move (D = $procmux$101_Y, Q = \sr_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$219 ($sdff) from module Move (D = $procmux$150_Y, Q = \sr_mover).
Adding SRST signal on $procdff$196 ($dff) from module Move (D = $procmux$96_Y, Q = \sleftz_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$221 ($sdff) from module Move (D = 0, Q = \sleftz_mover).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 10 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 13 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 14 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 15 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 16 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 18 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 19 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 20 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 21 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 22 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 23 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 24 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 25 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 26 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 27 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 28 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 29 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 30 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Setting constant 0-bit at position 31 on $auto$ff.cc:262:slice$222 ($sdffe) from module Move.
Adding SRST signal on $procdff$197 ($dff) from module Move (D = $procmux$91_Y, Q = \sleftr_mover, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$223 ($sdff) from module Move (D = $procmux$144_Y, Q = \sleftr_mover).
Adding SRST signal on $procdff$198 ($dff) from module Move (D = $procmux$86_Y, Q = \layer_mover, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$225 ($sdff) from module Move (D = \layer_moverMux, Q = \layer_mover).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Move..
Removed 89 unused cells and 187 unused wires.
<suppressed ~90 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module Move.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \Move..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \Move.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\Move'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \Move..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module Move.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== Move ===

   Number of wires:                 71
   Number of wire bits:           1844
   Number of public wires:          63
   Number of public wire bits:    1805
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 32
     $eq                            15
     $logic_not                     35
     $mul                          128
     $mux                          224
     $pmux                          96
     $sdffe                        324
     $sub                           32

End of script. Logfile hash: 4d6468a93a, CPU: user 0.12s system 0.01s, MEM: 14.06 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 2x read_verilog (0 sec), 21% 4x opt_expr (0 sec), ...
