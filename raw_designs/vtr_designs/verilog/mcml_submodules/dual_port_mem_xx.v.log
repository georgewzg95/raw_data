
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v' to AST representation.
Generating RTLIL representation for module `\dual_port_mem_xx'.
Generating RTLIL representation for module `\dual_port_ram'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: dual_port_ram       
root of   1 design levels: dual_port_mem_xx    
Automatically selected dual_port_mem_xx as design top module.

2.2. Analyzing design hierarchy..
Top module:  \dual_port_mem_xx
Used module:     \dual_port_ram
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 13

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 13
Generating RTLIL representation for module `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram'.

2.4. Analyzing design hierarchy..
Top module:  \dual_port_mem_xx
Used module:     $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram

2.5. Analyzing design hierarchy..
Top module:  \dual_port_mem_xx
Used module:     $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram
Removing unused module `\dual_port_ram'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:126$29 in module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:117$21 in module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:126$29'.
     1/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:128$20_EN[31:0]$35
     2/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:128$20_DATA[31:0]$34
     3/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:128$20_ADDR[12:0]$33
     4/4: $0\out2[31:0]
Creating decoders for process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:117$21'.
     1/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:119$19_EN[31:0]$27
     2/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:119$19_DATA[31:0]$26
     3/4: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:119$19_ADDR[12:0]$25
     4/4: $0\out1[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.\out2' using process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:126$29'.
  created $dff cell `$procdff$61' with positive edge clock.
Creating register for signal `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:128$20_ADDR' using process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:126$29'.
  created $dff cell `$procdff$62' with positive edge clock.
Creating register for signal `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:128$20_DATA' using process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:126$29'.
  created $dff cell `$procdff$63' with positive edge clock.
Creating register for signal `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:128$20_EN' using process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:126$29'.
  created $dff cell `$procdff$64' with positive edge clock.
Creating register for signal `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.\out1' using process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:117$21'.
  created $dff cell `$procdff$65' with positive edge clock.
Creating register for signal `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:119$19_ADDR' using process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:117$21'.
  created $dff cell `$procdff$66' with positive edge clock.
Creating register for signal `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:119$19_DATA' using process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:117$21'.
  created $dff cell `$procdff$67' with positive edge clock.
Creating register for signal `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:119$19_EN' using process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:117$21'.
  created $dff cell `$procdff$68' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:126$29'.
Removing empty process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:126$29'.
Found and cleaned up 1 empty switch in `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:117$21'.
Removing empty process `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:117$21'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
Optimizing module dual_port_mem_xx.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
Optimizing module dual_port_mem_xx.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram'.
Finding identical cells in module `\dual_port_mem_xx'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dual_port_mem_xx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
    Consolidated identical input bits for $mux cell $procmux$50:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$50_Y
      New ports: A=1'0, B=1'1, Y=$procmux$50_Y [0]
      New connections: $procmux$50_Y [31:1] = { $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] $procmux$50_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$38:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$38_Y
      New ports: A=1'0, B=1'1, Y=$procmux$38_Y [0]
      New connections: $procmux$38_Y [31:1] = { $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] $procmux$38_Y [0] }
  Optimizing cells in module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
  Optimizing cells in module \dual_port_mem_xx.
Performed a total of 2 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram'.
Finding identical cells in module `\dual_port_mem_xx'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$61 ($dff) from module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram (D = $memrd$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:131$36_DATA, Q = \out2).
Adding EN signal on $procdff$65 ($dff) from module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram (D = $memrd$\ram$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/dual_port_mem_xx.v:122$28_DATA, Q = \out1).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram..
Finding unused cells or wires in module \dual_port_mem_xx..
Removed 8 unused cells and 30 unused wires.
<suppressed ~9 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
Optimizing module dual_port_mem_xx.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dual_port_mem_xx..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
  Optimizing cells in module \dual_port_mem_xx.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram'.
Finding identical cells in module `\dual_port_mem_xx'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram..
Finding unused cells or wires in module \dual_port_mem_xx..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram.
Optimizing module dual_port_mem_xx.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram ===

   Number of wires:                 17
   Number of wire bits:            375
   Number of public wires:           9
   Number of public wire bits:     157
   Number of memories:               1
   Number of memory bits:          416
   Number of processes:              0
   Number of cells:                 12
     $dffe                          64
     $mux                           92

=== dual_port_mem_xx ===

   Number of wires:                  9
   Number of wire bits:            157
   Number of public wires:           9
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1

=== design hierarchy ===

   dual_port_mem_xx                  1
     $paramod$60024a837e75472e1cd5919794d9ec384e722ccc\dual_port_ram      0

   Number of wires:                  9
   Number of wire bits:            157
   Number of public wires:           9
   Number of public wire bits:     157
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1

End of script. Logfile hash: 50d40af9c5, CPU: user 0.06s system 0.00s, MEM: 11.23 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 4x opt_expr (0 sec), 19% 3x opt_merge (0 sec), ...
