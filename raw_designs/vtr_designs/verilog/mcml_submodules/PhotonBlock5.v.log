
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v' to AST representation.
Generating RTLIL representation for module `\PhotonBlock5'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: PhotonBlock5        
Automatically selected PhotonBlock5 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \PhotonBlock5

2.3. Analyzing design hierarchy..
Top module:  \PhotonBlock5
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1 in module PhotonBlock5.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
     1/14: $0\o_hit[0:0]
     2/14: $0\o_dead[0:0]
     3/14: $0\o_layer[2:0]
     4/14: $0\o_weight[31:0]
     5/14: $0\o_sleftr[31:0]
     6/14: $0\o_sleftz[31:0]
     7/14: $0\o_sr[31:0]
     8/14: $0\o_sz[31:0]
     9/14: $0\o_uz[31:0]
    10/14: $0\o_uy[31:0]
    11/14: $0\o_ux[31:0]
    12/14: $0\o_z[31:0]
    13/14: $0\o_y[31:0]
    14/14: $0\o_x[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\PhotonBlock5.\o_x' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_y' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_z' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$74' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_ux' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_uy' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$76' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_uz' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$77' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_sz' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$78' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_sr' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$79' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_sleftz' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$80' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_sleftr' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$81' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_weight' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$82' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_layer' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$83' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_dead' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$84' with positive edge clock.
Creating register for signal `\PhotonBlock5.\o_hit' using process `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
  created $dff cell `$procdff$85' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
Removing empty process `PhotonBlock5.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/mcml_submodules/PhotonBlock5.v:166$1'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module PhotonBlock5.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module PhotonBlock5.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PhotonBlock5'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \PhotonBlock5..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \PhotonBlock5.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PhotonBlock5'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$72 ($dff) from module PhotonBlock5 (D = $procmux$67_Y, Q = \o_x, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$86 ($sdff) from module PhotonBlock5 (D = \i_x, Q = \o_x).
Adding SRST signal on $procdff$73 ($dff) from module PhotonBlock5 (D = $procmux$62_Y, Q = \o_y, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$88 ($sdff) from module PhotonBlock5 (D = \i_y, Q = \o_y).
Adding SRST signal on $procdff$74 ($dff) from module PhotonBlock5 (D = $procmux$57_Y, Q = \o_z, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$90 ($sdff) from module PhotonBlock5 (D = \i_z, Q = \o_z).
Adding SRST signal on $procdff$75 ($dff) from module PhotonBlock5 (D = $procmux$52_Y, Q = \o_ux, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$92 ($sdff) from module PhotonBlock5 (D = \i_ux, Q = \o_ux).
Adding SRST signal on $procdff$76 ($dff) from module PhotonBlock5 (D = $procmux$47_Y, Q = \o_uy, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$94 ($sdff) from module PhotonBlock5 (D = \i_uy, Q = \o_uy).
Adding SRST signal on $procdff$77 ($dff) from module PhotonBlock5 (D = $procmux$42_Y, Q = \o_uz, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$96 ($sdff) from module PhotonBlock5 (D = \i_uz, Q = \o_uz).
Adding SRST signal on $procdff$78 ($dff) from module PhotonBlock5 (D = $procmux$37_Y, Q = \o_sz, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$98 ($sdff) from module PhotonBlock5 (D = \i_sz, Q = \o_sz).
Adding SRST signal on $procdff$79 ($dff) from module PhotonBlock5 (D = $procmux$32_Y, Q = \o_sr, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$100 ($sdff) from module PhotonBlock5 (D = \i_sr, Q = \o_sr).
Adding SRST signal on $procdff$80 ($dff) from module PhotonBlock5 (D = $procmux$27_Y, Q = \o_sleftz, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$102 ($sdff) from module PhotonBlock5 (D = \i_sleftz, Q = \o_sleftz).
Adding SRST signal on $procdff$81 ($dff) from module PhotonBlock5 (D = $procmux$22_Y, Q = \o_sleftr, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$104 ($sdff) from module PhotonBlock5 (D = \i_sleftr, Q = \o_sleftr).
Adding SRST signal on $procdff$82 ($dff) from module PhotonBlock5 (D = $procmux$17_Y, Q = \o_weight, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$106 ($sdff) from module PhotonBlock5 (D = \i_weight, Q = \o_weight).
Adding SRST signal on $procdff$83 ($dff) from module PhotonBlock5 (D = $procmux$12_Y, Q = \o_layer, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$108 ($sdff) from module PhotonBlock5 (D = \i_layer, Q = \o_layer).
Adding SRST signal on $procdff$84 ($dff) from module PhotonBlock5 (D = $procmux$7_Y, Q = \o_dead, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$110 ($sdff) from module PhotonBlock5 (D = \i_dead, Q = \o_dead).
Adding SRST signal on $procdff$85 ($dff) from module PhotonBlock5 (D = $procmux$2_Y, Q = \o_hit, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$112 ($sdff) from module PhotonBlock5 (D = \i_hit, Q = \o_hit).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PhotonBlock5..
Removed 28 unused cells and 70 unused wires.
<suppressed ~29 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module PhotonBlock5.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \PhotonBlock5..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \PhotonBlock5.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\PhotonBlock5'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \PhotonBlock5..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module PhotonBlock5.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== PhotonBlock5 ===

   Number of wires:                 31
   Number of wire bits:            717
   Number of public wires:          31
   Number of public wire bits:     717
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $sdffe                        357

End of script. Logfile hash: 8dbde126c8, CPU: user 0.07s system 0.00s, MEM: 12.43 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 18% 4x opt_expr (0 sec), 18% 2x opt_clean (0 sec), ...
