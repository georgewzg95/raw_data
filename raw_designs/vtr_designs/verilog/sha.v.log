
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v' to AST representation.
Generating RTLIL representation for module `\sha1'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: sha1                
Automatically selected sha1 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \sha1

2.3. Analyzing design hierarchy..
Top module:  \sha1
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2134$38 in module sha1.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2110$34 in module sha1.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28 in module sha1.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:106$1 in module sha1.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2134$38'.
     1/2: $0\read_counter[2:0]
     2/2: $0\text_o[31:0]
Creating decoders for process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2110$34'.
     1/1: $0\Kt[31:0]
Creating decoders for process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
     1/28: $0\round[6:0]
     2/28: $0\busy[0:0]
     3/28: $0\Wt[31:0]
     4/28: $0\W14[31:0]
     5/28: $0\W13[31:0]
     6/28: $0\W12[31:0]
     7/28: $0\W11[31:0]
     8/28: $0\W10[31:0]
     9/28: $0\W9[31:0]
    10/28: $0\W8[31:0]
    11/28: $0\W7[31:0]
    12/28: $0\W6[31:0]
    13/28: $0\W5[31:0]
    14/28: $0\W4[31:0]
    15/28: $0\W3[31:0]
    16/28: $0\W2[31:0]
    17/28: $0\W1[31:0]
    18/28: $0\W0[31:0]
    19/28: $0\H4[31:0]
    20/28: $0\H3[31:0]
    21/28: $0\H2[31:0]
    22/28: $0\H1[31:0]
    23/28: $0\H0[31:0]
    24/28: $0\E[31:0]
    25/28: $0\D[31:0]
    26/28: $0\C[31:0]
    27/28: $0\B[31:0]
    28/28: $0\A[31:0]
Creating decoders for process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:106$1'.
     1/3: $0\cmd[3:0] [2]
     2/3: $0\cmd[3:0] [1:0]
     3/3: $0\cmd[3:0] [3]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sha1.\text_o' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2134$38'.
  created $dff cell `$procdff$2356' with positive edge clock.
Creating register for signal `\sha1.\read_counter' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2134$38'.
  created $dff cell `$procdff$2357' with positive edge clock.
Creating register for signal `\sha1.\Kt' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2110$34'.
  created $dff cell `$procdff$2358' with positive edge clock.
Creating register for signal `\sha1.\A' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2359' with positive edge clock.
Creating register for signal `\sha1.\B' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2360' with positive edge clock.
Creating register for signal `\sha1.\C' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2361' with positive edge clock.
Creating register for signal `\sha1.\D' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2362' with positive edge clock.
Creating register for signal `\sha1.\E' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2363' with positive edge clock.
Creating register for signal `\sha1.\round' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2364' with positive edge clock.
Creating register for signal `\sha1.\H0' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2365' with positive edge clock.
Creating register for signal `\sha1.\H1' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2366' with positive edge clock.
Creating register for signal `\sha1.\H2' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2367' with positive edge clock.
Creating register for signal `\sha1.\H3' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2368' with positive edge clock.
Creating register for signal `\sha1.\H4' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2369' with positive edge clock.
Creating register for signal `\sha1.\W0' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2370' with positive edge clock.
Creating register for signal `\sha1.\W1' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2371' with positive edge clock.
Creating register for signal `\sha1.\W2' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2372' with positive edge clock.
Creating register for signal `\sha1.\W3' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2373' with positive edge clock.
Creating register for signal `\sha1.\W4' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2374' with positive edge clock.
Creating register for signal `\sha1.\W5' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2375' with positive edge clock.
Creating register for signal `\sha1.\W6' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2376' with positive edge clock.
Creating register for signal `\sha1.\W7' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2377' with positive edge clock.
Creating register for signal `\sha1.\W8' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2378' with positive edge clock.
Creating register for signal `\sha1.\W9' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2379' with positive edge clock.
Creating register for signal `\sha1.\W10' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2380' with positive edge clock.
Creating register for signal `\sha1.\W11' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2381' with positive edge clock.
Creating register for signal `\sha1.\W12' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2382' with positive edge clock.
Creating register for signal `\sha1.\W13' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2383' with positive edge clock.
Creating register for signal `\sha1.\W14' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2384' with positive edge clock.
Creating register for signal `\sha1.\Wt' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2385' with positive edge clock.
Creating register for signal `\sha1.\busy' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
  created $dff cell `$procdff$2386' with positive edge clock.
Creating register for signal `\sha1.\cmd' using process `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:106$1'.
  created $dff cell `$procdff$2387' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2134$38'.
Removing empty process `sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2134$38'.
Found and cleaned up 4 empty switches in `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2110$34'.
Removing empty process `sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2110$34'.
Found and cleaned up 4 empty switches in `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
Removing empty process `sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:148$28'.
Found and cleaned up 3 empty switches in `\sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:106$1'.
Removing empty process `sha1.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:106$1'.
Cleaned up 16 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~33 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~4665 debug messages>
Removed a total of 1555 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
    New ctrl vector for $pmux cell $procmux$492: { $procmux$2314_CMP $auto$opt_reduce.cc:134:opt_mux$2389 }
    New ctrl vector for $pmux cell $procmux$1060: { $procmux$2322_CMP $auto$opt_reduce.cc:134:opt_mux$2391 }
    New ctrl vector for $pmux cell $procmux$261: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2395 $auto$opt_reduce.cc:134:opt_mux$2393 }
    New ctrl vector for $pmux cell $procmux$2153: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2397 $procmux$2246_CMP }
    New ctrl vector for $pmux cell $procmux$847: { $procmux$2319_CMP $auto$opt_reduce.cc:134:opt_mux$2399 }
    New ctrl vector for $pmux cell $procmux$1202: { $procmux$2324_CMP $auto$opt_reduce.cc:134:opt_mux$2401 }
    New ctrl vector for $pmux cell $procmux$634: { $procmux$2316_CMP $auto$opt_reduce.cc:134:opt_mux$2403 }
    New ctrl vector for $pmux cell $procmux$421: { $procmux$2313_CMP $auto$opt_reduce.cc:134:opt_mux$2405 }
    New ctrl vector for $pmux cell $procmux$1969: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2407 $procmux$2246_CMP }
    New ctrl vector for $pmux cell $procmux$989: { $procmux$2321_CMP $auto$opt_reduce.cc:134:opt_mux$2409 }
    New ctrl vector for $pmux cell $procmux$2245: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2411 $procmux$2246_CMP }
    New ctrl vector for $pmux cell $procmux$1344: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2413 }
    New ctrl vector for $pmux cell $procmux$172: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2415 }
    New ctrl vector for $pmux cell $procmux$776: { $procmux$2318_CMP $auto$opt_reduce.cc:134:opt_mux$2417 }
    New ctrl vector for $pmux cell $procmux$563: { $procmux$2315_CMP $auto$opt_reduce.cc:134:opt_mux$2419 }
    New ctrl vector for $pmux cell $procmux$1131: { $procmux$2323_CMP $auto$opt_reduce.cc:134:opt_mux$2421 }
    New ctrl vector for $pmux cell $procmux$350: { $procmux$2312_CMP $auto$opt_reduce.cc:134:opt_mux$2423 }
    New ctrl vector for $pmux cell $procmux$2061: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2425 $procmux$2246_CMP }
    New ctrl vector for $pmux cell $procmux$918: { $procmux$2320_CMP $auto$opt_reduce.cc:134:opt_mux$2427 }
    New ctrl vector for $pmux cell $procmux$1273: { $procmux$2325_CMP $auto$opt_reduce.cc:134:opt_mux$2429 }
    New ctrl vector for $pmux cell $procmux$1877: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2431 $procmux$2246_CMP }
    New ctrl vector for $pmux cell $procmux$705: { $procmux$2317_CMP $auto$opt_reduce.cc:134:opt_mux$2433 }
    New ctrl vector for $pmux cell $procmux$83: { $procmux$2332_CMP $auto$opt_reduce.cc:134:opt_mux$2435 }
  Optimizing cells in module \sha1.
Performed a total of 23 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$2356 ($dff) from module sha1 (D = $procmux$64_Y, Q = \text_o, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2436 ($sdff) from module sha1 (D = $procmux$61_Y, Q = \text_o).
Adding SRST signal on $procdff$2357 ($dff) from module sha1 (D = $procmux$48_Y [2], Q = \read_counter [2], rval = 1'0).
Adding SRST signal on $procdff$2357 ($dff) from module sha1 (D = $procmux$45_Y [1:0], Q = \read_counter [1:0], rval = 2'00).
Adding EN signal on $auto$ff.cc:262:slice$2439 ($sdff) from module sha1 (D = $sub$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/sha.v:2160$41_Y [1:0], Q = \read_counter [1:0]).
Adding EN signal on $auto$ff.cc:262:slice$2438 ($sdff) from module sha1 (D = $procmux$48_Y [2], Q = \read_counter [2]).
Adding SRST signal on $procdff$2358 ($dff) from module sha1 (D = { $procmux$76_Y [30] $procmux$76_Y [28:27] $procmux$76_Y [25] $procmux$76_Y [23] $procmux$76_Y [17] $procmux$76_Y [14:11] $procmux$76_Y [8:7] $procmux$76_Y [4:3] $procmux$76_Y [0] }, Q = { \Kt [30] \Kt [28:27] \Kt [25] \Kt [23] \Kt [17] \Kt [14:11] \Kt [8:7] \Kt [4:3] \Kt [0] }, rval = 15'000000000000000).
Adding SRST signal on $procdff$2358 ($dff) from module sha1 (D = { $procmux$73_Y [29] $procmux$73_Y [26] $procmux$73_Y [22] $procmux$73_Y [20:19] $procmux$73_Y [16:15] $procmux$73_Y [9] $procmux$73_Y [5] }, Q = { \Kt [29] \Kt [26] \Kt [22] \Kt [20:19] \Kt [16:15] \Kt [9] \Kt [5] }, rval = 9'000000000).
Adding SRST signal on $procdff$2358 ($dff) from module sha1 (D = { $procmux$70_Y [31] $procmux$70_Y [24] $procmux$70_Y [21] $procmux$70_Y [18] $procmux$70_Y [10] $procmux$70_Y [6] $procmux$70_Y [2:1] }, Q = { \Kt [31] \Kt [24] \Kt [21] \Kt [18] \Kt [10] \Kt [6] \Kt [2:1] }, rval = 8'00000000).
Adding SRST signal on $procdff$2359 ($dff) from module sha1 (D = $procmux$2245_Y, Q = \A, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2461 ($sdff) from module sha1 (D = $procmux$2245_Y, Q = \A).
Adding SRST signal on $procdff$2360 ($dff) from module sha1 (D = $procmux$2153_Y, Q = \B, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2471 ($sdff) from module sha1 (D = $procmux$2153_Y, Q = \B).
Adding SRST signal on $procdff$2361 ($dff) from module sha1 (D = $procmux$2061_Y, Q = \C, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2481 ($sdff) from module sha1 (D = $procmux$2061_Y, Q = \C).
Adding SRST signal on $procdff$2362 ($dff) from module sha1 (D = $procmux$1969_Y, Q = \D, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2491 ($sdff) from module sha1 (D = $procmux$1969_Y, Q = \D).
Adding SRST signal on $procdff$2363 ($dff) from module sha1 (D = $procmux$1877_Y, Q = \E, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2501 ($sdff) from module sha1 (D = $procmux$1877_Y, Q = \E).
Adding SRST signal on $procdff$2364 ($dff) from module sha1 (D = $procmux$83_Y, Q = \round, rval = 7'0000000).
Adding SRST signal on $procdff$2365 ($dff) from module sha1 (D = $procmux$1871_Y, Q = \H0, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2512 ($sdff) from module sha1 (D = $procmux$1866_Y, Q = \H0).
Adding SRST signal on $procdff$2366 ($dff) from module sha1 (D = $procmux$1779_Y, Q = \H1, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2516 ($sdff) from module sha1 (D = $procmux$1774_Y, Q = \H1).
Adding SRST signal on $procdff$2367 ($dff) from module sha1 (D = $procmux$1687_Y, Q = \H2, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2520 ($sdff) from module sha1 (D = $procmux$1682_Y, Q = \H2).
Adding SRST signal on $procdff$2368 ($dff) from module sha1 (D = $procmux$1595_Y, Q = \H3, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2524 ($sdff) from module sha1 (D = $procmux$1590_Y, Q = \H3).
Adding SRST signal on $procdff$2369 ($dff) from module sha1 (D = $procmux$1503_Y, Q = \H4, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2528 ($sdff) from module sha1 (D = $procmux$1498_Y, Q = \H4).
Adding SRST signal on $procdff$2370 ($dff) from module sha1 (D = $procmux$1344_Y, Q = \W0, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2532 ($sdff) from module sha1 (D = $procmux$1344_Y, Q = \W0).
Adding SRST signal on $procdff$2371 ($dff) from module sha1 (D = $procmux$1273_Y, Q = \W1, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2540 ($sdff) from module sha1 (D = $procmux$1273_Y, Q = \W1).
Adding SRST signal on $procdff$2372 ($dff) from module sha1 (D = $procmux$1202_Y, Q = \W2, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2544 ($sdff) from module sha1 (D = $procmux$1202_Y, Q = \W2).
Adding SRST signal on $procdff$2373 ($dff) from module sha1 (D = $procmux$1131_Y, Q = \W3, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2548 ($sdff) from module sha1 (D = $procmux$1131_Y, Q = \W3).
Adding SRST signal on $procdff$2374 ($dff) from module sha1 (D = $procmux$1060_Y, Q = \W4, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2552 ($sdff) from module sha1 (D = $procmux$1060_Y, Q = \W4).
Adding SRST signal on $procdff$2375 ($dff) from module sha1 (D = $procmux$989_Y, Q = \W5, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2556 ($sdff) from module sha1 (D = $procmux$989_Y, Q = \W5).
Adding SRST signal on $procdff$2376 ($dff) from module sha1 (D = $procmux$918_Y, Q = \W6, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2560 ($sdff) from module sha1 (D = $procmux$918_Y, Q = \W6).
Adding SRST signal on $procdff$2377 ($dff) from module sha1 (D = $procmux$847_Y, Q = \W7, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2564 ($sdff) from module sha1 (D = $procmux$847_Y, Q = \W7).
Adding SRST signal on $procdff$2378 ($dff) from module sha1 (D = $procmux$776_Y, Q = \W8, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2568 ($sdff) from module sha1 (D = $procmux$776_Y, Q = \W8).
Adding SRST signal on $procdff$2379 ($dff) from module sha1 (D = $procmux$705_Y, Q = \W9, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2572 ($sdff) from module sha1 (D = $procmux$705_Y, Q = \W9).
Adding SRST signal on $procdff$2380 ($dff) from module sha1 (D = $procmux$634_Y, Q = \W10, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2576 ($sdff) from module sha1 (D = $procmux$634_Y, Q = \W10).
Adding SRST signal on $procdff$2381 ($dff) from module sha1 (D = $procmux$563_Y, Q = \W11, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2580 ($sdff) from module sha1 (D = $procmux$563_Y, Q = \W11).
Adding SRST signal on $procdff$2382 ($dff) from module sha1 (D = $procmux$492_Y, Q = \W12, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2584 ($sdff) from module sha1 (D = $procmux$492_Y, Q = \W12).
Adding SRST signal on $procdff$2383 ($dff) from module sha1 (D = $procmux$421_Y, Q = \W13, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2588 ($sdff) from module sha1 (D = $procmux$421_Y, Q = \W13).
Adding SRST signal on $procdff$2384 ($dff) from module sha1 (D = $procmux$350_Y, Q = \W14, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2592 ($sdff) from module sha1 (D = $procmux$350_Y, Q = \W14).
Adding SRST signal on $procdff$2385 ($dff) from module sha1 (D = $procmux$261_Y, Q = \Wt, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2596 ($sdff) from module sha1 (D = $procmux$261_Y, Q = \Wt).
Adding SRST signal on $procdff$2386 ($dff) from module sha1 (D = $procmux$172_Y, Q = \busy, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$2604 ($sdff) from module sha1 (D = $procmux$172_Y, Q = \busy).
Adding SRST signal on $procdff$2387 ($dff) from module sha1 (D = { $procmux$2351_Y $procmux$2337_Y $procmux$2345_Y }, Q = \cmd, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$2612 ($sdff) from module sha1 (D = \busy, Q = \cmd [3]).
Adding EN signal on $auto$ff.cc:262:slice$2612 ($sdff) from module sha1 (D = \cmd_i [2], Q = \cmd [2]).
Adding EN signal on $auto$ff.cc:262:slice$2612 ($sdff) from module sha1 (D = $procmux$2345_Y, Q = \cmd [1:0]).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 48 unused cells and 1727 unused wires.
<suppressed ~49 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.
<suppressed ~23 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~35 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sha1..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~36 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sha1.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sha1'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sha1..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module sha1.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== sha1 ===

   Number of wires:                251
   Number of wire bits:           3527
   Number of public wires:          48
   Number of public wire bits:    1376
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                246
     $add                          320
     $and                          128
     $eq                           572
     $logic_not                     10
     $lt                            42
     $mux                          597
     $ne                             9
     $not                           35
     $pmux                         872
     $reduce_and                    15
     $reduce_bool                   39
     $reduce_or                    168
     $sdff                          39
     $sdffe                        872
     $sub                            7
     $xor                          256

End of script. Logfile hash: cfacefd0c3, CPU: user 0.72s system 0.02s, MEM: 24.77 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 25% 5x opt_expr (0 sec), 20% 2x read_verilog (0 sec), ...
