
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v' to AST representation.
Generating RTLIL representation for module `\raysend'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63.5-218.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: raysend             
Automatically selected raysend as design top module.

2.2. Analyzing design hierarchy..
Top module:  \raysend

2.3. Analyzing design hierarchy..
Top module:  \raysend
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 14 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3 in module raysend.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1 in module raysend.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 7 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3'.
     1/23: $7\temp_rgAddrValid[0:0]
     2/23: $7\next_state[3:0]
     3/23: $6\temp_rgAddrValid[0:0]
     4/23: $6\next_state[3:0]
     5/23: $5\temp_rgAddrValid[0:0]
     6/23: $5\next_state[3:0]
     7/23: $4\temp_rgAddrValid[0:0]
     8/23: $4\next_state[3:0]
     9/23: $3\temp_rgAddrValid[0:0]
    10/23: $3\next_state[3:0]
    11/23: $2\temp_ack[0:0]
    12/23: $2\temp_rgAddr[3:0]
    13/23: $2\temp_rgAddrValid[0:0]
    14/23: $2\temp_rgWE[2:0]
    15/23: $2\temp_rgData[31:0]
    16/23: $2\next_state[3:0]
    17/23: $1\temp_ack[0:0]
    18/23: $1\temp_rgAddr[3:0]
    19/23: $1\temp_rgAddrValid[0:0]
    20/23: $1\temp_rgWE[2:0]
    21/23: $1\temp_rgData[31:0]
    22/23: $1\statepeek[2:0]
    23/23: $1\next_state[3:0]
Creating decoders for process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
     1/6: $0\rgAddr[3:0]
     2/6: $0\rgAddrValid[0:0]
     3/6: $0\rgData[31:0]
     4/6: $0\rgWE[2:0]
     5/6: $0\ack[0:0]
     6/6: $0\state[3:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\raysend.\statepeek' from process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3': $auto$proc_dlatch.cc:427:proc_dlatch$361
Latch inferred for signal `\raysend.\next_state' from process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3': $auto$proc_dlatch.cc:427:proc_dlatch$426
Latch inferred for signal `\raysend.\temp_rgData' from process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3': $auto$proc_dlatch.cc:427:proc_dlatch$479
Latch inferred for signal `\raysend.\temp_rgWE' from process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3': $auto$proc_dlatch.cc:427:proc_dlatch$524
Latch inferred for signal `\raysend.\temp_rgAddrValid' from process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3': $auto$proc_dlatch.cc:427:proc_dlatch$689
Latch inferred for signal `\raysend.\temp_ack' from process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3': $auto$proc_dlatch.cc:427:proc_dlatch$724
Latch inferred for signal `\raysend.\temp_rgAddr' from process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3': $auto$proc_dlatch.cc:427:proc_dlatch$745

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\raysend.\ack' using process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
  created $dff cell `$procdff$746' with positive edge clock.
Creating register for signal `\raysend.\rgData' using process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
  created $dff cell `$procdff$747' with positive edge clock.
Creating register for signal `\raysend.\rgAddr' using process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
  created $dff cell `$procdff$748' with positive edge clock.
Creating register for signal `\raysend.\rgWE' using process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
  created $dff cell `$procdff$749' with positive edge clock.
Creating register for signal `\raysend.\rgAddrValid' using process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
  created $dff cell `$procdff$750' with positive edge clock.
Creating register for signal `\raysend.\state' using process `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
  created $dff cell `$procdff$751' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 14 empty switches in `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3'.
Removing empty process `raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:63$3'.
Found and cleaned up 1 empty switch in `\raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
Removing empty process `raysend.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/raysend.v:39$1'.
Cleaned up 15 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module raysend.
<suppressed ~163 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module raysend.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\raysend'.
<suppressed ~312 debug messages>
Removed a total of 104 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \raysend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \raysend.
    New ctrl vector for $pmux cell $procmux$284: { $procmux$301_CMP $procmux$300_CMP $procmux$299_CMP $procmux$298_CMP $procmux$297_CMP }
    New ctrl vector for $pmux cell $procmux$273: { $procmux$296_CMP $procmux$295_CMP $procmux$294_CMP $procmux$293_CMP }
    New ctrl vector for $pmux cell $procmux$266: { $procmux$296_CMP $procmux$295_CMP $procmux$294_CMP $procmux$293_CMP }
    New ctrl vector for $pmux cell $procmux$254: $auto$opt_reduce.cc:134:opt_mux$753
    New ctrl vector for $pmux cell $procmux$292: { $procmux$301_CMP $procmux$300_CMP $procmux$299_CMP $procmux$298_CMP $procmux$297_CMP $procmux$296_CMP $procmux$295_CMP $procmux$294_CMP $procmux$293_CMP }
    New ctrl vector for $pmux cell $procmux$238: $procmux$297_CMP
  Optimizing cells in module \raysend.
Performed a total of 6 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\raysend'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$751 ($dff) from module raysend (D = \next_state, Q = \state, rval = 4'0000).
Adding SRST signal on $procdff$750 ($dff) from module raysend (D = \temp_rgAddrValid, Q = \rgAddrValid, rval = 1'0).
Adding SRST signal on $procdff$749 ($dff) from module raysend (D = \temp_rgWE, Q = \rgWE, rval = 3'000).
Adding SRST signal on $procdff$748 ($dff) from module raysend (D = \temp_rgAddr, Q = \rgAddr, rval = 4'0000).
Adding SRST signal on $procdff$747 ($dff) from module raysend (D = \temp_rgData, Q = \rgData, rval = 0).
Adding SRST signal on $procdff$746 ($dff) from module raysend (D = \temp_ack, Q = \ack, rval = 1'0).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \raysend..
Removed 12 unused cells and 314 unused wires.
<suppressed ~13 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module raysend.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \raysend..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \raysend.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\raysend'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \raysend..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module raysend.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== raysend ===

   Number of wires:                 96
   Number of wire bits:            363
   Number of public wires:          22
   Number of public wire bits:     233
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 87
     $and                           32
     $dlatch                        48
     $eq                            36
     $logic_not                      4
     $mux                           26
     $not                           15
     $pmux                          42
     $reduce_or                     18
     $sdff                          45

End of script. Logfile hash: b09ef046df, CPU: user 0.12s system 0.00s, MEM: 12.68 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 4x opt_expr (0 sec), 20% 3x opt_merge (0 sec), ...
