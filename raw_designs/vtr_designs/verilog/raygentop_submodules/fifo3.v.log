
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v' to AST representation.
Generating RTLIL representation for module `\fifo3'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: fifo3               
Automatically selected fifo3 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \fifo3

2.3. Analyzing design hierarchy..
Top module:  \fifo3
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v:21$1 in module fifo3.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fifo3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v:21$1'.
     1/4: $0\pos[1:0]
     2/4: $0\data2[17:0]
     3/4: $0\data1[17:0]
     4/4: $0\data0[17:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fifo3.\data0' using process `\fifo3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v:21$1'.
  created $dff cell `$procdff$78' with positive edge clock.
Creating register for signal `\fifo3.\data1' using process `\fifo3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v:21$1'.
  created $dff cell `$procdff$79' with positive edge clock.
Creating register for signal `\fifo3.\data2' using process `\fifo3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v:21$1'.
  created $dff cell `$procdff$80' with positive edge clock.
Creating register for signal `\fifo3.\pos' using process `\fifo3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v:21$1'.
  created $dff cell `$procdff$81' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\fifo3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v:21$1'.
Removing empty process `fifo3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/fifo3.v:21$1'.
Cleaned up 6 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo3.
<suppressed ~9 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo3.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo3'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo3.
    New ctrl vector for $pmux cell $procmux$48: { $auto$opt_reduce.cc:134:opt_mux$83 $procmux$70_CMP $procmux$69_CMP }
    New ctrl vector for $pmux cell $procmux$68: { $procmux$72_CMP $procmux$71_CMP $auto$opt_reduce.cc:134:opt_mux$85 }
    New ctrl vector for $pmux cell $procmux$29: { $auto$opt_reduce.cc:134:opt_mux$87 $procmux$69_CMP }
  Optimizing cells in module \fifo3.
Performed a total of 3 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo3'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$81 ($dff) from module fifo3 (D = $procmux$16_Y, Q = \pos, rval = 2'00).
Adding EN signal on $auto$ff.cc:262:slice$88 ($sdff) from module fifo3 (D = $procmux$13_Y, Q = \pos).
Adding SRST signal on $procdff$80 ($dff) from module fifo3 (D = $procmux$34_Y, Q = \data2, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$96 ($sdff) from module fifo3 (D = $procmux$34_Y, Q = \data2).
Adding SRST signal on $procdff$79 ($dff) from module fifo3 (D = $procmux$53_Y, Q = \data1, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$106 ($sdff) from module fifo3 (D = $procmux$53_Y, Q = \data1).
Adding SRST signal on $procdff$78 ($dff) from module fifo3 (D = $procmux$73_Y, Q = \data0, rval = 18'000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$114 ($sdff) from module fifo3 (D = $procmux$73_Y, Q = \data0).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo3..
Removed 5 unused cells and 41 unused wires.
<suppressed ~6 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo3.
<suppressed ~4 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo3.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo3'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo3..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo3.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo3.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo3'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo3..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo3.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== fifo3 ===

   Number of wires:                 48
   Number of wire bits:            453
   Number of public wires:          10
   Number of public wire bits:      96
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 42
     $add                           32
     $and                            1
     $eq                             6
     $logic_not                      2
     $mux                          220
     $ne                            14
     $not                            1
     $pmux                          54
     $reduce_and                     9
     $reduce_bool                    5
     $reduce_or                      7
     $sdffe                         56
     $sub                           32

End of script. Logfile hash: c95e55fb2b, CPU: user 0.08s system 0.00s, MEM: 11.98 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 31% 5x opt_expr (0 sec), 15% 3x opt_dff (0 sec), ...
