
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v' to AST representation.
Generating RTLIL representation for module `\rgsramcontroller'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123.5-437.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: rgsramcontroller    
Automatically selected rgsramcontroller as design top module.

2.2. Analyzing design hierarchy..
Top module:  \rgsramcontroller

2.3. Analyzing design hierarchy..
Top module:  \rgsramcontroller
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 20 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3 in module rgsramcontroller.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1 in module rgsramcontroller.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 10 redundant assignments.
Promoted 17 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3'.
     1/37: $3\temp_faddress[14:0]
     2/37: $2\temp_fcount[6:0]
     3/37: $2\temp_faddress[14:0]
     4/37: $15\next_state[3:0]
     5/37: $4\temp_waddress[17:0]
     6/37: $14\next_state[3:0]
     7/37: $13\next_state[3:0]
     8/37: $3\temp_waddress[17:0]
     9/37: $12\next_state[3:0]
    10/37: $11\next_state[3:0]
    11/37: $2\temp_waddress[17:0]
    12/37: $10\next_state[3:0]
    13/37: $9\next_state[3:0]
    14/37: $8\next_state[3:0]
    15/37: $7\next_state[3:0]
    16/37: $6\next_state[3:0]
    17/37: $5\next_state[3:0]
    18/37: $4\next_state[3:0]
    19/37: $3\next_state[3:0]
    20/37: $2\next_state[3:0]
    21/37: $1\temp_waddress[17:0]
    22/37: $1\temp_texelready[0:0]
    23/37: $1\temp_shadedataready[0:0]
    24/37: $1\temp_fbdatavalidl[0:0]
    25/37: $1\next_state[3:0]
    26/37: $1\writebackack[0:0]
    27/37: $1\dirReady[0:0]
    28/37: $1\read_ready[0:0]
    29/37: $1\want_data[0:0]
    30/37: $1\want_addr[0:0]
    31/37: $1\tm3_sram_addr[18:0]
    32/37: $1\tm3_sram_data_xhdl0[63:0]
    33/37: $1\tm3_sram_adsp[0:0]
    34/37: $1\tm3_sram_oe[1:0]
    35/37: $1\tm3_sram_we[7:0]
    36/37: $1\temp_fcount[6:0]
    37/37: $1\temp_faddress[14:0]
Creating decoders for process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
     1/10: $0\fbdata[63:0]
     2/10: $0\sramdatal[47:0]
     3/10: $0\texelready[0:0]
     4/10: $0\shadedataready[0:0]
     5/10: $0\fbdatavalidl[0:0]
     6/10: $0\fbdatavalid[0:0]
     7/10: $0\fcount[6:0]
     8/10: $0\faddress[14:0]
     9/10: $0\waddress[17:0]
    10/10: $0\state[3:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\rgsramcontroller.\want_addr' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$714
Latch inferred for signal `\rgsramcontroller.\want_data' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$785
Latch inferred for signal `\rgsramcontroller.\read_ready' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$856
Latch inferred for signal `\rgsramcontroller.\dirReady' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$927
Latch inferred for signal `\rgsramcontroller.\writebackack' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$998
Latch inferred for signal `\rgsramcontroller.\tm3_sram_data_xhdl0' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1069
Latch inferred for signal `\rgsramcontroller.\tm3_sram_addr' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1140
Latch inferred for signal `\rgsramcontroller.\tm3_sram_we' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1211
Latch inferred for signal `\rgsramcontroller.\tm3_sram_oe' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1282
Latch inferred for signal `\rgsramcontroller.\tm3_sram_adsp' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1353
Latch inferred for signal `\rgsramcontroller.\next_state' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1424
Latch inferred for signal `\rgsramcontroller.\temp_waddress' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1507
Latch inferred for signal `\rgsramcontroller.\temp_faddress' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1560
Latch inferred for signal `\rgsramcontroller.\temp_fcount' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1587
Latch inferred for signal `\rgsramcontroller.\temp_fbdatavalidl' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1640
Latch inferred for signal `\rgsramcontroller.\temp_texelready' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1693
Latch inferred for signal `\rgsramcontroller.\temp_shadedataready' from process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3': $auto$proc_dlatch.cc:427:proc_dlatch$1746

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\rgsramcontroller.\sramdatal' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1747' with positive edge clock.
Creating register for signal `\rgsramcontroller.\fbdata' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1748' with positive edge clock.
Creating register for signal `\rgsramcontroller.\fbdatavalid' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1749' with positive edge clock.
Creating register for signal `\rgsramcontroller.\shadedataready' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1750' with positive edge clock.
Creating register for signal `\rgsramcontroller.\texelready' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1751' with positive edge clock.
Creating register for signal `\rgsramcontroller.\state' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1752' with positive edge clock.
Creating register for signal `\rgsramcontroller.\waddress' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1753' with positive edge clock.
Creating register for signal `\rgsramcontroller.\faddress' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1754' with positive edge clock.
Creating register for signal `\rgsramcontroller.\fcount' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1755' with positive edge clock.
Creating register for signal `\rgsramcontroller.\fbdatavalidl' using process `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
  created $dff cell `$procdff$1756' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 20 empty switches in `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3'.
Removing empty process `rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:123$3'.
Found and cleaned up 1 empty switch in `\rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
Removing empty process `rgsramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/rgsramcontroller.v:89$1'.
Cleaned up 21 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgsramcontroller.
<suppressed ~350 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgsramcontroller.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgsramcontroller'.
<suppressed ~1326 debug messages>
Removed a total of 442 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgsramcontroller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgsramcontroller.
    New ctrl vector for $pmux cell $procmux$430: $procmux$591_CMP
    New ctrl vector for $pmux cell $procmux$424: $auto$opt_reduce.cc:134:opt_mux$1758
    New ctrl vector for $pmux cell $procmux$440: $procmux$592_CMP
    New ctrl vector for $pmux cell $procmux$590: $auto$opt_reduce.cc:134:opt_mux$1760
    New ctrl vector for $pmux cell $procmux$551: { $procmux$598_CMP $procmux$595_CMP }
    New ctrl vector for $pmux cell $procmux$525: $procmux$600_CMP
    New ctrl vector for $pmux cell $procmux$577: $auto$opt_reduce.cc:134:opt_mux$1762
    New ctrl vector for $pmux cell $procmux$611: $procmux$612_CMP
    New ctrl vector for $pmux cell $procmux$512: $auto$opt_reduce.cc:134:opt_mux$1764
    New ctrl vector for $pmux cell $procmux$473: $procmux$595_CMP
    New ctrl vector for $pmux cell $procmux$450: $procmux$613_CMP
    New ctrl vector for $pmux cell $procmux$486: $procmux$596_CMP
    New ctrl vector for $pmux cell $procmux$460: { $procmux$600_CMP $procmux$599_CMP $procmux$598_CMP $procmux$597_CMP $procmux$596_CMP $procmux$613_CMP $procmux$612_CMP $auto$opt_reduce.cc:134:opt_mux$1766 }
    New ctrl vector for $pmux cell $procmux$564: { }
    New ctrl vector for $pmux cell $procmux$538: { $procmux$595_CMP $procmux$613_CMP $procmux$592_CMP $procmux$591_CMP }
    New ctrl vector for $pmux cell $procmux$499: $procmux$599_CMP
    New ctrl vector for $pmux cell $procmux$605: $procmux$612_CMP
  Optimizing cells in module \rgsramcontroller.
Performed a total of 17 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgsramcontroller'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$1756 ($dff) from module rgsramcontroller (D = \temp_fbdatavalidl, Q = \fbdatavalidl, rval = 1'0).
Adding SRST signal on $procdff$1755 ($dff) from module rgsramcontroller (D = \temp_fcount, Q = \fcount, rval = 7'1101011).
Adding SRST signal on $procdff$1754 ($dff) from module rgsramcontroller (D = \temp_faddress, Q = \faddress, rval = 15'000000000000000).
Adding SRST signal on $procdff$1753 ($dff) from module rgsramcontroller (D = \temp_waddress, Q = \waddress, rval = 18'000000000000000000).
Adding SRST signal on $procdff$1752 ($dff) from module rgsramcontroller (D = \next_state, Q = \state, rval = 4'0000).
Adding SRST signal on $procdff$1751 ($dff) from module rgsramcontroller (D = \temp_texelready, Q = \texelready, rval = 1'0).
Adding SRST signal on $procdff$1750 ($dff) from module rgsramcontroller (D = \temp_shadedataready, Q = \shadedataready, rval = 1'0).
Adding SRST signal on $procdff$1749 ($dff) from module rgsramcontroller (D = \fbdatavalidl, Q = \fbdatavalid, rval = 1'0).
Adding SRST signal on $procdff$1748 ($dff) from module rgsramcontroller (D = \tm3_sram_data_in, Q = \fbdata, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$1747 ($dff) from module rgsramcontroller (D = \tm3_sram_data_in [47:0], Q = \sramdatal, rval = 48'000000000000000000000000000000000000000000000000).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgsramcontroller..
Removed 18 unused cells and 885 unused wires.
<suppressed ~19 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgsramcontroller.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgsramcontroller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgsramcontroller.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgsramcontroller'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$proc_dlatch.cc:427:proc_dlatch$1353 ($dlatch) from module rgsramcontroller.

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgsramcontroller..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgsramcontroller.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \rgsramcontroller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \rgsramcontroller.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\rgsramcontroller'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \rgsramcontroller..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module rgsramcontroller.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== rgsramcontroller ===

   Number of wires:                154
   Number of wire bits:           1255
   Number of public wires:          50
   Number of public wire bits:     850
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                127
     $add                           64
     $and                           28
     $dlatch                       145
     $eq                            62
     $logic_not                      4
     $mux                          114
     $not                           14
     $or                             5
     $pmux                          87
     $reduce_bool                    7
     $reduce_or                     19
     $sdff                         160
     $sub                           32

End of script. Logfile hash: fb1102ec5e, CPU: user 0.23s system 0.00s, MEM: 15.94 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 29% 5x opt_expr (0 sec), 15% 4x opt_merge (0 sec), ...
