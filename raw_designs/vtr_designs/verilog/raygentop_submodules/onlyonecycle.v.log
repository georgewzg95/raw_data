
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v' to AST representation.
Generating RTLIL representation for module `\onlyonecycle'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:31.5-76.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: onlyonecycle        
Automatically selected onlyonecycle as design top module.

2.2. Analyzing design hierarchy..
Top module:  \onlyonecycle

2.3. Analyzing design hierarchy..
Top module:  \onlyonecycle
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:31$3 in module onlyonecycle.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:16$1 in module onlyonecycle.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 3 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:31$3'.
     1/6: $4\next_state[1:0]
     2/6: $3\next_state[1:0]
     3/6: $2\next_state[1:0]
     4/6: $1\temp_count[0:0]
     5/6: $1\next_state[1:0]
     6/6: $1\output_xhdl0[0:0]
Creating decoders for process `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:16$1'.
     1/2: $0\count[0:0]
     2/2: $0\state[1:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\onlyonecycle.\output_xhdl0' from process `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:31$3': $auto$proc_dlatch.cc:427:proc_dlatch$72
Latch inferred for signal `\onlyonecycle.\next_state' from process `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:31$3': $auto$proc_dlatch.cc:427:proc_dlatch$95
Latch inferred for signal `\onlyonecycle.\temp_count' from process `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:31$3': $auto$proc_dlatch.cc:427:proc_dlatch$112

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\onlyonecycle.\state' using process `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:16$1'.
  created $dff cell `$procdff$113' with positive edge clock.
Creating register for signal `\onlyonecycle.\count' using process `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:16$1'.
  created $dff cell `$procdff$114' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:31$3'.
Removing empty process `onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:31$3'.
Found and cleaned up 1 empty switch in `\onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:16$1'.
Removing empty process `onlyonecycle.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/raygentop_submodules/onlyonecycle.v:16$1'.
Cleaned up 5 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module onlyonecycle.
<suppressed ~30 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module onlyonecycle.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\onlyonecycle'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \onlyonecycle..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \onlyonecycle.
    New ctrl vector for $pmux cell $procmux$40: $procmux$42_CMP
    New ctrl vector for $pmux cell $procmux$35: { $procmux$42_CMP $procmux$41_CMP }
    New ctrl vector for $pmux cell $procmux$31: $procmux$42_CMP
  Optimizing cells in module \onlyonecycle.
Performed a total of 3 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\onlyonecycle'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$114 ($dff) from module onlyonecycle (D = \temp_count, Q = \count, rval = 1'0).
Adding SRST signal on $procdff$113 ($dff) from module onlyonecycle (D = \next_state, Q = \state, rval = 2'00).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \onlyonecycle..
Removed 6 unused cells and 57 unused wires.
<suppressed ~7 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module onlyonecycle.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \onlyonecycle..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \onlyonecycle.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\onlyonecycle'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \onlyonecycle..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module onlyonecycle.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== onlyonecycle ===

   Number of wires:                 24
   Number of wire bits:             61
   Number of public wires:           8
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 21
     $and                            3
     $dlatch                         4
     $eq                             4
     $logic_not                      2
     $mux                            8
     $not                            3
     $pmux                           2
     $sdff                           3
     $sub                           32

End of script. Logfile hash: 49a3c705ec, CPU: user 0.04s system 0.00s, MEM: 11.66 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 39% 4x opt_expr (0 sec), 19% 3x opt_merge (0 sec), ...
