
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\single_port_ram'.
Generating RTLIL representation for module `\dual_port_ram'.
Generating RTLIL representation for module `\LU8PEEng'.
Generating RTLIL representation for module `\MarshallerController'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:590.1-602.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\LU'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:1026.1-1070.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\LUControl'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:1559.1-1749.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:1751.1-1766.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:1769.1-1792.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\ram'.
Generating RTLIL representation for module `\ram1'.
Generating RTLIL representation for module `\ram2'.
Generating RTLIL representation for module `\ram3'.
Generating RTLIL representation for module `\top_ram'.
Generating RTLIL representation for module `\mult_add'.
Generating RTLIL representation for module `\DataTransferUnit'.
Generating RTLIL representation for module `\rfifo'.
Generating RTLIL representation for module `\wfifo'.
Generating RTLIL representation for module `\addr_fifo'.
Generating RTLIL representation for module `\memcmd_fifo'.
Generating RTLIL representation for module `\fpu_add'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:3290.2-3472.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:3475.2-3515.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:3520.2-3622.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\fpu_div'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:3658.2-3664.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:3671.2-3673.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:3676.2-3774.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\div_24b'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:3823.2-4015.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\fpmul'.
/home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:4198: Warning: Identifier `\sign' is implicitly declared.
/home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:4241: Warning: Identifier `\stilltiny_or_tiny_and_denormround' is implicitly declared.
Generating RTLIL representation for module `\preprocess'.
Generating RTLIL representation for module `\special'.
Generating RTLIL representation for module `\prenorm'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:4468.2-4566.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:4571.2-4669.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\multiply_a'.
Generating RTLIL representation for module `\exponent'.
Generating RTLIL representation for module `\normalize'.
Generating RTLIL representation for module `\shift'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/LU8PEEng.v:4784.3-4914.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\round'.
Generating RTLIL representation for module `\flag'.
Generating RTLIL representation for module `\assemble'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: assemble            
root of   0 design levels: flag                
root of   0 design levels: round               
root of   0 design levels: shift               
root of   0 design levels: normalize           
root of   0 design levels: exponent            
root of   0 design levels: multiply_a          
root of   0 design levels: prenorm             
root of   0 design levels: special             
root of   0 design levels: preprocess          
root of   1 design levels: fpmul               
root of   0 design levels: div_24b             
root of   1 design levels: fpu_div             
root of   0 design levels: fpu_add             
root of   1 design levels: memcmd_fifo         
root of   1 design levels: addr_fifo           
root of   1 design levels: wfifo               
root of   1 design levels: rfifo               
root of   2 design levels: DataTransferUnit    
root of   2 design levels: mult_add            
root of   1 design levels: top_ram             
root of   1 design levels: ram3                
root of   1 design levels: ram2                
root of   1 design levels: ram1                
root of   1 design levels: ram                 
root of   0 design levels: LUControl           
root of   3 design levels: LU                  
root of   0 design levels: MarshallerController
root of   4 design levels: LU8PEEng            
root of   0 design levels: dual_port_ram       
root of   0 design levels: single_port_ram     
Automatically selected LU8PEEng as design top module.

2.2. Analyzing design hierarchy..
Top module:  \LU8PEEng
Used module:     \DataTransferUnit
Used module:         \rfifo
Used module:             \dual_port_ram
Used module:         \addr_fifo
Used module:         \wfifo
Used module:         \memcmd_fifo
Used module:     \LU
Used module:         \mult_add
Used module:             \fpu_add
Used module:             \fpmul
Used module:                 \assemble
Used module:                 \flag
Used module:                 \round
Used module:                 \shift
Used module:                 \normalize
Used module:                 \exponent
Used module:                 \multiply_a
Used module:                 \prenorm
Used module:                 \special
Used module:                 \preprocess
Used module:         \top_ram
Used module:         \ram3
Used module:         \ram2
Used module:         \ram1
Used module:         \ram
Used module:         \fpu_div
Used module:             \div_24b
Used module:         \LUControl
Used module:     \MarshallerController
Parameter \DATA_WIDTH = 10'0100000000
Parameter \ADDR_WIDTH = 5

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 10'0100000000
Parameter \ADDR_WIDTH = 5
Generating RTLIL representation for module `$paramod$1562f140864cc7fdf547927d88f1d7d4344d72f7\dual_port_ram'.
Parameter \DATA_WIDTH = 10'0100000000
Parameter \ADDR_WIDTH = 5
Found cached RTLIL representation for module `$paramod$1562f140864cc7fdf547927d88f1d7d4344d72f7\dual_port_ram'.
Parameter \DATA_WIDTH = 10'0100000000
Parameter \ADDR_WIDTH = 5
Found cached RTLIL representation for module `$paramod$1562f140864cc7fdf547927d88f1d7d4344d72f7\dual_port_ram'.
Parameter \DATA_WIDTH = 10'0100000000
Parameter \ADDR_WIDTH = 5
Found cached RTLIL representation for module `$paramod$1562f140864cc7fdf547927d88f1d7d4344d72f7\dual_port_ram'.
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 8

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 8
Generating RTLIL representation for module `$paramod$ce0c38940747abe9a6fc0e1739aaf602f7b0afe8\dual_port_ram'.
Parameter \DATA_WIDTH = 6'011100
Parameter \ADDR_WIDTH = 4

2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 6'011100
Parameter \ADDR_WIDTH = 4
Generating RTLIL representation for module `$paramod$4fd442b091a108698966967405a6589cbf6b5b5d\dual_port_ram'.
Parameter \DATA_WIDTH = 10'0100000000
Parameter \ADDR_WIDTH = 4'0100

2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 10'0100000000
Parameter \ADDR_WIDTH = 4'0100
Generating RTLIL representation for module `$paramod\dual_port_ram\DATA_WIDTH=10'0100000000\ADDR_WIDTH=4'0100'.
Parameter \DATA_WIDTH = 4'0101
Parameter \ADDR_WIDTH = 4'0100

2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 4'0101
Parameter \ADDR_WIDTH = 4'0100
Generating RTLIL representation for module `$paramod\dual_port_ram\DATA_WIDTH=4'0101\ADDR_WIDTH=4'0100'.
Parameter \DATA_WIDTH = 8'01000000
Parameter \ADDR_WIDTH = 4

2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 8'01000000
Parameter \ADDR_WIDTH = 4
Generating RTLIL representation for module `$paramod$ef0515f863cb1da1c6fa3654d4ff4adbb9145d5b\dual_port_ram'.

2.9. Analyzing design hierarchy..
Top module:  \LU8PEEng
Used module:     \DataTransferUnit
Used module:         \rfifo
Used module:             $paramod$ef0515f863cb1da1c6fa3654d4ff4adbb9145d5b\dual_port_ram
Used module:         \addr_fifo
Used module:             $paramod\dual_port_ram\DATA_WIDTH=4'0101\ADDR_WIDTH=4'0100
Used module:         \wfifo
Used module:             $paramod\dual_port_ram\DATA_WIDTH=10'0100000000\ADDR_WIDTH=4'0100
Used module:         \memcmd_fifo
Used module:             $paramod$4fd442b091a108698966967405a6589cbf6b5b5d\dual_port_ram
Used module:     \LU
Used module:         \mult_add
Used module:             \fpu_add
Used module:             \fpmul
Used module:                 \assemble
Used module:                 \flag
Used module:                 \round
Used module:                 \shift
Used module:                 \normalize
Used module:                 \exponent
Used module:                 \multiply_a
Used module:                 \prenorm
Used module:                 \special
Used module:                 \preprocess
Used module:         \top_ram
Used module:             $paramod$ce0c38940747abe9a6fc0e1739aaf602f7b0afe8\dual_port_ram
Used module:         \ram3
Used module:             $paramod$1562f140864cc7fdf547927d88f1d7d4344d72f7\dual_port_ram
Used module:         \ram2
Used module:         \ram1
Used module:         \ram
Used module:         \fpu_div
Used module:             \div_24b
Used module:         \LUControl
Used module:     \MarshallerController

2.10. Analyzing design hierarchy..
Top module:  \LU8PEEng
Used module:     \DataTransferUnit
Used module:         \rfifo
Used module:             $paramod$ef0515f863cb1da1c6fa3654d4ff4adbb9145d5b\dual_port_ram
Used module:         \addr_fifo
Used module:             $paramod\dual_port_ram\DATA_WIDTH=4'0101\ADDR_WIDTH=4'0100
Used module:         \wfifo
Used module:             $paramod\dual_port_ram\DATA_WIDTH=10'0100000000\ADDR_WIDTH=4'0100
Used module:         \memcmd_fifo
Used module:             $paramod$4fd442b091a108698966967405a6589cbf6b5b5d\dual_port_ram
Used module:     \LU
Used module:         \mult_add
Used module:             \fpu_add
Used module:             \fpmul
Used module:                 \assemble
Used module:                 \flag
Used module:                 \round
Used module:                 \shift
Used module:                 \normalize
Used module:                 \exponent
Used module:                 \multiply_a
Used module:                 \prenorm
Used module:                 \special
Used module:                 \preprocess
Used module:         \top_ram
Used module:             $paramod$ce0c38940747abe9a6fc0e1739aaf602f7b0afe8\dual_port_ram
Used module:         \ram3
Used module:             $paramod$1562f140864cc7fdf547927d88f1d7d4344d72f7\dual_port_ram
Used module:         \ram2
Used module:         \ram1
Used module:         \ram
Used module:         \fpu_div
Used module:             \div_24b
Used module:         \LUControl
Used module:     \MarshallerController
Removing unused module `\dual_port_ram'.
Removing unused module `\single_port_ram'.
Removed 2 unused modules.
Mapping positional arguments of cell fpmul.assembler (assemble).
Mapping positional arguments of cell fpmul.flager (flag).
Mapping positional arguments of cell fpmul.rounder (round).
Mapping positional arguments of cell fpmul.shifter (shift).
Mapping positional arguments of cell fpmul.normalizer (normalize).
Mapping positional arguments of cell fpmul.exponenter (exponent).
Mapping positional arguments of cell fpmul.multiplier (multiply_a).
Mapping positional arguments of cell fpmul.prenormer (prenorm).
Mapping positional arguments of cell fpmul.specialer (special).
Mapping positional arguments of cell fpmul.preprocesser (preprocess).
Mapping positional arguments of cell LU.PE7 (mult_add).
Mapping positional arguments of cell LU.PE6 (mult_add).
Mapping positional arguments of cell LU.PE5 (mult_add).
Mapping positional arguments of cell LU.PE4 (mult_add).
Mapping positional arguments of cell LU.PE3 (mult_add).
Mapping positional arguments of cell LU.PE2 (mult_add).
Mapping positional arguments of cell LU.PE1 (mult_add).
Mapping positional arguments of cell LU.PE0 (mult_add).
Mapping positional arguments of cell LU.topBlock (top_ram).
Mapping positional arguments of cell LU.leftBlock1 (ram3).
Mapping positional arguments of cell LU.leftBlock0 (ram2).
Mapping positional arguments of cell LU.currentBlock1 (ram1).
Mapping positional arguments of cell LU.currentBlock0 (ram).
Mapping positional arguments of cell LU.conBlock (LUControl).
Mapping positional arguments of cell LU8PEEng.compBlock (LU).
Mapping positional arguments of cell LU8PEEng.MC (MarshallerController).

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 762444f867, CPU: user 0.25s system 0.00s, MEM: 34.49 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 91% 2x read_verilog (0 sec), 8% 1x hierarchy (0 sec)
