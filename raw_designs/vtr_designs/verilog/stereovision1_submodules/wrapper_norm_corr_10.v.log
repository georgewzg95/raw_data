
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v' to AST representation.
Generating RTLIL representation for module `\wrapper_norm_corr_10'.
Generating RTLIL representation for module `\wrapper_corr_10'.
Generating RTLIL representation for module `\corr'.
Generating RTLIL representation for module `\wrapper_norm'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: wrapper_norm        
root of   0 design levels: corr                
root of   1 design levels: wrapper_corr_10     
root of   2 design levels: wrapper_norm_corr_10
Automatically selected wrapper_norm_corr_10 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \wrapper_norm_corr_10
Used module:     \wrapper_corr_10
Used module:         \corr
Used module:     \wrapper_norm

2.3. Analyzing design hierarchy..
Top module:  \wrapper_norm_corr_10
Used module:     \wrapper_corr_10
Used module:         \corr
Used module:     \wrapper_norm
Removed 0 unused modules.
Mapping positional arguments of cell wrapper_corr_10.inst_corr_10 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_9 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_8 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_7 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_6 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_5 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_4 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_3 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_2 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_1 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_0 (corr).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8 in module wrapper_norm.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3 in module corr.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1 in module wrapper_corr_10.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 16 redundant assignments.
Promoted 8 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
     1/4: $0\addin_2[15:0]
     2/4: $0\addin_1[15:0]
     3/4: $0\din_2_reg[15:0]
     4/4: $0\din_1_reg[15:0]
Creating decoders for process `\corr.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
     1/1: $0\corr_out[15:0]
Creating decoders for process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
     1/11: $0\corr_out_10[15:0]
     2/11: $0\corr_out_9[15:0]
     3/11: $0\corr_out_8[15:0]
     4/11: $0\corr_out_7[15:0]
     5/11: $0\corr_out_6[15:0]
     6/11: $0\corr_out_5[15:0]
     7/11: $0\corr_out_4[15:0]
     8/11: $0\corr_out_3[15:0]
     9/11: $0\corr_out_2[15:0]
    10/11: $0\corr_out_1[15:0]
    11/11: $0\corr_out_0[15:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\wrapper_norm.\din_1_reg' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$64' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_2_reg' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$65' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_1_tmp1' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$66' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_2_tmp1' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$67' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_1_tmp2' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$68' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_2_tmp2' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$69' with positive edge clock.
Creating register for signal `\wrapper_norm.\addin_1' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\wrapper_norm.\addin_2' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\wrapper_norm.\add_out' using process `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\corr.\corr_out' using process `\corr.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\corr.\lrexrre_reg' using process `\corr.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
  created $dff cell `$procdff$74' with positive edge clock.
Creating register for signal `\corr.\limxrim_reg' using process `\corr.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\corr.\corr_out_tmp' using process `\corr.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
  created $dff cell `$procdff$76' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_0' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$77' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_1' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$78' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_2' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$79' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_3' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$80' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_4' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$81' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_5' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$82' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_6' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$83' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_7' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$84' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_8' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$85' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_9' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$86' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_10' using process `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$87' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
Removing empty process `wrapper_norm.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
Found and cleaned up 1 empty switch in `\corr.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
Removing empty process `corr.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
Found and cleaned up 1 empty switch in `\wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
Removing empty process `wrapper_corr_10.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
Cleaned up 5 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_norm.
<suppressed ~5 debug messages>
Optimizing module corr.
<suppressed ~1 debug messages>
Optimizing module wrapper_corr_10.
<suppressed ~1 debug messages>
Optimizing module wrapper_norm_corr_10.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wrapper_norm.
Optimizing module corr.
Optimizing module wrapper_corr_10.
Optimizing module wrapper_norm_corr_10.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_norm'.
Finding identical cells in module `\corr'.
Finding identical cells in module `\wrapper_corr_10'.
Finding identical cells in module `\wrapper_norm_corr_10'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wrapper_norm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$20: \din_1_reg -> { 1'0 \din_1_reg [14:0] }
  Analyzing evaluation results.
Running muxtree optimizer on module \corr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wrapper_corr_10..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wrapper_norm_corr_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wrapper_norm.
  Optimizing cells in module \corr.
  Optimizing cells in module \wrapper_corr_10.
  Optimizing cells in module \wrapper_norm_corr_10.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wrapper_norm'.
Finding identical cells in module `\corr'.
Finding identical cells in module `\wrapper_corr_10'.
Finding identical cells in module `\wrapper_norm_corr_10'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$64 ($dff) from module wrapper_norm (D = \din_1, Q = \din_1_reg).
Adding EN signal on $procdff$65 ($dff) from module wrapper_norm (D = \din_2, Q = \din_2_reg).
Adding SRST signal on $procdff$70 ($dff) from module wrapper_norm (D = $sub$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:274$11_Y [15], Q = \addin_1 [15], rval = 1'0).
Adding EN signal on $procdff$73 ($dff) from module corr (D = \corr_out_tmp, Q = \corr_out).
Adding EN signal on $procdff$87 ($dff) from module wrapper_corr_10 (D = \corr_out_10_tmp, Q = \corr_out_10).
Adding EN signal on $procdff$77 ($dff) from module wrapper_corr_10 (D = \corr_out_0_tmp, Q = \corr_out_0).
Adding EN signal on $procdff$78 ($dff) from module wrapper_corr_10 (D = \corr_out_1_tmp, Q = \corr_out_1).
Adding EN signal on $procdff$79 ($dff) from module wrapper_corr_10 (D = \corr_out_2_tmp, Q = \corr_out_2).
Adding EN signal on $procdff$80 ($dff) from module wrapper_corr_10 (D = \corr_out_3_tmp, Q = \corr_out_3).
Adding EN signal on $procdff$81 ($dff) from module wrapper_corr_10 (D = \corr_out_4_tmp, Q = \corr_out_4).
Adding EN signal on $procdff$82 ($dff) from module wrapper_corr_10 (D = \corr_out_5_tmp, Q = \corr_out_5).
Adding EN signal on $procdff$83 ($dff) from module wrapper_corr_10 (D = \corr_out_6_tmp, Q = \corr_out_6).
Adding EN signal on $procdff$84 ($dff) from module wrapper_corr_10 (D = \corr_out_7_tmp, Q = \corr_out_7).
Adding EN signal on $procdff$85 ($dff) from module wrapper_corr_10 (D = \corr_out_8_tmp, Q = \corr_out_8).
Adding EN signal on $procdff$86 ($dff) from module wrapper_corr_10 (D = \corr_out_9_tmp, Q = \corr_out_9).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wrapper_norm..
Finding unused cells or wires in module \corr..
Finding unused cells or wires in module \wrapper_corr_10..
Finding unused cells or wires in module \wrapper_norm_corr_10..
Removed 16 unused cells and 63 unused wires.
<suppressed ~23 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module corr.
Optimizing module wrapper_corr_10.
Optimizing module wrapper_norm.
Optimizing module wrapper_norm_corr_10.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \corr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \wrapper_corr_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \wrapper_norm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wrapper_norm_corr_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \corr.
  Optimizing cells in module \wrapper_corr_10.
  Optimizing cells in module \wrapper_norm.
  Optimizing cells in module \wrapper_norm_corr_10.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\corr'.
Finding identical cells in module `\wrapper_corr_10'.
Finding identical cells in module `\wrapper_norm'.
Finding identical cells in module `\wrapper_norm_corr_10'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \corr..
Finding unused cells or wires in module \wrapper_corr_10..
Finding unused cells or wires in module \wrapper_norm..
Finding unused cells or wires in module \wrapper_norm_corr_10..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module corr.
Optimizing module wrapper_corr_10.
Optimizing module wrapper_norm.
Optimizing module wrapper_norm_corr_10.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== corr ===

   Number of wires:                 13
   Number of wire bits:            146
   Number of public wires:          10
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $add                            1
     $dff                            3
     $dffe                           1
     $mul                            2

=== wrapper_corr_10 ===

   Number of wires:                 52
   Number of wire bits:            578
   Number of public wires:          52
   Number of public wire bits:     578
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $dffe                          11
     corr                           11
     sh_reg                         12

=== wrapper_norm ===

   Number of wires:                 21
   Number of wire bits:            292
   Number of public wires:          15
   Number of public wire bits:     195
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $add                            2
     $dff                            7
     $dffe                           2
     $mux                            2
     $sdff                           1
     $sub                            2
     my_wrapper_divider              2

=== wrapper_norm_corr_10 ===

   Number of wires:                 21
   Number of wire bits:            274
   Number of public wires:          21
   Number of public wire bits:     274
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     wrapper_corr_10                 1
     wrapper_norm                    2

=== design hierarchy ===

   wrapper_norm_corr_10              1
     wrapper_corr_10                 1
       corr                         11
     wrapper_norm                    2

   Number of wires:                258
   Number of wire bits:           3042
   Number of public wires:         213
   Number of public wire bits:    2320
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                136
     $add                           15
     $dff                           47
     $dffe                          26
     $mul                           22
     $mux                            4
     $sdff                           2
     $sub                            4
     my_wrapper_divider              4
     sh_reg                         12

End of script. Logfile hash: cc6911f715, CPU: user 0.06s system 0.00s, MEM: 12.85 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 19% 4x opt_expr (0 sec), 19% 2x read_verilog (0 sec), ...
