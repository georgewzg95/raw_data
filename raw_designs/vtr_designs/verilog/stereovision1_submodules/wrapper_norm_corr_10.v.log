
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v' to AST representation.
Generating RTLIL representation for module `\wrapper_norm_corr_10'.
Generating RTLIL representation for module `\wrapper_corr_10'.
Generating RTLIL representation for module `\corr'.
Generating RTLIL representation for module `\wrapper_norm'.
Generating RTLIL representation for module `\my_wrapper_divider'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321.2-360.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\my_divider'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:396.2-425.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435.2-498.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\sh_reg'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: sh_reg              
root of   0 design levels: my_divider          
root of   1 design levels: my_wrapper_divider  
root of   2 design levels: wrapper_norm        
root of   0 design levels: corr                
root of   1 design levels: wrapper_corr_10     
root of   3 design levels: wrapper_norm_corr_10
Automatically selected wrapper_norm_corr_10 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \wrapper_norm_corr_10
Used module:     \wrapper_corr_10
Used module:         \corr
Used module:         \sh_reg
Used module:     \wrapper_norm
Used module:         \my_wrapper_divider
Used module:             \my_divider

2.3. Analyzing design hierarchy..
Top module:  \wrapper_norm_corr_10
Used module:     \wrapper_corr_10
Used module:         \corr
Used module:         \sh_reg
Used module:     \wrapper_norm
Used module:         \my_wrapper_divider
Used module:             \my_divider
Removed 0 unused modules.
Mapping positional arguments of cell my_wrapper_divider.my_divider_inst (my_divider).
Mapping positional arguments of cell wrapper_norm.my_div_inst_2 (my_wrapper_divider).
Mapping positional arguments of cell wrapper_norm.my_div_inst_1 (my_wrapper_divider).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_10 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_9 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_8 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_7 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_6 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_5 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_4 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_3 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_2 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_1 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_corr_0 (corr).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_10 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_9 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_8 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_7 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_6 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_5 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_4 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_3 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_2 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_1 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_0 (sh_reg).
Mapping positional arguments of cell wrapper_corr_10.inst_sh_reg_r_1 (sh_reg).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:590$51 in module sh_reg.
Marked 9 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29 in module my_divider.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26 in module my_divider.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:427$24 in module my_divider.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:396$20 in module my_divider.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18 in module my_wrapper_divider.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18 in module my_wrapper_divider.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:313$16 in module my_wrapper_divider.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8 in module wrapper_norm.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3 in module corr.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1 in module wrapper_corr_10.
Removed a total of 1 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 25 redundant assignments.
Promoted 21 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:590$51'.
     1/2: $0\dout_2[7:0]
     2/2: $0\dout_1[7:0]
Creating decoders for process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29'.
     1/5: $0\Count[3:0]
     2/5: $0\ff0[0:0]
     3/5: $0\DataA[15:0]
     4/5: $0\Remainder[7:0]
     5/5: $0\RegB[16:0]
Creating decoders for process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
     1/13: $2\EC[0:0]
     2/13: $3\LR[0:0]
     3/13: $2\EA[0:0]
     4/13: $2\ER0[0:0]
     5/13: $2\LR[0:0]
     6/13: $1\ER0[0:0]
     7/13: $1\LR[0:0]
     8/13: $1\EA[0:0]
     9/13: $1\Done[0:0]
    10/13: $1\Rsel[0:0]
    11/13: $1\EC[0:0]
    12/13: $1\ER[0:0]
    13/13: $1\LC[0:0]
Creating decoders for process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:427$24'.
     1/1: $0\y[1:0]
Creating decoders for process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:396$20'.
     1/4: $4\Y[1:0]
     2/4: $3\Y[1:0]
     3/4: $2\Y[1:0]
     4/4: $1\Y[1:0]
Creating decoders for process `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18'.
     1/5: $2\Y[1:0]
     2/5: $1\Y[1:0]
     3/5: $1\start[0:0]
     4/5: $1\EB[0:0]
     5/5: $1\LA[0:0]
Creating decoders for process `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:313$16'.
     1/1: $0\y[1:0]
Creating decoders for process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
     1/4: $0\addin_2[15:0]
     2/4: $0\addin_1[15:0]
     3/4: $0\din_2_reg[15:0]
     4/4: $0\din_1_reg[15:0]
Creating decoders for process `\corr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
     1/1: $0\corr_out[15:0]
Creating decoders for process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
     1/11: $0\corr_out_10[15:0]
     2/11: $0\corr_out_9[15:0]
     3/11: $0\corr_out_8[15:0]
     4/11: $0\corr_out_7[15:0]
     5/11: $0\corr_out_6[15:0]
     6/11: $0\corr_out_5[15:0]
     7/11: $0\corr_out_4[15:0]
     8/11: $0\corr_out_3[15:0]
     9/11: $0\corr_out_2[15:0]
    10/11: $0\corr_out_1[15:0]
    11/11: $0\corr_out_0[15:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\my_divider.\Done' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
No latch inferred for signal `\my_divider.\EA' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
No latch inferred for signal `\my_divider.\Rsel' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
No latch inferred for signal `\my_divider.\LR' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
No latch inferred for signal `\my_divider.\ER' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
No latch inferred for signal `\my_divider.\ER0' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
No latch inferred for signal `\my_divider.\LC' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
No latch inferred for signal `\my_divider.\EC' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
No latch inferred for signal `\my_divider.\Y' from process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:396$20'.
No latch inferred for signal `\my_wrapper_divider.\Y' from process `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18'.
No latch inferred for signal `\my_wrapper_divider.\start' from process `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18'.
No latch inferred for signal `\my_wrapper_divider.\LA' from process `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18'.
No latch inferred for signal `\my_wrapper_divider.\EB' from process `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sh_reg.\dout_1' using process `\sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:590$51'.
  created $dff cell `$procdff$276' with positive edge clock.
Creating register for signal `\sh_reg.\dout_2' using process `\sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:590$51'.
  created $dff cell `$procdff$277' with positive edge clock.
Creating register for signal `\my_divider.\Remainder' using process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29'.
  created $dff cell `$procdff$278' with positive edge clock.
Creating register for signal `\my_divider.\Count' using process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `\my_divider.\RegB' using process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29'.
  created $dff cell `$procdff$280' with positive edge clock.
Creating register for signal `\my_divider.\DataA' using process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29'.
  created $dff cell `$procdff$281' with positive edge clock.
Creating register for signal `\my_divider.\ff0' using process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29'.
  created $dff cell `$procdff$282' with positive edge clock.
Creating register for signal `\my_divider.\y' using process `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:427$24'.
  created $dff cell `$procdff$283' with positive edge clock.
Creating register for signal `\my_wrapper_divider.\y' using process `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:313$16'.
  created $dff cell `$procdff$284' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_1_reg' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$285' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_2_reg' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$286' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_1_tmp1' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$287' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_2_tmp1' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$288' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_1_tmp2' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$289' with positive edge clock.
Creating register for signal `\wrapper_norm.\din_2_tmp2' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$290' with positive edge clock.
Creating register for signal `\wrapper_norm.\addin_1' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$291' with positive edge clock.
Creating register for signal `\wrapper_norm.\addin_2' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$292' with positive edge clock.
Creating register for signal `\wrapper_norm.\add_out' using process `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
  created $dff cell `$procdff$293' with positive edge clock.
Creating register for signal `\corr.\corr_out' using process `\corr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
  created $dff cell `$procdff$294' with positive edge clock.
Creating register for signal `\corr.\lrexrre_reg' using process `\corr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
  created $dff cell `$procdff$295' with positive edge clock.
Creating register for signal `\corr.\limxrim_reg' using process `\corr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
  created $dff cell `$procdff$296' with positive edge clock.
Creating register for signal `\corr.\corr_out_tmp' using process `\corr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
  created $dff cell `$procdff$297' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_0' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$298' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_1' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$299' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_2' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$300' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_3' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$301' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_4' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$302' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_5' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$303' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_6' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$304' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_7' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$305' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_8' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$306' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_9' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$307' with positive edge clock.
Creating register for signal `\wrapper_corr_10.\corr_out_10' using process `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
  created $dff cell `$procdff$308' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:590$51'.
Removing empty process `sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:590$51'.
Found and cleaned up 9 empty switches in `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29'.
Removing empty process `my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:500$29'.
Found and cleaned up 4 empty switches in `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
Removing empty process `my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:435$26'.
Found and cleaned up 1 empty switch in `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:427$24'.
Removing empty process `my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:427$24'.
Found and cleaned up 4 empty switches in `\my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:396$20'.
Removing empty process `my_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:396$20'.
Found and cleaned up 2 empty switches in `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18'.
Removing empty process `my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:321$18'.
Found and cleaned up 1 empty switch in `\my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:313$16'.
Removing empty process `my_wrapper_divider.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:313$16'.
Found and cleaned up 3 empty switches in `\wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
Removing empty process `wrapper_norm.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:252$8'.
Found and cleaned up 1 empty switch in `\corr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
Removing empty process `corr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:210$3'.
Found and cleaned up 1 empty switch in `\wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
Removing empty process `wrapper_corr_10.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:158$1'.
Cleaned up 27 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module sh_reg.
<suppressed ~1 debug messages>
Optimizing module my_divider.
<suppressed ~34 debug messages>
Optimizing module my_wrapper_divider.
<suppressed ~7 debug messages>
Optimizing module wrapper_norm.
<suppressed ~5 debug messages>
Optimizing module corr.
<suppressed ~1 debug messages>
Optimizing module wrapper_corr_10.
<suppressed ~1 debug messages>
Optimizing module wrapper_norm_corr_10.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sh_reg.
Optimizing module my_divider.
Optimizing module my_wrapper_divider.
Optimizing module wrapper_norm.
Optimizing module corr.
Optimizing module wrapper_corr_10.
Optimizing module wrapper_norm_corr_10.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sh_reg'.
Finding identical cells in module `\my_divider'.
<suppressed ~66 debug messages>
Finding identical cells in module `\my_wrapper_divider'.
<suppressed ~39 debug messages>
Finding identical cells in module `\wrapper_norm'.
Finding identical cells in module `\corr'.
Finding identical cells in module `\wrapper_corr_10'.
Finding identical cells in module `\wrapper_norm_corr_10'.
Removed a total of 35 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sh_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \my_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$133.
    dead port 2/2 on $mux $procmux$125.
    dead port 2/2 on $mux $procmux$185.
    dead port 2/2 on $mux $procmux$118.
    dead port 2/2 on $mux $procmux$110.
    dead port 2/2 on $mux $procmux$103.
    dead port 2/2 on $mux $procmux$193.
    dead port 2/2 on $mux $procmux$178.
Running muxtree optimizer on module \my_wrapper_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$203.
Running muxtree optimizer on module \wrapper_norm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$232: \din_1_reg -> { 1'0 \din_1_reg [14:0] }
  Analyzing evaluation results.
Running muxtree optimizer on module \corr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wrapper_corr_10..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wrapper_norm_corr_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 9 multiplexer ports.
<suppressed ~36 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sh_reg.
  Optimizing cells in module \my_divider.
    New ctrl vector for $pmux cell $procmux$137: $auto$opt_reduce.cc:134:opt_mux$310
    New ctrl vector for $pmux cell $procmux$163: $auto$opt_reduce.cc:134:opt_mux$312
  Optimizing cells in module \my_divider.
  Optimizing cells in module \my_wrapper_divider.
    New ctrl vector for $pmux cell $procmux$210: { $procmux$222_CMP $auto$opt_reduce.cc:134:opt_mux$314 }
    New ctrl vector for $pmux cell $procmux$215: { $procmux$223_CMP $auto$opt_reduce.cc:134:opt_mux$316 }
    New ctrl vector for $pmux cell $procmux$220: { $procmux$223_CMP $auto$opt_reduce.cc:134:opt_mux$318 }
  Optimizing cells in module \my_wrapper_divider.
  Optimizing cells in module \wrapper_norm.
  Optimizing cells in module \corr.
  Optimizing cells in module \wrapper_corr_10.
  Optimizing cells in module \wrapper_norm_corr_10.
Performed a total of 5 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sh_reg'.
Finding identical cells in module `\my_divider'.
<suppressed ~6 debug messages>
Finding identical cells in module `\my_wrapper_divider'.
<suppressed ~6 debug messages>
Finding identical cells in module `\wrapper_norm'.
Finding identical cells in module `\corr'.
Finding identical cells in module `\wrapper_corr_10'.
Finding identical cells in module `\wrapper_norm_corr_10'.
Removed a total of 4 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$277 ($dff) from module sh_reg (D = \din_2, Q = \dout_2).
Adding EN signal on $procdff$276 ($dff) from module sh_reg (D = \din_1, Q = \dout_1).
Adding SRST signal on $procdff$282 ($dff) from module my_divider (D = \DataA [15], Q = \ff0, rval = 1'0).
Adding SRST signal on $procdff$281 ($dff) from module my_divider (D = $procmux$78_Y, Q = \DataA, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$326 ($sdff) from module my_divider (D = $procmux$78_Y, Q = \DataA).
Adding SRST signal on $procdff$280 ($dff) from module my_divider (D = $procmux$93_Y, Q = \RegB, rval = 17'00000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$330 ($sdff) from module my_divider (D = \data_in_b, Q = \RegB).
Adding SRST signal on $procdff$279 ($dff) from module my_divider (D = $procmux$60_Y, Q = \Count, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$332 ($sdff) from module my_divider (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:562$45_Y [3:0], Q = \Count).
Adding SRST signal on $procdff$278 ($dff) from module my_divider (D = $procmux$87_Y, Q = \Remainder, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:262:slice$336 ($sdff) from module my_divider (D = $procmux$87_Y, Q = \Remainder).
Adding SRST signal on $procdff$283 ($dff) from module my_divider (D = $procmux$196_Y, Q = \y, rval = 2'00).
Adding SRST signal on $procdff$284 ($dff) from module my_wrapper_divider (D = $procmux$205_Y, Q = \y, rval = 2'00).
Adding EN signal on $procdff$285 ($dff) from module wrapper_norm (D = \din_1, Q = \din_1_reg).
Adding EN signal on $procdff$286 ($dff) from module wrapper_norm (D = \din_2, Q = \din_2_reg).
Adding SRST signal on $procdff$291 ($dff) from module wrapper_norm (D = $sub$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_norm_corr_10.v:274$11_Y [15], Q = \addin_1 [15], rval = 1'0).
Adding EN signal on $procdff$294 ($dff) from module corr (D = \corr_out_tmp, Q = \corr_out).
Adding EN signal on $procdff$308 ($dff) from module wrapper_corr_10 (D = \corr_out_10_tmp, Q = \corr_out_10).
Adding EN signal on $procdff$298 ($dff) from module wrapper_corr_10 (D = \corr_out_0_tmp, Q = \corr_out_0).
Adding EN signal on $procdff$299 ($dff) from module wrapper_corr_10 (D = \corr_out_1_tmp, Q = \corr_out_1).
Adding EN signal on $procdff$300 ($dff) from module wrapper_corr_10 (D = \corr_out_2_tmp, Q = \corr_out_2).
Adding EN signal on $procdff$301 ($dff) from module wrapper_corr_10 (D = \corr_out_3_tmp, Q = \corr_out_3).
Adding EN signal on $procdff$302 ($dff) from module wrapper_corr_10 (D = \corr_out_4_tmp, Q = \corr_out_4).
Adding EN signal on $procdff$303 ($dff) from module wrapper_corr_10 (D = \corr_out_5_tmp, Q = \corr_out_5).
Adding EN signal on $procdff$304 ($dff) from module wrapper_corr_10 (D = \corr_out_6_tmp, Q = \corr_out_6).
Adding EN signal on $procdff$305 ($dff) from module wrapper_corr_10 (D = \corr_out_7_tmp, Q = \corr_out_7).
Adding EN signal on $procdff$306 ($dff) from module wrapper_corr_10 (D = \corr_out_8_tmp, Q = \corr_out_8).
Adding EN signal on $procdff$307 ($dff) from module wrapper_corr_10 (D = \corr_out_9_tmp, Q = \corr_out_9).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sh_reg..
Finding unused cells or wires in module \my_divider..
Finding unused cells or wires in module \my_wrapper_divider..
Finding unused cells or wires in module \wrapper_norm..
Finding unused cells or wires in module \corr..
Finding unused cells or wires in module \wrapper_corr_10..
Finding unused cells or wires in module \wrapper_norm_corr_10..
Removed 33 unused cells and 225 unused wires.
<suppressed ~45 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module corr.
Optimizing module my_divider.
<suppressed ~2 debug messages>
Optimizing module my_wrapper_divider.
Optimizing module sh_reg.
Optimizing module wrapper_corr_10.
Optimizing module wrapper_norm.
Optimizing module wrapper_norm_corr_10.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \corr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \my_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \my_wrapper_divider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sh_reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \wrapper_corr_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \wrapper_norm..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wrapper_norm_corr_10..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \corr.
  Optimizing cells in module \my_divider.
  Optimizing cells in module \my_wrapper_divider.
  Optimizing cells in module \sh_reg.
  Optimizing cells in module \wrapper_corr_10.
  Optimizing cells in module \wrapper_norm.
  Optimizing cells in module \wrapper_norm_corr_10.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\corr'.
Finding identical cells in module `\my_divider'.
Finding identical cells in module `\my_wrapper_divider'.
Finding identical cells in module `\sh_reg'.
Finding identical cells in module `\wrapper_corr_10'.
Finding identical cells in module `\wrapper_norm'.
Finding identical cells in module `\wrapper_norm_corr_10'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \corr..
Finding unused cells or wires in module \my_divider..
Finding unused cells or wires in module \my_wrapper_divider..
Finding unused cells or wires in module \sh_reg..
Finding unused cells or wires in module \wrapper_corr_10..
Finding unused cells or wires in module \wrapper_norm..
Finding unused cells or wires in module \wrapper_norm_corr_10..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module corr.
Optimizing module my_divider.
Optimizing module my_wrapper_divider.
Optimizing module sh_reg.
Optimizing module wrapper_corr_10.
Optimizing module wrapper_norm.
Optimizing module wrapper_norm_corr_10.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== corr ===

   Number of wires:                 13
   Number of wire bits:            146
   Number of public wires:          10
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $add                           16
     $dff                           48
     $dffe                          16
     $mul                           32

=== my_divider ===

   Number of wires:                 53
   Number of wire bits:            373
   Number of public wires:          26
   Number of public wire bits:     122
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 42
     $add                           96
     $eq                             4
     $logic_not                      6
     $mux                           95
     $not                           33
     $or                            24
     $pmux                           4
     $reduce_bool                    4
     $reduce_or                      6
     $sdff                           3
     $sdffe                         45

=== my_wrapper_divider ===

   Number of wires:                 19
   Number of wire bits:             67
   Number of public wires:          12
   Number of public wire bits:      59
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $eq                             6
     $logic_not                      2
     $mux                            2
     $pmux                           4
     $reduce_or                      6
     $sdff                           2

=== sh_reg ===

   Number of wires:                  6
   Number of wire bits:             34
   Number of public wires:           6
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $dffe                          16

=== wrapper_corr_10 ===

   Number of wires:                 52
   Number of wire bits:            578
   Number of public wires:          52
   Number of public wire bits:     578
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 34
     $dffe                         176

=== wrapper_norm ===

   Number of wires:                 21
   Number of wire bits:            292
   Number of public wires:          15
   Number of public wire bits:     195
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $add                           33
     $dff                          112
     $dffe                          32
     $mux                           32
     $sdff                           1
     $sub                           32

=== wrapper_norm_corr_10 ===

   Number of wires:                 21
   Number of wire bits:            274
   Number of public wires:          21
   Number of public wire bits:     274
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3

=== design hierarchy ===

   wrapper_norm_corr_10              1
     wrapper_corr_10                 0
       corr                          0
       sh_reg                        0
     wrapper_norm                    0
       my_wrapper_divider            0
         my_divider                  0

   Number of wires:                 21
   Number of wire bits:            274
   Number of public wires:          21
   Number of public wire bits:     274
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3

End of script. Logfile hash: 005cf02bbd, CPU: user 0.15s system 0.00s, MEM: 14.01 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 2x read_verilog (0 sec), 22% 4x opt_expr (0 sec), ...
