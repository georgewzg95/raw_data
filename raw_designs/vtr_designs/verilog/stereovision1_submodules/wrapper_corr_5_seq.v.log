
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v' to AST representation.
Generating RTLIL representation for module `\wrapper_corr_5_seq'.
Generating RTLIL representation for module `\corr_seq'.
Generating RTLIL representation for module `\sh_reg'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: sh_reg              
root of   0 design levels: corr_seq            
root of   1 design levels: wrapper_corr_5_seq  
Automatically selected wrapper_corr_5_seq as design top module.

2.2. Analyzing design hierarchy..
Top module:  \wrapper_corr_5_seq
Used module:     \corr_seq
Used module:     \sh_reg

2.3. Analyzing design hierarchy..
Top module:  \wrapper_corr_5_seq
Used module:     \corr_seq
Used module:     \sh_reg
Removed 0 unused modules.
Mapping positional arguments of cell wrapper_corr_5_seq.inst_corr_5 (corr_seq).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_corr_4 (corr_seq).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_corr_3 (corr_seq).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_corr_2 (corr_seq).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_corr_1 (corr_seq).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_corr_0 (corr_seq).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_sh_reg_5 (sh_reg).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_sh_reg_4 (sh_reg).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_sh_reg_3 (sh_reg).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_sh_reg_2 (sh_reg).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_sh_reg_1 (sh_reg).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_sh_reg_0 (sh_reg).
Mapping positional arguments of cell wrapper_corr_5_seq.inst_sh_reg_r_1 (sh_reg).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:137$8 in module sh_reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3 in module corr_seq.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1 in module wrapper_corr_5_seq.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 13 redundant assignments.
Promoted 3 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:137$8'.
     1/2: $0\dout_2[7:0]
     2/2: $0\dout_1[7:0]
Creating decoders for process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
     1/5: $0\corr_out[15:0]
     2/5: $0\in_r_im_reg[7:0]
     3/5: $0\in_r_re_reg[7:0]
     4/5: $0\in_l_im_reg[7:0]
     5/5: $0\in_l_re_reg[7:0]
Creating decoders for process `\wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
     1/6: $0\corr_out_5[15:0]
     2/6: $0\corr_out_4[15:0]
     3/6: $0\corr_out_3[15:0]
     4/6: $0\corr_out_2[15:0]
     5/6: $0\corr_out_1[15:0]
     6/6: $0\corr_out_0[15:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sh_reg.\dout_1' using process `\sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:137$8'.
  created $dff cell `$procdff$49' with positive edge clock.
Creating register for signal `\sh_reg.\dout_2' using process `\sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:137$8'.
  created $dff cell `$procdff$50' with positive edge clock.
Creating register for signal `\corr_seq.\corr_out' using process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
  created $dff cell `$procdff$51' with positive edge clock.
Creating register for signal `\corr_seq.\in_l_re_reg' using process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
  created $dff cell `$procdff$52' with positive edge clock.
Creating register for signal `\corr_seq.\in_l_im_reg' using process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
  created $dff cell `$procdff$53' with positive edge clock.
Creating register for signal `\corr_seq.\in_r_re_reg' using process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
  created $dff cell `$procdff$54' with positive edge clock.
Creating register for signal `\corr_seq.\in_r_im_reg' using process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
  created $dff cell `$procdff$55' with positive edge clock.
Creating register for signal `\corr_seq.\lrexrre_reg' using process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
  created $dff cell `$procdff$56' with positive edge clock.
Creating register for signal `\corr_seq.\limxrim_reg' using process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
  created $dff cell `$procdff$57' with positive edge clock.
Creating register for signal `\corr_seq.\corr_out_tmp' using process `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
  created $dff cell `$procdff$58' with positive edge clock.
Creating register for signal `\wrapper_corr_5_seq.\corr_out_0' using process `\wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
  created $dff cell `$procdff$59' with positive edge clock.
Creating register for signal `\wrapper_corr_5_seq.\corr_out_1' using process `\wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
  created $dff cell `$procdff$60' with positive edge clock.
Creating register for signal `\wrapper_corr_5_seq.\corr_out_2' using process `\wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
  created $dff cell `$procdff$61' with positive edge clock.
Creating register for signal `\wrapper_corr_5_seq.\corr_out_3' using process `\wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
  created $dff cell `$procdff$62' with positive edge clock.
Creating register for signal `\wrapper_corr_5_seq.\corr_out_4' using process `\wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
  created $dff cell `$procdff$63' with positive edge clock.
Creating register for signal `\wrapper_corr_5_seq.\corr_out_5' using process `\wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
  created $dff cell `$procdff$64' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:137$8'.
Removing empty process `sh_reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:137$8'.
Found and cleaned up 1 empty switch in `\corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
Removing empty process `corr_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:101$3'.
Found and cleaned up 1 empty switch in `\wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
Removing empty process `wrapper_corr_5_seq.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision1_submodules/wrapper_corr_5_seq.v:60$1'.
Cleaned up 3 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module sh_reg.
<suppressed ~1 debug messages>
Optimizing module corr_seq.
<suppressed ~1 debug messages>
Optimizing module wrapper_corr_5_seq.
<suppressed ~1 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sh_reg.
Optimizing module corr_seq.
Optimizing module wrapper_corr_5_seq.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sh_reg'.
Finding identical cells in module `\corr_seq'.
Finding identical cells in module `\wrapper_corr_5_seq'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sh_reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \corr_seq..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wrapper_corr_5_seq..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sh_reg.
  Optimizing cells in module \corr_seq.
  Optimizing cells in module \wrapper_corr_5_seq.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sh_reg'.
Finding identical cells in module `\corr_seq'.
Finding identical cells in module `\wrapper_corr_5_seq'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$50 ($dff) from module sh_reg (D = \din_2, Q = \dout_2).
Adding EN signal on $procdff$49 ($dff) from module sh_reg (D = \din_1, Q = \dout_1).
Adding EN signal on $procdff$51 ($dff) from module corr_seq (D = \corr_out_tmp, Q = \corr_out).
Adding EN signal on $procdff$52 ($dff) from module corr_seq (D = \in_l_re, Q = \in_l_re_reg).
Adding EN signal on $procdff$53 ($dff) from module corr_seq (D = \in_l_im, Q = \in_l_im_reg).
Adding EN signal on $procdff$54 ($dff) from module corr_seq (D = \in_r_re, Q = \in_r_re_reg).
Adding EN signal on $procdff$55 ($dff) from module corr_seq (D = \in_r_im, Q = \in_r_im_reg).
Adding EN signal on $procdff$64 ($dff) from module wrapper_corr_5_seq (D = \corr_out_5_tmp, Q = \corr_out_5).
Adding EN signal on $procdff$59 ($dff) from module wrapper_corr_5_seq (D = \corr_out_0_tmp, Q = \corr_out_0).
Adding EN signal on $procdff$60 ($dff) from module wrapper_corr_5_seq (D = \corr_out_1_tmp, Q = \corr_out_1).
Adding EN signal on $procdff$61 ($dff) from module wrapper_corr_5_seq (D = \corr_out_2_tmp, Q = \corr_out_2).
Adding EN signal on $procdff$62 ($dff) from module wrapper_corr_5_seq (D = \corr_out_3_tmp, Q = \corr_out_3).
Adding EN signal on $procdff$63 ($dff) from module wrapper_corr_5_seq (D = \corr_out_4_tmp, Q = \corr_out_4).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sh_reg..
Finding unused cells or wires in module \corr_seq..
Finding unused cells or wires in module \wrapper_corr_5_seq..
Removed 13 unused cells and 45 unused wires.
<suppressed ~16 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module corr_seq.
Optimizing module sh_reg.
Optimizing module wrapper_corr_5_seq.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \corr_seq..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \sh_reg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \wrapper_corr_5_seq..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \corr_seq.
  Optimizing cells in module \sh_reg.
  Optimizing cells in module \wrapper_corr_5_seq.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\corr_seq'.
Finding identical cells in module `\sh_reg'.
Finding identical cells in module `\wrapper_corr_5_seq'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \corr_seq..
Finding unused cells or wires in module \sh_reg..
Finding unused cells or wires in module \wrapper_corr_5_seq..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module corr_seq.
Optimizing module sh_reg.
Optimizing module wrapper_corr_5_seq.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== corr_seq ===

   Number of wires:                 17
   Number of wire bits:            178
   Number of public wires:          14
   Number of public wire bits:     130
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $add                           16
     $dff                           48
     $dffe                          48
     $mul                           32

=== sh_reg ===

   Number of wires:                  6
   Number of wire bits:             34
   Number of public wires:           6
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $dffe                          16

=== wrapper_corr_5_seq ===

   Number of wires:                 32
   Number of wire bits:            338
   Number of public wires:          32
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 19
     $dffe                          96

=== design hierarchy ===

   wrapper_corr_5_seq                1
     corr_seq                        0
     sh_reg                          0

   Number of wires:                 32
   Number of wire bits:            338
   Number of public wires:          32
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 19
     $dffe                          96

End of script. Logfile hash: 68f0def404, CPU: user 0.06s system 0.01s, MEM: 11.90 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 17% 4x opt_expr (0 sec), 17% 2x read_verilog (0 sec), ...
