
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision2_submodules/v_fltr_316x7.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision2_submodules/v_fltr_316x7.v' to AST representation.
Generating RTLIL representation for module `\v_fltr_316x7'.
Generating RTLIL representation for module `\fifo316'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: fifo316             
root of   1 design levels: v_fltr_316x7        
Automatically selected v_fltr_316x7 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \v_fltr_316x7
Used module:     \fifo316

2.3. Analyzing design hierarchy..
Top module:  \v_fltr_316x7
Used module:     \fifo316
Removed 0 unused modules.
Mapping positional arguments of cell v_fltr_316x7.fifo6 (fifo316).
Mapping positional arguments of cell v_fltr_316x7.fifo5 (fifo316).
Mapping positional arguments of cell v_fltr_316x7.fifo4 (fifo316).
Mapping positional arguments of cell v_fltr_316x7.fifo3 (fifo316).
Mapping positional arguments of cell v_fltr_316x7.fifo2 (fifo316).
Mapping positional arguments of cell v_fltr_316x7.fifo1 (fifo316).
Mapping positional arguments of cell v_fltr_316x7.fifo0 (fifo316).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fifo316.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision2_submodules/v_fltr_316x7.v:140$1'.
     1/3: $0\buff2[7:0]
     2/3: $0\buff1[7:0]
     3/3: $0\dout[7:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fifo316.\dout' using process `\fifo316.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision2_submodules/v_fltr_316x7.v:140$1'.
  created $dff cell `$procdff$9' with positive edge clock.
Creating register for signal `\fifo316.\buff1' using process `\fifo316.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision2_submodules/v_fltr_316x7.v:140$1'.
  created $dff cell `$procdff$10' with positive edge clock.
Creating register for signal `\fifo316.\buff2' using process `\fifo316.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision2_submodules/v_fltr_316x7.v:140$1'.
  created $dff cell `$procdff$11' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\fifo316.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision2_submodules/v_fltr_316x7.v:140$1'.
Removing empty process `fifo316.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/stereovision2_submodules/v_fltr_316x7.v:140$1'.
Cleaned up 1 empty switch.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo316.
<suppressed ~1 debug messages>
Optimizing module v_fltr_316x7.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo316.
Optimizing module v_fltr_316x7.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo316'.
Finding identical cells in module `\v_fltr_316x7'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo316..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \v_fltr_316x7..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo316.
  Optimizing cells in module \v_fltr_316x7.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo316'.
Finding identical cells in module `\v_fltr_316x7'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$11 ($dff) from module fifo316 (D = \buff1, Q = \buff2).
Adding EN signal on $procdff$9 ($dff) from module fifo316 (D = \buff2, Q = \dout).
Adding EN signal on $procdff$10 ($dff) from module fifo316 (D = \din, Q = \buff1).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo316..
Finding unused cells or wires in module \v_fltr_316x7..
Removed 3 unused cells and 10 unused wires.
<suppressed ~4 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo316.
Optimizing module v_fltr_316x7.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fifo316..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \v_fltr_316x7..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fifo316.
  Optimizing cells in module \v_fltr_316x7.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fifo316'.
Finding identical cells in module `\v_fltr_316x7'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fifo316..
Finding unused cells or wires in module \v_fltr_316x7..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fifo316.
Optimizing module v_fltr_316x7.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== fifo316 ===

   Number of wires:                  6
   Number of wire bits:             34
   Number of public wires:           6
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dffe                           3

=== v_fltr_316x7 ===

   Number of wires:                 18
   Number of wire bits:            186
   Number of public wires:          18
   Number of public wire bits:     186
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     fifo316                         7
     fltr_compute_f1                 1
     fltr_compute_f2                 1
     fltr_compute_f3                 1
     fltr_compute_h1                 1
     fltr_compute_h2                 1
     fltr_compute_h3                 1
     fltr_compute_h4                 1

=== design hierarchy ===

   v_fltr_316x7                      1
     fifo316                         7

   Number of wires:                 60
   Number of wire bits:            424
   Number of public wires:          60
   Number of public wire bits:     424
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $dffe                          21
     fltr_compute_f1                 1
     fltr_compute_f2                 1
     fltr_compute_f3                 1
     fltr_compute_h1                 1
     fltr_compute_h2                 1
     fltr_compute_h3                 1
     fltr_compute_h4                 1

End of script. Logfile hash: 661bfe5bb3, CPU: user 0.02s system 0.00s, MEM: 11.74 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 39% 4x opt_expr (0 sec), 19% 2x read_verilog (0 sec), ...
