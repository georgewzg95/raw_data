
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v' to AST representation.
Generating RTLIL representation for module `\my_fir_f3'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: my_fir_f3           
Automatically selected my_fir_f3 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \my_fir_f3

2.3. Analyzing design hierarchy..
Top module:  \my_fir_f3
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1 in module my_fir_f3.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
     1/8: $0\output_data_ready[0:0]
     2/8: $0\n_delay_reg6[15:0]
     3/8: $0\n_delay_reg5[15:0]
     4/8: $0\n_delay_reg4[15:0]
     5/8: $0\n_delay_reg3[15:0]
     6/8: $0\n_delay_reg2[15:0]
     7/8: $0\n_delay_reg1[15:0]
     8/8: $0\dout[27:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\my_fir_f3.\dout' using process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
  created $dff cell `$procdff$38' with positive edge clock.
Creating register for signal `\my_fir_f3.\output_data_ready' using process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
  created $dff cell `$procdff$39' with positive edge clock.
Creating register for signal `\my_fir_f3.\n_delay_reg1' using process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
  created $dff cell `$procdff$40' with positive edge clock.
Creating register for signal `\my_fir_f3.\n_delay_reg2' using process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
  created $dff cell `$procdff$41' with positive edge clock.
Creating register for signal `\my_fir_f3.\n_delay_reg3' using process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
  created $dff cell `$procdff$42' with positive edge clock.
Creating register for signal `\my_fir_f3.\n_delay_reg4' using process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
  created $dff cell `$procdff$43' with positive edge clock.
Creating register for signal `\my_fir_f3.\n_delay_reg5' using process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
  created $dff cell `$procdff$44' with positive edge clock.
Creating register for signal `\my_fir_f3.\n_delay_reg6' using process `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
  created $dff cell `$procdff$45' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
Removing empty process `my_fir_f3.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:89$1'.
Cleaned up 1 empty switch.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_fir_f3.
<suppressed ~1 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_fir_f3.
<suppressed ~4 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_fir_f3'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \my_fir_f3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \my_fir_f3.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_fir_f3'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$45 ($dff) from module my_fir_f3 (D = \n_delay_reg5, Q = \n_delay_reg6).
Adding EN signal on $procdff$38 ($dff) from module my_fir_f3 (D = $add$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/stereovision2_submodules/my_fir_f3.v:101$13_Y [27:0], Q = \dout).
Adding EN signal on $procdff$40 ($dff) from module my_fir_f3 (D = \din, Q = \n_delay_reg1).
Adding EN signal on $procdff$41 ($dff) from module my_fir_f3 (D = \n_delay_reg1, Q = \n_delay_reg2).
Adding EN signal on $procdff$42 ($dff) from module my_fir_f3 (D = \n_delay_reg2, Q = \n_delay_reg3).
Adding EN signal on $procdff$43 ($dff) from module my_fir_f3 (D = \n_delay_reg3, Q = \n_delay_reg4).
Adding EN signal on $procdff$44 ($dff) from module my_fir_f3 (D = \n_delay_reg4, Q = \n_delay_reg5).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_fir_f3..
Removed 7 unused cells and 24 unused wires.
<suppressed ~8 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_fir_f3.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \my_fir_f3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \my_fir_f3.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\my_fir_f3'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \my_fir_f3..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module my_fir_f3.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== my_fir_f3 ===

   Number of wires:                 23
   Number of wire bits:            496
   Number of public wires:          11
   Number of public wire bits:     143
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 20
     $add                          160
     $dff                            1
     $dffe                         124
     $mul                          184
     $mux                            1

End of script. Logfile hash: d2bee946bf, CPU: user 0.05s system 0.00s, MEM: 11.87 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 36% 4x opt_expr (0 sec), 18% 2x opt_clean (0 sec), ...
