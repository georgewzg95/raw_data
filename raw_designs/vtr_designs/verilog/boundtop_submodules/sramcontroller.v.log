
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v' to AST representation.
Generating RTLIL representation for module `\sramcontroller'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69.5-216.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: sramcontroller      
Automatically selected sramcontroller as design top module.

2.2. Analyzing design hierarchy..
Top module:  \sramcontroller

2.3. Analyzing design hierarchy..
Top module:  \sramcontroller
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 11 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3 in module sramcontroller.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1 in module sramcontroller.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 12 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3'.
     1/32: $8\next_state[2:0]
     2/32: $7\next_state[2:0]
     3/32: $3\temp_waddress[17:0]
     4/32: $6\next_state[2:0]
     5/32: $5\tm3_sram_adsp[0:0]
     6/32: $3\tm3_sram_we[7:0]
     7/32: $5\next_state[2:0]
     8/32: $4\tm3_sram_adsp[0:0]
     9/32: $2\tm3_sram_we[7:0]
    10/32: $4\next_state[2:0]
    11/32: $2\temp_datavalid[0:0]
    12/32: $2\temp_waddress[17:0]
    13/32: $3\tm3_sram_oe[1:0]
    14/32: $3\tm3_sram_adsp[0:0]
    15/32: $3\tm3_sram_addr[18:0]
    16/32: $3\next_state[2:0]
    17/32: $2\next_state[2:0]
    18/32: $2\tm3_sram_adsp[0:0]
    19/32: $2\tm3_sram_oe[1:0]
    20/32: $2\tm3_sram_addr[18:0]
    21/32: $1\temp_datavalid[0:0]
    22/32: $1\temp_waddress[17:0]
    23/32: $1\temp_statepeek[2:0]
    24/32: $1\next_state[2:0]
    25/32: $1\tm3_sram_adsp[0:0]
    26/32: $1\tm3_sram_oe[1:0]
    27/32: $1\tm3_sram_addr[18:0]
    28/32: $1\want_data[0:0]
    29/32: $1\want_addr[0:0]
    30/32: $1\tm3_sram_data_xhdl0[63:0]
    31/32: $1\tm3_sram_we[7:0]
    32/32: $1\temp_data[63:0]
Creating decoders for process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1'.
     1/5: $0\datavalid[0:0]
     2/5: $0\data[63:0]
     3/5: $0\waddress[17:0]
     4/5: $0\state[2:0]
     5/5: $0\statepeek[2:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\sramcontroller.\want_addr' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$377
Latch inferred for signal `\sramcontroller.\want_data' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$418
Latch inferred for signal `\sramcontroller.\temp_data' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$429
Latch inferred for signal `\sramcontroller.\temp_datavalid' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$464
Latch inferred for signal `\sramcontroller.\tm3_sram_data_xhdl0' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$505
Latch inferred for signal `\sramcontroller.\tm3_sram_addr' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$590
Latch inferred for signal `\sramcontroller.\tm3_sram_we' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$675
Latch inferred for signal `\sramcontroller.\tm3_sram_oe' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$740
Latch inferred for signal `\sramcontroller.\tm3_sram_adsp' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$829
Latch inferred for signal `\sramcontroller.\temp_statepeek' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$870
Latch inferred for signal `\sramcontroller.\next_state' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$911
Latch inferred for signal `\sramcontroller.\temp_waddress' from process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3': $auto$proc_dlatch.cc:427:proc_dlatch$964

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sramcontroller.\data' using process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1'.
  created $dff cell `$procdff$965' with positive edge clock.
Creating register for signal `\sramcontroller.\datavalid' using process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1'.
  created $dff cell `$procdff$966' with positive edge clock.
Creating register for signal `\sramcontroller.\statepeek' using process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1'.
  created $dff cell `$procdff$967' with positive edge clock.
Creating register for signal `\sramcontroller.\state' using process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1'.
  created $dff cell `$procdff$968' with positive edge clock.
Creating register for signal `\sramcontroller.\waddress' using process `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1'.
  created $dff cell `$procdff$969' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 11 empty switches in `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3'.
Removing empty process `sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:69$3'.
Found and cleaned up 1 empty switch in `\sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1'.
Removing empty process `sramcontroller.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/boundtop_submodules/sramcontroller.v:49$1'.
Cleaned up 12 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module sramcontroller.
<suppressed ~226 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module sramcontroller.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sramcontroller'.
<suppressed ~585 debug messages>
Removed a total of 195 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sramcontroller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sramcontroller.
    New ctrl vector for $pmux cell $procmux$280: { $procmux$316_CMP $auto$opt_reduce.cc:134:opt_mux$971 }
    New ctrl vector for $pmux cell $procmux$248: { $procmux$317_CMP $procmux$316_CMP $procmux$315_CMP $procmux$314_CMP $procmux$321_CMP }
    New ctrl vector for $pmux cell $procmux$244: $procmux$316_CMP
    New ctrl vector for $pmux cell $procmux$237: $procmux$321_CMP
    New ctrl vector for $pmux cell $procmux$288: $auto$opt_reduce.cc:134:opt_mux$973
    New ctrl vector for $pmux cell $procmux$304: $procmux$316_CMP
    New ctrl vector for $pmux cell $procmux$264: $auto$opt_reduce.cc:134:opt_mux$975
    New ctrl vector for $pmux cell $procmux$272: $auto$opt_reduce.cc:134:opt_mux$977
    New ctrl vector for $pmux cell $procmux$256: { $procmux$317_CMP $procmux$316_CMP $procmux$315_CMP $procmux$314_CMP $procmux$321_CMP }
    New ctrl vector for $pmux cell $procmux$296: $auto$opt_reduce.cc:134:opt_mux$979
    New ctrl vector for $pmux cell $procmux$312: $procmux$316_CMP
  Optimizing cells in module \sramcontroller.
Performed a total of 11 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sramcontroller'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$969 ($dff) from module sramcontroller (D = \temp_waddress, Q = \waddress, rval = 18'000000000000000000).
Adding SRST signal on $procdff$968 ($dff) from module sramcontroller (D = \next_state, Q = \state, rval = 3'000).
Adding EN signal on $procdff$967 ($dff) from module sramcontroller (D = \temp_statepeek, Q = \statepeek).
Adding SRST signal on $procdff$966 ($dff) from module sramcontroller (D = \temp_datavalid, Q = \datavalid, rval = 1'0).
Adding SRST signal on $procdff$965 ($dff) from module sramcontroller (D = \temp_data, Q = \data, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sramcontroller..
Removed 12 unused cells and 481 unused wires.
<suppressed ~13 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module sramcontroller.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \sramcontroller..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \sramcontroller.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\sramcontroller'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \sramcontroller..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module sramcontroller.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== sramcontroller ===

   Number of wires:                 97
   Number of wire bits:            747
   Number of public wires:          27
   Number of public wire bits:     507
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 86
     $add                           32
     $and                           24
     $dffe                           3
     $dlatch                       185
     $eq                            15
     $logic_not                      3
     $mux                          114
     $not                           10
     $pmux                          25
     $reduce_or                     29
     $sdff                          86

End of script. Logfile hash: f462f57b79, CPU: user 0.14s system 0.00s, MEM: 13.44 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 31% 4x opt_expr (0 sec), 17% 3x opt_merge (0 sec), ...
