
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v' to AST representation.
Generating RTLIL representation for module `\multiclock_output_and_latch'.
Generating RTLIL representation for module `\and_latch'.
Warning: wire '\out' is assigned in a block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v:60.9-60.27.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: and_latch           
root of   1 design levels: multiclock_output_and_latch
Automatically selected multiclock_output_and_latch as design top module.

2.2. Analyzing design hierarchy..
Top module:  \multiclock_output_and_latch
Used module:     \and_latch

2.3. Analyzing design hierarchy..
Top module:  \multiclock_output_and_latch
Used module:     \and_latch
Removed 0 unused modules.
Mapping positional arguments of cell multiclock_output_and_latch.and_latch_one (and_latch).
Mapping positional arguments of cell multiclock_output_and_latch.and_latch_zero (and_latch).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\and_latch.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v:58$5'.
Creating decoders for process `\multiclock_output_and_latch.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v:36$3'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\and_latch.\out' using process `\and_latch.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v:58$5'.
  created $dff cell `$procdff$7' with positive edge clock.
Creating register for signal `\multiclock_output_and_latch.\wire_selector' using process `\multiclock_output_and_latch.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v:36$3'.
  created $dff cell `$procdff$8' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `and_latch.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v:58$5'.
Removing empty process `multiclock_output_and_latch.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/multiclock_output_and_latch.v:36$3'.
Cleaned up 0 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module and_latch.
Optimizing module multiclock_output_and_latch.
<suppressed ~2 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and_latch.
Optimizing module multiclock_output_and_latch.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and_latch'.
Finding identical cells in module `\multiclock_output_and_latch'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and_latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiclock_output_and_latch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and_latch.
  Optimizing cells in module \multiclock_output_and_latch.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and_latch'.
Finding identical cells in module `\multiclock_output_and_latch'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and_latch..
Finding unused cells or wires in module \multiclock_output_and_latch..
Removed 1 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and_latch.
Optimizing module multiclock_output_and_latch.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and_latch..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \multiclock_output_and_latch..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and_latch.
  Optimizing cells in module \multiclock_output_and_latch.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and_latch'.
Finding identical cells in module `\multiclock_output_and_latch'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and_latch..
Finding unused cells or wires in module \multiclock_output_and_latch..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module and_latch.
Optimizing module multiclock_output_and_latch.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== and_latch ===

   Number of wires:                  5
   Number of wire bits:              5
   Number of public wires:           4
   Number of public wire bits:       4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $and                            1
     $dff                            1

=== multiclock_output_and_latch ===

   Number of wires:                  9
   Number of wire bits:             43
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $add                           32
     $dff                            1
     $mux                            1

=== design hierarchy ===

   multiclock_output_and_latch       1
     and_latch                       0

   Number of wires:                  9
   Number of wire bits:             43
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $add                           32
     $dff                            1
     $mux                            1

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: d97abf56f5, CPU: user 0.03s system 0.00s, MEM: 11.32 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 3x opt_merge (0 sec), 28% 2x opt_clean (0 sec), ...
