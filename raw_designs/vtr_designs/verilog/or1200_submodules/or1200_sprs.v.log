
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v' to AST representation.
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\or1200_sprs'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:702.1-736.9 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:826.1-864.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: or1200_sprs         
Automatically selected or1200_sprs as design top module.

2.2. Analyzing design hierarchy..
Top module:  \or1200_sprs

2.3. Analyzing design hierarchy..
Top module:  \or1200_sprs
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:826$112 in module or1200_sprs.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:810$111 in module or1200_sprs.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:702$43 in module or1200_sprs.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:702$43 in module or1200_sprs.
Removed a total of 1 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:826$112'.
     1/4: $2\to_wbmux[31:0]
     2/4: $1\to_wbmux[31:0]
     3/4: $1\read_spr[0:0]
     4/4: $1\write_spr[0:0]
Creating decoders for process `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:810$111'.
     1/7: $0\sr[15:0] [15:7]
     2/7: $0\sr[15:0] [5]
     3/7: $0\sr[15:0] [4:3]
     4/7: $0\sr[15:0] [2]
     5/7: $0\sr[15:0] [1]
     6/7: $0\sr[15:0] [0]
     7/7: $0\sr[15:0] [6]
Creating decoders for process `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:702$43'.
     1/1: $1\unqualified_cs[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\or1200_sprs.\to_wbmux' from process `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:826$112'.
No latch inferred for signal `\or1200_sprs.\write_spr' from process `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:826$112'.
No latch inferred for signal `\or1200_sprs.\read_spr' from process `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:826$112'.
No latch inferred for signal `\or1200_sprs.\unqualified_cs' from process `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:702$43'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\or1200_sprs.\sr' using process `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:810$111'.
  created $dff cell `$procdff$225' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:826$112'.
Removing empty process `or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:826$112'.
Found and cleaned up 3 empty switches in `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:810$111'.
Removing empty process `or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:810$111'.
Found and cleaned up 1 empty switch in `\or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:702$43'.
Removing empty process `or1200_sprs.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:702$43'.
Cleaned up 6 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_sprs.
<suppressed ~3 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_sprs.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_sprs'.
<suppressed ~147 debug messages>
Removed a total of 49 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_sprs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$124.
Removed 1 multiplexer ports.
<suppressed ~19 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_sprs.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_sprs'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$225 ($dff) from module or1200_sprs (D = { $procmux$139_Y $procmux$155_Y }, Q = { \sr [15:7] \sr [4:3] }, rval = 11'10000000000).
Adding SRST signal on $procdff$225 ($dff) from module or1200_sprs (D = { $procmux$184_Y $procmux$144_Y $procmux$160_Y $procmux$168_Y $procmux$176_Y }, Q = { \sr [6:5] \sr [2:0] }, rval = 5'00001).
Adding EN signal on $auto$ff.cc:262:slice$227 ($sdff) from module or1200_sprs (D = { $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:760$61_Y [6:5] $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:760$61_Y [2:0] }, Q = { \sr [6:5] \sr [2:0] }).
Adding EN signal on $auto$ff.cc:262:slice$226 ($sdff) from module or1200_sprs (D = { $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:746$47_Y $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:750$52_Y $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:755$57_Y $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:760$61_Y [8:7] $ternary$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_sprs.v:760$61_Y [4:3] }, Q = { \sr [15:7] \sr [4:3] }).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_sprs..
Removed 21 unused cells and 131 unused wires.
<suppressed ~22 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_sprs.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_sprs..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_sprs.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_sprs'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_sprs..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_sprs.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== or1200_sprs ===

   Number of wires:                142
   Number of wire bits:           1496
   Number of public wires:          59
   Number of public wire bits:     871
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                114
     $and                          296
     $eq                           238
     $logic_and                     13
     $logic_not                     12
     $mux                          204
     $not                            1
     $or                           263
     $pmux                          64
     $reduce_and                     2
     $reduce_or                      2
     $sdffe                         16

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: ec22c1c85a, CPU: user 0.09s system 0.00s, MEM: 13.46 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 30% 4x opt_expr (0 sec), 21% 2x read_verilog (0 sec), ...
