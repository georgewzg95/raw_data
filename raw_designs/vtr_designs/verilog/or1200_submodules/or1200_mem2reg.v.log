
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v' to AST representation.
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\or1200_mem2reg'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:585.1-598.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:603.1-620.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:625.1-646.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:651.1-672.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:677.1-695.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:700.1-727.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:732.1-756.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:761.1-783.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:794.1-805.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: or1200_mem2reg      
Automatically selected or1200_mem2reg as design top module.

2.2. Analyzing design hierarchy..
Top module:  \or1200_mem2reg

2.3. Analyzing design hierarchy..
Top module:  \or1200_mem2reg
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:794$9 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:794$9 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:761$8 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:732$7 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:700$6 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:677$5 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:651$4 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:625$3 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:603$2 in module or1200_mem2reg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:585$1 in module or1200_mem2reg.
Removed a total of 1 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 9 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:794$9'.
     1/1: $1\aligned[31:0]
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:761$8'.
     1/1: $1\regdata_hh[7:0]
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:732$7'.
     1/1: $1\regdata_hl[7:0]
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:700$6'.
     1/1: $1\regdata_lh[7:0]
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:677$5'.
     1/1: $1\regdata_ll[7:0]
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:651$4'.
     1/1: $1\sel_byte3[3:0]
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:625$3'.
     1/1: $1\sel_byte2[3:0]
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:603$2'.
     1/1: $1\sel_byte1[3:0]
Creating decoders for process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:585$1'.
     1/1: $1\sel_byte0[3:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\or1200_mem2reg.\aligned' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:794$9'.
Latch inferred for signal `\or1200_mem2reg.\regdata_hh' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:761$8': $auto$proc_dlatch.cc:427:proc_dlatch$117
No latch inferred for signal `\or1200_mem2reg.\regdata_hl' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:732$7'.
No latch inferred for signal `\or1200_mem2reg.\regdata_lh' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:700$6'.
No latch inferred for signal `\or1200_mem2reg.\regdata_ll' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:677$5'.
No latch inferred for signal `\or1200_mem2reg.\sel_byte3' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:651$4'.
No latch inferred for signal `\or1200_mem2reg.\sel_byte2' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:625$3'.
No latch inferred for signal `\or1200_mem2reg.\sel_byte1' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:603$2'.
No latch inferred for signal `\or1200_mem2reg.\sel_byte0' from process `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:585$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:794$9'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:794$9'.
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:761$8'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:761$8'.
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:732$7'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:732$7'.
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:700$6'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:700$6'.
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:677$5'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:677$5'.
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:651$4'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:651$4'.
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:625$3'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:625$3'.
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:603$2'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:603$2'.
Found and cleaned up 1 empty switch in `\or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:585$1'.
Removing empty process `or1200_mem2reg.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_mem2reg.v:585$1'.
Cleaned up 9 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_mem2reg.
<suppressed ~14 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_mem2reg.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_mem2reg'.
<suppressed ~54 debug messages>
Removed a total of 18 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_mem2reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/5 on $pmux $procmux$10.
    dead port 2/5 on $pmux $procmux$10.
    dead port 3/5 on $pmux $procmux$10.
    dead port 4/5 on $pmux $procmux$10.
    dead port 5/5 on $pmux $procmux$10.
Removed 5 multiplexer ports.
<suppressed ~8 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_mem2reg.
    New ctrl vector for $pmux cell $procmux$54: { $auto$opt_reduce.cc:134:opt_mux$123 $auto$opt_reduce.cc:134:opt_mux$121 $procmux$75_CMP $auto$opt_reduce.cc:134:opt_mux$119 $procmux$66_CMP }
    New ctrl vector for $pmux cell $procmux$72: { $procmux$76_CMP $auto$opt_reduce.cc:134:opt_mux$125 $procmux$73_CMP }
    New ctrl vector for $pmux cell $procmux$44: { $auto$opt_reduce.cc:134:opt_mux$131 $auto$opt_reduce.cc:134:opt_mux$129 $procmux$75_CMP $auto$opt_reduce.cc:134:opt_mux$127 $procmux$66_CMP }
    New ctrl vector for $pmux cell $procmux$16: { $procmux$21_CMP $procmux$20_CMP $procmux$19_CMP $procmux$18_CMP $procmux$17_CMP }
  Optimizing cells in module \or1200_mem2reg.
Performed a total of 4 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_mem2reg'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_mem2reg..
Removed 5 unused cells and 61 unused wires.
<suppressed ~7 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_mem2reg.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_mem2reg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_mem2reg.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_mem2reg'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_mem2reg..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_mem2reg.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== or1200_mem2reg ===

   Number of wires:                 57
   Number of wire bits:            178
   Number of public wires:          13
   Number of public wire bits:     127
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 52
     $and                            5
     $dlatch                         8
     $eq                           104
     $logic_not                     16
     $not                            6
     $pmux                          48
     $reduce_or                      8

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 59b0d566cc, CPU: user 0.08s system 0.00s, MEM: 11.87 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 2x read_verilog (0 sec), 22% 4x opt_expr (0 sec), ...
