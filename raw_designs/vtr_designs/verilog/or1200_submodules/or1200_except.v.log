
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v' to AST representation.
Warning: Literal has a width of 3 bit, but value requires 4 bit. (/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:838)
Warning: Literal has a width of 3 bit, but value requires 4 bit. (/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:843)
Generating RTLIL representation for module `\or1200_except'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: or1200_except       
Automatically selected or1200_except as design top module.

2.2. Analyzing design hierarchy..
Top module:  \or1200_except

2.3. Analyzing design hierarchy..
Top module:  \or1200_except
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 7 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93 in module or1200_except.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:785$85 in module or1200_except.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81 in module or1200_except.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:740$79 in module or1200_except.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:724$77 in module or1200_except.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:701$75 in module or1200_except.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
     1/7: $0\extend_flush_last[0:0]
     2/7: $0\state[2:0]
     3/7: $0\except_type[3:0]
     4/7: $0\extend_flush[0:0]
     5/7: $0\esr[15:0]
     6/7: $0\eear[31:0]
     7/7: $0\epcr[31:0]
Creating decoders for process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:785$85'.
     1/1: $0\wb_pc[31:0]
Creating decoders for process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81'.
     1/5: $0\delayed2_ex_dslot[0:0]
     2/5: $0\delayed1_ex_dslot[0:0]
     3/5: $0\ex_dslot[0:0]
     4/5: $0\ex_exceptflags[2:0]
     5/5: $0\ex_pc[31:0]
Creating decoders for process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:740$79'.
     1/1: $0\delayed_tee[2:0]
Creating decoders for process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:724$77'.
     1/1: $0\delayed_iee[2:0]
Creating decoders for process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:701$75'.
     1/2: $0\id_exceptflags[2:0]
     2/2: $0\id_pc[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\or1200_except.\epcr' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
  created $dff cell `$procdff$352' with positive edge clock.
Creating register for signal `\or1200_except.\eear' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
  created $dff cell `$procdff$353' with positive edge clock.
Creating register for signal `\or1200_except.\esr' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
  created $dff cell `$procdff$354' with positive edge clock.
Creating register for signal `\or1200_except.\extend_flush' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
  created $dff cell `$procdff$355' with positive edge clock.
Creating register for signal `\or1200_except.\except_type' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
  created $dff cell `$procdff$356' with positive edge clock.
Creating register for signal `\or1200_except.\state' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
  created $dff cell `$procdff$357' with positive edge clock.
Creating register for signal `\or1200_except.\extend_flush_last' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
  created $dff cell `$procdff$358' with positive edge clock.
Creating register for signal `\or1200_except.\wb_pc' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:785$85'.
  created $dff cell `$procdff$359' with positive edge clock.
Creating register for signal `\or1200_except.\ex_pc' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81'.
  created $dff cell `$procdff$360' with positive edge clock.
Creating register for signal `\or1200_except.\ex_exceptflags' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81'.
  created $dff cell `$procdff$361' with positive edge clock.
Creating register for signal `\or1200_except.\ex_dslot' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81'.
  created $dff cell `$procdff$362' with positive edge clock.
Creating register for signal `\or1200_except.\delayed1_ex_dslot' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81'.
  created $dff cell `$procdff$363' with positive edge clock.
Creating register for signal `\or1200_except.\delayed2_ex_dslot' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81'.
  created $dff cell `$procdff$364' with positive edge clock.
Creating register for signal `\or1200_except.\delayed_tee' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:740$79'.
  created $dff cell `$procdff$365' with positive edge clock.
Creating register for signal `\or1200_except.\delayed_iee' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:724$77'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `\or1200_except.\id_pc' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:701$75'.
  created $dff cell `$procdff$367' with positive edge clock.
Creating register for signal `\or1200_except.\id_exceptflags' using process `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:701$75'.
  created $dff cell `$procdff$368' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 12 empty switches in `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
Removing empty process `or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:812$93'.
Found and cleaned up 2 empty switches in `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:785$85'.
Removing empty process `or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:785$85'.
Found and cleaned up 4 empty switches in `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81'.
Removing empty process `or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:751$81'.
Found and cleaned up 2 empty switches in `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:740$79'.
Removing empty process `or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:740$79'.
Found and cleaned up 2 empty switches in `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:724$77'.
Removing empty process `or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:724$77'.
Found and cleaned up 3 empty switches in `\or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:701$75'.
Removing empty process `or1200_except.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_except.v:701$75'.
Cleaned up 25 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_except.
<suppressed ~29 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_except.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_except'.
<suppressed ~87 debug messages>
Removed a total of 29 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_except..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~18 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_except.
    New ctrl vector for $pmux cell $procmux$158: { $procmux$260_CMP $auto$opt_reduce.cc:134:opt_mux$370 }
    New ctrl vector for $pmux cell $procmux$126: { $auto$opt_reduce.cc:134:opt_mux$372 $procmux$181_CMP }
  Optimizing cells in module \or1200_except.
Performed a total of 2 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_except'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$368 ($dff) from module or1200_except (D = $procmux$336_Y, Q = \id_exceptflags, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$373 ($sdff) from module or1200_except (D = { \sig_ibuserr \sig_itlbmiss \sig_immufault }, Q = \id_exceptflags).
Adding SRST signal on $procdff$367 ($dff) from module or1200_except (D = $procmux$344_Y, Q = \id_pc, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$377 ($sdff) from module or1200_except (D = \if_pc, Q = \id_pc).
Adding SRST signal on $procdff$366 ($dff) from module or1200_except (D = $procmux$331_Y [0], Q = \delayed_iee [0], rval = 1'0).
Adding SRST signal on $procdff$366 ($dff) from module or1200_except (D = \delayed_iee [1:0], Q = \delayed_iee [2:1], rval = 2'00).
Adding SRST signal on $procdff$365 ($dff) from module or1200_except (D = $procmux$325_Y [0], Q = \delayed_tee [0], rval = 1'0).
Adding SRST signal on $procdff$365 ($dff) from module or1200_except (D = \delayed_tee [1:0], Q = \delayed_tee [2:1], rval = 2'00).
Adding SRST signal on $procdff$364 ($dff) from module or1200_except (D = $procmux$272_Y, Q = \delayed2_ex_dslot, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$393 ($sdff) from module or1200_except (D = $procmux$272_Y, Q = \delayed2_ex_dslot).
Adding SRST signal on $procdff$363 ($dff) from module or1200_except (D = $procmux$283_Y, Q = \delayed1_ex_dslot, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$399 ($sdff) from module or1200_except (D = $procmux$283_Y, Q = \delayed1_ex_dslot).
Adding SRST signal on $procdff$362 ($dff) from module or1200_except (D = $procmux$291_Y, Q = \ex_dslot, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$405 ($sdff) from module or1200_except (D = \branch_taken, Q = \ex_dslot).
Adding SRST signal on $procdff$352 ($dff) from module or1200_except (D = $procmux$259_Y, Q = \epcr, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$409 ($sdff) from module or1200_except (D = $procmux$257_Y, Q = \epcr).
Adding SRST signal on $procdff$353 ($dff) from module or1200_except (D = $procmux$232_Y, Q = \eear, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$419 ($sdff) from module or1200_except (D = $procmux$230_Y, Q = \eear).
Adding SRST signal on $procdff$354 ($dff) from module or1200_except (D = $procmux$205_Y, Q = \esr, rval = 16'0000000000000001).
Adding EN signal on $auto$ff.cc:262:slice$433 ($sdff) from module or1200_except (D = $procmux$203_Y, Q = \esr).
Adding SRST signal on $procdff$355 ($dff) from module or1200_except (D = $procmux$180_Y, Q = \extend_flush, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$441 ($sdff) from module or1200_except (D = $procmux$180_Y, Q = \extend_flush).
Adding SRST signal on $procdff$356 ($dff) from module or1200_except (D = $procmux$158_Y, Q = \except_type, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$449 ($sdff) from module or1200_except (D = $procmux$158_Y, Q = \except_type).
Adding SRST signal on $procdff$357 ($dff) from module or1200_except (D = $procmux$138_Y, Q = \state, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$459 ($sdff) from module or1200_except (D = $procmux$138_Y, Q = \state).
Adding SRST signal on $procdff$358 ($dff) from module or1200_except (D = $procmux$126_Y, Q = \extend_flush_last, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$469 ($sdff) from module or1200_except (D = $procmux$126_Y, Q = \extend_flush_last).
Adding SRST signal on $procdff$359 ($dff) from module or1200_except (D = $procmux$264_Y, Q = \wb_pc, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$477 ($sdff) from module or1200_except (D = \ex_pc, Q = \wb_pc).
Adding SRST signal on $procdff$360 ($dff) from module or1200_except (D = $procmux$316_Y, Q = \ex_pc, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$479 ($sdff) from module or1200_except (D = $procmux$316_Y, Q = \ex_pc).
Adding SRST signal on $procdff$361 ($dff) from module or1200_except (D = $procmux$302_Y, Q = \ex_exceptflags, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$485 ($sdff) from module or1200_except (D = \id_exceptflags, Q = \ex_exceptflags).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_except..
Removed 65 unused cells and 219 unused wires.
<suppressed ~71 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_except.
<suppressed ~7 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_except..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_except.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_except'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_except..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_except.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_except..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_except.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_except'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_except..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_except.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== or1200_except ===

   Number of wires:                176
   Number of wire bits:           1194
   Number of public wires:          62
   Number of public wire bits:     494
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                162
     $and                           45
     $eq                            12
     $logic_and                      3
     $logic_not                      7
     $mux                          645
     $ne                            20
     $not                           20
     $or                             8
     $pmux                           8
     $reduce_and                    21
     $reduce_bool                   24
     $reduce_or                     27
     $sdff                           3
     $sdffe                        191

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: aa8d3ea83f, CPU: user 0.13s system 0.00s, MEM: 13.89 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 29% 5x opt_expr (0 sec), 16% 3x opt_dff (0 sec), ...
