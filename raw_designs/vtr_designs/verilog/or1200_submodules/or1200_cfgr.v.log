
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_cfgr.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_cfgr.v' to AST representation.
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\or1200_cfgr'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_cfgr.v:577.1-664.10 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: or1200_cfgr         
Automatically selected or1200_cfgr as design top module.

2.2. Analyzing design hierarchy..
Top module:  \or1200_cfgr

2.3. Analyzing design hierarchy..
Top module:  \or1200_cfgr
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_cfgr.v:577$1 in module or1200_cfgr.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\or1200_cfgr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_cfgr.v:577$1'.
     1/19: $2\spr_dat_o[31:0] [31:24]
     2/19: $2\spr_dat_o[31:0] [12]
     3/19: $2\spr_dat_o[31:0] [11]
     4/19: $2\spr_dat_o[31:0] [10]
     5/19: $2\spr_dat_o[31:0] [9]
     6/19: $2\spr_dat_o[31:0] [14]
     7/19: $2\spr_dat_o[31:0] [7]
     8/19: $2\spr_dat_o[31:0] [6]
     9/19: $2\spr_dat_o[31:0] [2]
    10/19: $2\spr_dat_o[31:0] [0]
    11/19: $2\spr_dat_o[31:0] [16:15]
    12/19: $2\spr_dat_o[31:0] [13]
    13/19: $2\spr_dat_o[31:0] [4]
    14/19: $2\spr_dat_o[31:0] [3]
    15/19: $2\spr_dat_o[31:0] [1]
    16/19: $2\spr_dat_o[31:0] [8]
    17/19: $2\spr_dat_o[31:0] [23:17]
    18/19: $2\spr_dat_o[31:0] [5]
    19/19: $1\spr_dat_o[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\or1200_cfgr.\spr_dat_o' from process `\or1200_cfgr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_cfgr.v:577$1': $auto$proc_dlatch.cc:427:proc_dlatch$215

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\or1200_cfgr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_cfgr.v:577$1'.
Removing empty process `or1200_cfgr.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_cfgr.v:577$1'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_cfgr.
<suppressed ~45 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_cfgr.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_cfgr'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_cfgr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_cfgr.
    New ctrl vector for $pmux cell $procmux$76: $auto$opt_reduce.cc:134:opt_mux$217
    New ctrl vector for $pmux cell $procmux$197: $auto$opt_reduce.cc:134:opt_mux$219
    New ctrl vector for $pmux cell $procmux$108: $auto$opt_reduce.cc:134:opt_mux$221
    New ctrl vector for $pmux cell $procmux$138: $auto$opt_reduce.cc:134:opt_mux$223
    New ctrl vector for $pmux cell $procmux$55: $auto$opt_reduce.cc:134:opt_mux$225
    New ctrl vector for $pmux cell $procmux$95: $auto$opt_reduce.cc:134:opt_mux$227
    New ctrl vector for $pmux cell $procmux$128: $auto$opt_reduce.cc:134:opt_mux$229
    New ctrl vector for $pmux cell $procmux$44: $auto$opt_reduce.cc:134:opt_mux$231
    New ctrl vector for $pmux cell $procmux$84: $auto$opt_reduce.cc:134:opt_mux$233
    New ctrl vector for $pmux cell $procmux$147: $auto$opt_reduce.cc:134:opt_mux$235
  Optimizing cells in module \or1200_cfgr.
Performed a total of 10 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_cfgr'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_cfgr..
Removed 2 unused cells and 85 unused wires.
<suppressed ~3 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_cfgr.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_cfgr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_cfgr.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_cfgr'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 11 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 12 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 14 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 15 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 16 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 17 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 18 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 19 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 20 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 21 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 22 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.
Setting constant 0-bit at position 23 on $auto$proc_dlatch.cc:427:proc_dlatch$215 ($dlatch) from module or1200_cfgr.

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_cfgr..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_cfgr.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_cfgr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_cfgr.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_cfgr'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_cfgr..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_cfgr.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== or1200_cfgr ===

   Number of wires:                 19
   Number of wire bits:            112
   Number of public wires:           2
   Number of public wire bits:      64
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $dlatch                        20
     $eq                            24
     $logic_not                      4
     $mux                           17
     $reduce_or                     51

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: d03116c2c9, CPU: user 0.04s system 0.00s, MEM: 11.97 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 5x opt_expr (0 sec), 22% 2x read_verilog (0 sec), ...
