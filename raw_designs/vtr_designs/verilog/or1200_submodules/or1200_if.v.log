
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v' to AST representation.
Generating RTLIL representation for module `\or1200_if'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: or1200_if           
Automatically selected or1200_if as design top module.

2.2. Analyzing design hierarchy..
Top module:  \or1200_if

2.3. Analyzing design hierarchy..
Top module:  \or1200_if
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:651$35 in module or1200_if.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:638$30 in module or1200_if.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:625$25 in module or1200_if.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:651$35'.
     1/1: $0\addr_saved[31:0]
Creating decoders for process `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:638$30'.
     1/1: $0\insn_saved[31:0]
Creating decoders for process `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:625$25'.
     1/1: $0\saved[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\or1200_if.\addr_saved' using process `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:651$35'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\or1200_if.\insn_saved' using process `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:638$30'.
  created $dff cell `$procdff$74' with positive edge clock.
Creating register for signal `\or1200_if.\saved' using process `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:625$25'.
  created $dff cell `$procdff$75' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:651$35'.
Removing empty process `or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:651$35'.
Found and cleaned up 4 empty switches in `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:638$30'.
Removing empty process `or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:638$30'.
Found and cleaned up 4 empty switches in `\or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:625$25'.
Removing empty process `or1200_if.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_if.v:625$25'.
Cleaned up 12 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_if.
<suppressed ~3 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_if.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_if'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_if..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_if.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_if'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$73 ($dff) from module or1200_if (D = $procmux$43_Y, Q = \addr_saved, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$76 ($sdff) from module or1200_if (D = $procmux$43_Y, Q = \addr_saved).
Adding SRST signal on $procdff$74 ($dff) from module or1200_if (D = $procmux$54_Y, Q = \insn_saved, rval = 339804160).
Adding EN signal on $auto$ff.cc:262:slice$82 ($sdff) from module or1200_if (D = $procmux$54_Y, Q = \insn_saved).
Adding SRST signal on $procdff$75 ($dff) from module or1200_if (D = $procmux$65_Y, Q = \saved, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$88 ($sdff) from module or1200_if (D = $procmux$65_Y, Q = \saved).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_if..
Removed 7 unused cells and 40 unused wires.
<suppressed ~8 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_if.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_if..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_if.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_if'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_if..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_if.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_if..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_if.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_if'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_if..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_if.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== or1200_if ===

   Number of wires:                 46
   Number of wire bits:            421
   Number of public wires:          21
   Number of public wire bits:     210
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 35
     $and                           11
     $eq                            12
     $logic_not                      4
     $mux                          258
     $ne                             2
     $or                             2
     $reduce_or                      2
     $sdffe                         65

End of script. Logfile hash: df6d07acd4, CPU: user 0.05s system 0.00s, MEM: 11.76 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 4x opt_merge (0 sec), 24% 5x opt_expr (0 sec), ...
