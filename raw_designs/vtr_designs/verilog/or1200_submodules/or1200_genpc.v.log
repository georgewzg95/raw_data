
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v' to AST representation.
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\or1200_genpc'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:650.1-741.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: or1200_genpc        
Automatically selected or1200_genpc as design top module.

2.2. Analyzing design hierarchy..
Top module:  \or1200_genpc

2.3. Analyzing design hierarchy..
Top module:  \or1200_genpc
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:746$26 in module or1200_genpc.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:650$11 in module or1200_genpc.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:639$10 in module or1200_genpc.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:746$26'.
     1/1: $0\pcreg[29:0]
Creating decoders for process `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:650$11'.
     1/6: $3\taken[0:0]
     2/6: $3\pc[31:0]
     3/6: $2\taken[0:0]
     4/6: $2\pc[31:0]
     5/6: $1\taken[0:0]
     6/6: $1\pc[31:0]
Creating decoders for process `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:639$10'.
     1/1: $0\genpc_refetch_r[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\or1200_genpc.\taken' from process `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:650$11'.
No latch inferred for signal `\or1200_genpc.\pc' from process `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:650$11'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\or1200_genpc.\pcreg' using process `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:746$26'.
  created $dff cell `$procdff$150' with positive edge clock.
Creating register for signal `\or1200_genpc.\genpc_refetch_r' using process `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:639$10'.
  created $dff cell `$procdff$151' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:746$26'.
Removing empty process `or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:746$26'.
Found and cleaned up 3 empty switches in `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:650$11'.
Removing empty process `or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:650$11'.
Found and cleaned up 2 empty switches in `\or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:639$10'.
Removing empty process `or1200_genpc.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/or1200_submodules/or1200_genpc.v:639$10'.
Cleaned up 8 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_genpc.
<suppressed ~3 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_genpc.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_genpc'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_genpc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$109.
    dead port 2/2 on $mux $procmux$93.
    dead port 2/2 on $mux $procmux$77.
    dead port 2/2 on $mux $procmux$62.
Removed 4 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_genpc.
    New ctrl vector for $pmux cell $procmux$112: { $procmux$139_CMP $procmux$138_CMP $auto$opt_reduce.cc:134:opt_mux$153 }
  Optimizing cells in module \or1200_genpc.
Performed a total of 1 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_genpc'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$151 ($dff) from module or1200_genpc (D = $procmux$145_Y, Q = \genpc_refetch_r, rval = 1'0).
Adding EN signal on $procdff$150 ($dff) from module or1200_genpc (D = $procmux$47_Y, Q = \pcreg).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_genpc..
Removed 6 unused cells and 66 unused wires.
<suppressed ~9 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_genpc.
<suppressed ~1 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_genpc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_genpc.
    New ctrl vector for $pmux cell $procmux$128: { $procmux$143_CMP $procmux$126_CMP $procmux$125_CMP $procmux$124_CMP $procmux$110_CMP $procmux$122_CMP $procmux$121_CMP $auto$opt_reduce.cc:134:opt_mux$159 }
  Optimizing cells in module \or1200_genpc.
Performed a total of 1 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_genpc'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_genpc..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_genpc.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \or1200_genpc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \or1200_genpc.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\or1200_genpc'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \or1200_genpc..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module or1200_genpc.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== or1200_genpc ===

   Number of wires:                 69
   Number of wire bits:            649
   Number of public wires:          26
   Number of public wire bits:     310
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 47
     $add                           60
     $and                            5
     $dffe                          30
     $eq                            70
     $logic_not                     11
     $mux                          208
     $or                             3
     $pmux                          33
     $reduce_bool                    3
     $reduce_or                     20
     $sub                           36

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: a4cda963da, CPU: user 0.11s system 0.00s, MEM: 11.89 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 30% 5x opt_expr (0 sec), 15% 3x opt_clean (0 sec), ...
