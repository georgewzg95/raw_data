
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v' to AST representation.
Warning: Encountered `full_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `full_case' attribute or the SystemVerilog `unique' or `unique0' keywords is recommended!
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\fpu_mul'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:215.1-216.22 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\mul_r2'.
Generating RTLIL representation for module `\pre_norm_fmul'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:532.1-538.11 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: pre_norm_fmul       
root of   0 design levels: mul_r2              
root of   1 design levels: fpu_mul             
Automatically selected fpu_mul as design top module.

2.2. Analyzing design hierarchy..
Top module:  \fpu_mul
Used module:     \mul_r2
Used module:     \pre_norm_fmul

2.3. Analyzing design hierarchy..
Top module:  \fpu_mul
Used module:     \mul_r2
Used module:     \pre_norm_fmul
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:532$267 in module pre_norm_fmul.
Removed a total of 1 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 50 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:543$269'.
Creating decoders for process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:540$268'.
Creating decoders for process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:532$267'.
     1/1: $1\sign_d[0:0]
Creating decoders for process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:522$262'.
Creating decoders for process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:519$261'.
Creating decoders for process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:511$236'.
Creating decoders for process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:502$214'.
Creating decoders for process `\mul_r2.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:426$187'.
Creating decoders for process `\mul_r2.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:423$185'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:397$178'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:394$174'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:391$173'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:376$143'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:367$123'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:363$122'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:360$121'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:323$103'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:320$102'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:314$94'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:303$66'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:294$46'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:277$24'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:226$19'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:221$18'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:218$17'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:215$16'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:211$15'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:208$14'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:181$13'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:178$12'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:175$11'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:172$10'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:114$9'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:111$8'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:108$7'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:105$6'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:102$5'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:99$4'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:96$3'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:93$2'.
Creating decoders for process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:89$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\pre_norm_fmul.\sign_d' from process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:532$267'.
No latch inferred for signal `\fpu_mul.\fract_denorm' from process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:215$16'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pre_norm_fmul.\sign_exe' using process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:543$269'.
  created $dff cell `$procdff$276' with positive edge clock.
Creating register for signal `\pre_norm_fmul.\sign' using process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:540$268'.
  created $dff cell `$procdff$277' with positive edge clock.
Creating register for signal `\pre_norm_fmul.\inf' using process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:522$262'.
  created $dff cell `$procdff$278' with positive edge clock.
Creating register for signal `\pre_norm_fmul.\underflow' using process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:519$261'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `\pre_norm_fmul.\exp_ovf' using process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:511$236'.
  created $dff cell `$procdff$280' with positive edge clock.
Creating register for signal `\pre_norm_fmul.\exp_out' using process `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:502$214'.
  created $dff cell `$procdff$281' with positive edge clock.
Creating register for signal `\mul_r2.\prod' using process `\mul_r2.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:426$187'.
  created $dff cell `$procdff$282' with positive edge clock.
Creating register for signal `\mul_r2.\prod1' using process `\mul_r2.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:423$185'.
  created $dff cell `$procdff$283' with positive edge clock.
Creating register for signal `\fpu_mul.\out' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$284' with positive edge clock.
Creating register for signal `\fpu_mul.\zero' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$285' with positive edge clock.
Creating register for signal `\fpu_mul.\div_by_zero' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$286' with positive edge clock.
Creating register for signal `\fpu_mul.\overflow' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$287' with positive edge clock.
Creating register for signal `\fpu_mul.\underflow' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$288' with positive edge clock.
Creating register for signal `\fpu_mul.\inf' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$289' with positive edge clock.
Creating register for signal `\fpu_mul.\snan' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$290' with positive edge clock.
Creating register for signal `\fpu_mul.\qnan' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$291' with positive edge clock.
Creating register for signal `\fpu_mul.\ine' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
  created $dff cell `$procdff$292' with positive edge clock.
Creating register for signal `\fpu_mul.\div_by_zero_o1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:397$178'.
  created $dff cell `$procdff$293' with positive edge clock.
Creating register for signal `\fpu_mul.\opa_nan_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:394$174'.
  created $dff cell `$procdff$294' with positive edge clock.
Creating register for signal `\fpu_mul.\zero_o1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:391$173'.
  created $dff cell `$procdff$295' with positive edge clock.
Creating register for signal `\fpu_mul.\inf_o1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:376$143'.
  created $dff cell `$procdff$296' with positive edge clock.
Creating register for signal `\fpu_mul.\qnan_o1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:367$123'.
  created $dff cell `$procdff$297' with positive edge clock.
Creating register for signal `\fpu_mul.\snan_o1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:363$122'.
  created $dff cell `$procdff$298' with positive edge clock.
Creating register for signal `\fpu_mul.\underflow_o1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:360$121'.
  created $dff cell `$procdff$299' with positive edge clock.
Creating register for signal `\fpu_mul.\underflow_fmul_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:323$103'.
  created $dff cell `$procdff$300' with positive edge clock.
Creating register for signal `\fpu_mul.\overflow_o1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:320$102'.
  created $dff cell `$procdff$301' with positive edge clock.
Creating register for signal `\fpu_mul.\ine_o1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:314$94'.
  created $dff cell `$procdff$302' with positive edge clock.
Creating register for signal `\fpu_mul.\out_o1 [31]' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:303$66'.
  created $dff cell `$procdff$303' with positive edge clock.
Creating register for signal `\fpu_mul.\out_o1 [30:0]' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:294$46'.
  created $dff cell `$procdff$304' with positive edge clock.
Creating register for signal `\fpu_mul.\inf_mul2' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:277$24'.
  created $dff cell `$procdff$305' with positive edge clock.
Creating register for signal `\fpu_mul.\sign' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:226$19'.
  created $dff cell `$procdff$306' with positive edge clock.
Creating register for signal `\fpu_mul.\opas_r2' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:221$18'.
  created $dff cell `$procdff$307' with positive edge clock.
Creating register for signal `\fpu_mul.\opas_r1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:218$17'.
  created $dff cell `$procdff$308' with positive edge clock.
Creating register for signal `\fpu_mul.\opa_r1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:211$15'.
  created $dff cell `$procdff$309' with positive edge clock.
Creating register for signal `\fpu_mul.\exp_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:208$14'.
  created $dff cell `$procdff$310' with positive edge clock.
Creating register for signal `\fpu_mul.\exp_ovf_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:181$13'.
  created $dff cell `$procdff$311' with positive edge clock.
Creating register for signal `\fpu_mul.\inf_mul_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:178$12'.
  created $dff cell `$procdff$312' with positive edge clock.
Creating register for signal `\fpu_mul.\sign_exe_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:175$11'.
  created $dff cell `$procdff$313' with positive edge clock.
Creating register for signal `\fpu_mul.\sign_mul_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:172$10'.
  created $dff cell `$procdff$314' with positive edge clock.
Creating register for signal `\fpu_mul.\fpu_op_r3' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:114$9'.
  created $dff cell `$procdff$315' with positive edge clock.
Creating register for signal `\fpu_mul.\fpu_op_r2' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:111$8'.
  created $dff cell `$procdff$316' with positive edge clock.
Creating register for signal `\fpu_mul.\fpu_op_r1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:108$7'.
  created $dff cell `$procdff$317' with positive edge clock.
Creating register for signal `\fpu_mul.\rmode_r3' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:105$6'.
  created $dff cell `$procdff$318' with positive edge clock.
Creating register for signal `\fpu_mul.\rmode_r2' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:102$5'.
  created $dff cell `$procdff$319' with positive edge clock.
Creating register for signal `\fpu_mul.\rmode_r1' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:99$4'.
  created $dff cell `$procdff$320' with positive edge clock.
Creating register for signal `\fpu_mul.\opb_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:96$3'.
  created $dff cell `$procdff$321' with positive edge clock.
Creating register for signal `\fpu_mul.\opa_r' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:93$2'.
  created $dff cell `$procdff$322' with positive edge clock.
Creating register for signal `\fpu_mul.\fpu_op' using process `\fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:89$1'.
  created $dff cell `$procdff$323' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:543$269'.
Removing empty process `pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:540$268'.
Found and cleaned up 1 empty switch in `\pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:532$267'.
Removing empty process `pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:532$267'.
Removing empty process `pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:522$262'.
Removing empty process `pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:519$261'.
Removing empty process `pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:511$236'.
Removing empty process `pre_norm_fmul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:502$214'.
Removing empty process `mul_r2.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:426$187'.
Removing empty process `mul_r2.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:423$185'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:402$184'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:397$178'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:394$174'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:391$173'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:376$143'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:367$123'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:363$122'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:360$121'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:323$103'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:320$102'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:314$94'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:303$66'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:294$46'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:277$24'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:226$19'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:221$18'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:218$17'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:215$16'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:211$15'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:208$14'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:181$13'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:178$12'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:175$11'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:172$10'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:114$9'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:111$8'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:108$7'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:105$6'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:102$5'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:99$4'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:96$3'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:93$2'.
Removing empty process `fpu_mul.$proc$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:89$1'.
Cleaned up 1 empty switch.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pre_norm_fmul.
<suppressed ~9 debug messages>
Optimizing module mul_r2.
Optimizing module fpu_mul.
<suppressed ~5 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pre_norm_fmul.
Optimizing module mul_r2.
Optimizing module fpu_mul.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pre_norm_fmul'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mul_r2'.
Finding identical cells in module `\fpu_mul'.
<suppressed ~108 debug messages>
Removed a total of 40 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pre_norm_fmul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mul_r2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \fpu_mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $ternary$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:301$65.
    dead port 2/2 on $mux $ternary$/home/zhigang/DATA/raw_designs/vtr_designs/verilog/bgm_submodules/fpu_mul.v:301$65.
Removed 2 multiplexer ports.
<suppressed ~11 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pre_norm_fmul.
    New ctrl vector for $pmux cell $procmux$271: { $auto$opt_reduce.cc:134:opt_mux$327 $auto$opt_reduce.cc:134:opt_mux$325 }
  Optimizing cells in module \pre_norm_fmul.
  Optimizing cells in module \mul_r2.
  Optimizing cells in module \fpu_mul.
Performed a total of 1 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pre_norm_fmul'.
Finding identical cells in module `\mul_r2'.
Finding identical cells in module `\fpu_mul'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$320 ($dff) from module fpu_mul.
Setting constant 0-bit at position 1 on $procdff$320 ($dff) from module fpu_mul.
Setting constant 0-bit at position 0 on $procdff$323 ($dff) from module fpu_mul.
Setting constant 1-bit at position 1 on $procdff$323 ($dff) from module fpu_mul.
Setting constant 0-bit at position 2 on $procdff$323 ($dff) from module fpu_mul.

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pre_norm_fmul..
Finding unused cells or wires in module \mul_r2..
Finding unused cells or wires in module \fpu_mul..
Removed 7 unused cells and 171 unused wires.
<suppressed ~37 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_mul.
Optimizing module mul_r2.
Optimizing module pre_norm_fmul.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mul_r2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pre_norm_fmul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_mul.
  Optimizing cells in module \mul_r2.
  Optimizing cells in module \pre_norm_fmul.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_mul'.
Finding identical cells in module `\mul_r2'.
Finding identical cells in module `\pre_norm_fmul'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$319 ($dff) from module fpu_mul.
Setting constant 0-bit at position 1 on $procdff$319 ($dff) from module fpu_mul.
Setting constant 0-bit at position 0 on $procdff$317 ($dff) from module fpu_mul.
Setting constant 1-bit at position 1 on $procdff$317 ($dff) from module fpu_mul.
Setting constant 0-bit at position 2 on $procdff$317 ($dff) from module fpu_mul.

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_mul..
Finding unused cells or wires in module \mul_r2..
Finding unused cells or wires in module \pre_norm_fmul..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_mul.
<suppressed ~2 debug messages>
Optimizing module mul_r2.
Optimizing module pre_norm_fmul.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mul_r2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pre_norm_fmul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_mul.
  Optimizing cells in module \mul_r2.
  Optimizing cells in module \pre_norm_fmul.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_mul'.
<suppressed ~3 debug messages>
Finding identical cells in module `\mul_r2'.
Finding identical cells in module `\pre_norm_fmul'.
Removed a total of 1 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$318 ($dff) from module fpu_mul.
Setting constant 0-bit at position 1 on $procdff$318 ($dff) from module fpu_mul.
Setting constant 0-bit at position 0 on $procdff$316 ($dff) from module fpu_mul.
Setting constant 1-bit at position 1 on $procdff$316 ($dff) from module fpu_mul.
Setting constant 0-bit at position 2 on $procdff$316 ($dff) from module fpu_mul.

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_mul..
Finding unused cells or wires in module \mul_r2..
Finding unused cells or wires in module \pre_norm_fmul..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_mul.
<suppressed ~10 debug messages>
Optimizing module mul_r2.
Optimizing module pre_norm_fmul.

4.23. Rerunning OPT passes. (Maybe there is more to do..)

4.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mul_r2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pre_norm_fmul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_mul.
  Optimizing cells in module \mul_r2.
  Optimizing cells in module \pre_norm_fmul.
Performed a total of 0 changes.

4.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_mul'.
<suppressed ~6 debug messages>
Finding identical cells in module `\mul_r2'.
Finding identical cells in module `\pre_norm_fmul'.
Removed a total of 2 cells.

4.27. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$315 ($dff) from module fpu_mul.
Setting constant 1-bit at position 1 on $procdff$315 ($dff) from module fpu_mul.
Setting constant 0-bit at position 2 on $procdff$315 ($dff) from module fpu_mul.
Setting constant 0-bit at position 0 on $procdff$294 ($dff) from module fpu_mul.

4.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_mul..
Finding unused cells or wires in module \mul_r2..
Finding unused cells or wires in module \pre_norm_fmul..
Removed 1 unused cells and 12 unused wires.
<suppressed ~2 debug messages>

4.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_mul.
<suppressed ~18 debug messages>
Optimizing module mul_r2.
Optimizing module pre_norm_fmul.

4.30. Rerunning OPT passes. (Maybe there is more to do..)

4.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mul_r2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pre_norm_fmul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_mul.
  Optimizing cells in module \mul_r2.
  Optimizing cells in module \pre_norm_fmul.
Performed a total of 0 changes.

4.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_mul'.
Finding identical cells in module `\mul_r2'.
Finding identical cells in module `\pre_norm_fmul'.
Removed a total of 0 cells.

4.34. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$293 ($dff) from module fpu_mul.

4.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_mul..
Finding unused cells or wires in module \mul_r2..
Finding unused cells or wires in module \pre_norm_fmul..
Removed 3 unused cells and 18 unused wires.
<suppressed ~4 debug messages>

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_mul.
Optimizing module mul_r2.
Optimizing module pre_norm_fmul.

4.37. Rerunning OPT passes. (Maybe there is more to do..)

4.38. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mul_r2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pre_norm_fmul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.39. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_mul.
  Optimizing cells in module \mul_r2.
  Optimizing cells in module \pre_norm_fmul.
Performed a total of 0 changes.

4.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_mul'.
Finding identical cells in module `\mul_r2'.
Finding identical cells in module `\pre_norm_fmul'.
Removed a total of 0 cells.

4.41. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$286 ($dff) from module fpu_mul.

4.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_mul..
Finding unused cells or wires in module \mul_r2..
Finding unused cells or wires in module \pre_norm_fmul..

4.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_mul.
Optimizing module mul_r2.
Optimizing module pre_norm_fmul.

4.44. Rerunning OPT passes. (Maybe there is more to do..)

4.45. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_mul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mul_r2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \pre_norm_fmul..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.46. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_mul.
  Optimizing cells in module \mul_r2.
  Optimizing cells in module \pre_norm_fmul.
Performed a total of 0 changes.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_mul'.
Finding identical cells in module `\mul_r2'.
Finding identical cells in module `\pre_norm_fmul'.
Removed a total of 0 cells.

4.48. Executing OPT_DFF pass (perform DFF optimizations).

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_mul..
Finding unused cells or wires in module \mul_r2..
Finding unused cells or wires in module \pre_norm_fmul..

4.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_mul.
Optimizing module mul_r2.
Optimizing module pre_norm_fmul.

4.51. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== fpu_mul ===

   Number of wires:                151
   Number of wire bits:            696
   Number of public wires:          91
   Number of public wire bits:     606
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     $and                           21
     $dff                           28
     $eq                             1
     $logic_not                     15
     $mux                            3
     $or                            29
     $reduce_and                     1
     $reduce_bool                    1
     $reduce_or                      2
     except                          1
     mul_r2                          1
     post_norm                       1
     pre_norm_fmul                   1

=== mul_r2 ===

   Number of wires:                  6
   Number of wire bits:            193
   Number of public wires:           5
   Number of public wire bits:     145
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dff                            2
     $mul                            1

=== pre_norm_fmul ===

   Number of wires:                 82
   Number of wire bits:            349
   Number of public wires:          34
   Number of public wire bits:     227
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     $add                            4
     $and                           15
     $dff                            6
     $eq                             5
     $gt                             1
     $logic_not                      9
     $lt                             1
     $mux                           13
     $or                             8
     $pmux                           1
     $reduce_or                      8
     $sub                            4

=== design hierarchy ===

   fpu_mul                           1
     mul_r2                          1
     pre_norm_fmul                   1

   Number of wires:                239
   Number of wire bits:           1238
   Number of public wires:         130
   Number of public wire bits:     978
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                181
     $add                            4
     $and                           36
     $dff                           36
     $eq                             6
     $gt                             1
     $logic_not                     24
     $lt                             1
     $mul                            1
     $mux                           16
     $or                            37
     $pmux                           1
     $reduce_and                     1
     $reduce_bool                    1
     $reduce_or                     10
     $sub                            4
     except                          1
     post_norm                       1

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 7e990d44d4, CPU: user 0.27s system 0.00s, MEM: 13.30 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 9x opt_expr (0 sec), 21% 7x opt_clean (0 sec), ...
