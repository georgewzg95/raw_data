
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/bgm_submodules/pri_encoder.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/bgm_submodules/pri_encoder.v' to AST representation.
Generating RTLIL representation for module `\pri_encoder'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/bgm_submodules/pri_encoder.v:12.1-112.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: pri_encoder         
Automatically selected pri_encoder as design top module.

2.2. Analyzing design hierarchy..
Top module:  \pri_encoder

2.3. Analyzing design hierarchy..
Top module:  \pri_encoder
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 49 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/bgm_submodules/pri_encoder.v:12$1 in module pri_encoder.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pri_encoder.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/bgm_submodules/pri_encoder.v:12$1'.
     1/49: $49\fi_ldz_r0[5:0]
     2/49: $48\fi_ldz_r0[5:0]
     3/49: $47\fi_ldz_r0[5:0]
     4/49: $46\fi_ldz_r0[5:0]
     5/49: $45\fi_ldz_r0[5:0]
     6/49: $44\fi_ldz_r0[5:0]
     7/49: $43\fi_ldz_r0[5:0]
     8/49: $42\fi_ldz_r0[5:0]
     9/49: $41\fi_ldz_r0[5:0]
    10/49: $40\fi_ldz_r0[5:0]
    11/49: $39\fi_ldz_r0[5:0]
    12/49: $38\fi_ldz_r0[5:0]
    13/49: $37\fi_ldz_r0[5:0]
    14/49: $36\fi_ldz_r0[5:0]
    15/49: $35\fi_ldz_r0[5:0]
    16/49: $34\fi_ldz_r0[5:0]
    17/49: $33\fi_ldz_r0[5:0]
    18/49: $32\fi_ldz_r0[5:0]
    19/49: $31\fi_ldz_r0[5:0]
    20/49: $30\fi_ldz_r0[5:0]
    21/49: $29\fi_ldz_r0[5:0]
    22/49: $28\fi_ldz_r0[5:0]
    23/49: $27\fi_ldz_r0[5:0]
    24/49: $26\fi_ldz_r0[5:0]
    25/49: $25\fi_ldz_r0[5:0]
    26/49: $24\fi_ldz_r0[5:0]
    27/49: $23\fi_ldz_r0[5:0]
    28/49: $22\fi_ldz_r0[5:0]
    29/49: $21\fi_ldz_r0[5:0]
    30/49: $20\fi_ldz_r0[5:0]
    31/49: $19\fi_ldz_r0[5:0]
    32/49: $18\fi_ldz_r0[5:0]
    33/49: $17\fi_ldz_r0[5:0]
    34/49: $16\fi_ldz_r0[5:0]
    35/49: $15\fi_ldz_r0[5:0]
    36/49: $14\fi_ldz_r0[5:0]
    37/49: $13\fi_ldz_r0[5:0]
    38/49: $12\fi_ldz_r0[5:0]
    39/49: $11\fi_ldz_r0[5:0]
    40/49: $10\fi_ldz_r0[5:0]
    41/49: $9\fi_ldz_r0[5:0]
    42/49: $8\fi_ldz_r0[5:0]
    43/49: $7\fi_ldz_r0[5:0]
    44/49: $6\fi_ldz_r0[5:0]
    45/49: $5\fi_ldz_r0[5:0]
    46/49: $4\fi_ldz_r0[5:0]
    47/49: $3\fi_ldz_r0[5:0]
    48/49: $2\fi_ldz_r0[5:0]
    49/49: $1\fi_ldz_r0[5:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\pri_encoder.\fi_ldz_r0' from process `\pri_encoder.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/bgm_submodules/pri_encoder.v:12$1': $auto$proc_dlatch.cc:427:proc_dlatch$13528

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 49 empty switches in `\pri_encoder.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/bgm_submodules/pri_encoder.v:12$1'.
Removing empty process `pri_encoder.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/bgm_submodules/pri_encoder.v:12$1'.
Cleaned up 49 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pri_encoder.
<suppressed ~3632 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pri_encoder.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pri_encoder'.
<suppressed ~3528 debug messages>
Removed a total of 1176 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pri_encoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pri_encoder.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pri_encoder'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pri_encoder..
Removed 1 unused cells and 6082 unused wires.
<suppressed ~2 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pri_encoder.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pri_encoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pri_encoder.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pri_encoder'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pri_encoder..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pri_encoder.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== pri_encoder ===

   Number of wires:               1371
   Number of wire bits:           1663
   Number of public wires:           3
   Number of public wire bits:      60
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1369
     $and                         1224
     $dlatch                         6
     $eq                          1175
     $logic_not                     48
     $mux                          282
     $not                           49

End of script. Logfile hash: 1612e46622, CPU: user 0.78s system 0.02s, MEM: 36.02 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 34% 4x opt_expr (0 sec), 31% 1x proc_dlatch (0 sec), ...
