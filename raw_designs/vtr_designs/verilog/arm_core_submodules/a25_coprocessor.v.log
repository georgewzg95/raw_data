
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v' to AST representation.
Generating RTLIL representation for module `\a25_coprocessor'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: a25_coprocessor     
Automatically selected a25_coprocessor as design top module.

2.2. Analyzing design hierarchy..
Top module:  \a25_coprocessor

2.3. Analyzing design hierarchy..
Top module:  \a25_coprocessor
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:129$11 in module a25_coprocessor.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:109$3 in module a25_coprocessor.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:79$18'.
  Set init value: \fault_address = 0
Found init rule in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:78$17'.
  Set init value: \fault_status = 8'00000000
Found init rule in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:75$16'.
  Set init value: \disruptive_area = 0
Found init rule in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:69$15'.
  Set init value: \updateable_area = 0
Found init rule in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:64$14'.
  Set init value: \cacheable_area = 0
Found init rule in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:60$13'.
  Set init value: \cache_control = 3'000

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:79$18'.
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:78$17'.
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:75$16'.
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:69$15'.
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:64$14'.
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:60$13'.
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:129$11'.
     1/1: $0\o_copro_read_data[31:0]
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:109$3'.
     1/4: $0\disruptive_area[31:0]
     2/4: $0\updateable_area[31:0]
     3/4: $0\cacheable_area[31:0]
     4/4: $0\cache_control[2:0]
Creating decoders for process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:94$1'.
     1/2: $0\fault_address[31:0]
     2/2: $0\fault_status[7:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\a25_coprocessor.\o_copro_read_data' using process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:129$11'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\a25_coprocessor.\cache_control' using process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:109$3'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\a25_coprocessor.\cacheable_area' using process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:109$3'.
  created $dff cell `$procdff$74' with positive edge clock.
Creating register for signal `\a25_coprocessor.\updateable_area' using process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:109$3'.
  created $dff cell `$procdff$75' with positive edge clock.
Creating register for signal `\a25_coprocessor.\disruptive_area' using process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:109$3'.
  created $dff cell `$procdff$76' with positive edge clock.
Creating register for signal `\a25_coprocessor.\fault_status' using process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:94$1'.
  created $dff cell `$procdff$77' with positive edge clock.
Creating register for signal `\a25_coprocessor.\fault_address' using process `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:94$1'.
  created $dff cell `$procdff$78' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:79$18'.
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:78$17'.
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:75$16'.
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:69$15'.
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:64$14'.
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:60$13'.
Found and cleaned up 2 empty switches in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:129$11'.
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:129$11'.
Found and cleaned up 3 empty switches in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:109$3'.
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:109$3'.
Found and cleaned up 2 empty switches in `\a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:94$1'.
Removing empty process `a25_coprocessor.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_coprocessor.v:94$1'.
Cleaned up 7 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_coprocessor.
<suppressed ~8 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_coprocessor.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_coprocessor'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_coprocessor.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_coprocessor'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$72 ($dff) from module a25_coprocessor (D = $procmux$20_Y, Q = \o_copro_read_data).
Adding EN signal on $procdff$73 ($dff) from module a25_coprocessor (D = \i_copro_write_data [2:0], Q = \cache_control).
Adding EN signal on $procdff$74 ($dff) from module a25_coprocessor (D = \i_copro_write_data, Q = \cacheable_area).
Adding EN signal on $procdff$75 ($dff) from module a25_coprocessor (D = \i_copro_write_data, Q = \updateable_area).
Adding EN signal on $procdff$76 ($dff) from module a25_coprocessor (D = \i_copro_write_data, Q = \disruptive_area).
Adding EN signal on $procdff$77 ($dff) from module a25_coprocessor (D = \i_fault_status, Q = \fault_status).
Adding EN signal on $procdff$78 ($dff) from module a25_coprocessor (D = \i_fault_address, Q = \fault_address).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_coprocessor..
Removed 17 unused cells and 52 unused wires.
<suppressed ~18 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_coprocessor.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_coprocessor.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_coprocessor'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_coprocessor..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_coprocessor.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_coprocessor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_coprocessor.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_coprocessor'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_coprocessor..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_coprocessor.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== a25_coprocessor ===

   Number of wires:                 37
   Number of wire bits:            336
   Number of public wires:          19
   Number of public wire bits:     287
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 26
     $dffe                         171
     $eq                            30
     $logic_and                      2
     $logic_not                      5
     $not                            1
     $pmux                          32
     $reduce_and                    14

End of script. Logfile hash: 894d33d83d, CPU: user 0.06s system 0.01s, MEM: 11.91 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 5x opt_expr (0 sec), 22% 3x opt_clean (0 sec), ...
