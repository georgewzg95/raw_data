
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v' to AST representation.
Generating RTLIL representation for module `\a25_multiply'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: a25_multiply        
Automatically selected a25_multiply as design top module.

2.2. Analyzing design hierarchy..
Top module:  \a25_multiply

2.3. Analyzing design hierarchy..
Top module:  \a25_multiply
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:81$9 in module a25_multiply.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:52$32'.
  Set init value: \product = 68'00000000000000000000000000000000000000000000000000000000000000000000
Found init rule in `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:50$31'.
  Set init value: \count = 6'000000
Found init rule in `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:42$30'.
  Set init value: \o_done = 1'0

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:52$32'.
Creating decoders for process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:50$31'.
Creating decoders for process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:42$30'.
Creating decoders for process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:117$24'.
     1/3: $0\product[67:0]
     2/3: $0\count[5:0]
     3/3: $0\o_done[0:0]
Creating decoders for process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:81$9'.
     1/5: $2\count_nxt[5:0]
     2/5: $1\count_nxt[5:0]
     3/5: $3\product_nxt[67:0]
     4/5: $2\product_nxt[67:0]
     5/5: $1\product_nxt[67:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\a25_multiply.\count_nxt' from process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:81$9'.
No latch inferred for signal `\a25_multiply.\product_nxt' from process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:81$9'.
No latch inferred for signal `\a25_multiply.\flags_nxt' from process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:81$9'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\a25_multiply.\o_done' using process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:117$24'.
  created $dff cell `$procdff$66' with positive edge clock.
Creating register for signal `\a25_multiply.\count' using process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:117$24'.
  created $dff cell `$procdff$67' with positive edge clock.
Creating register for signal `\a25_multiply.\product' using process `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:117$24'.
  created $dff cell `$procdff$68' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:52$32'.
Removing empty process `a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:50$31'.
Removing empty process `a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:42$30'.
Found and cleaned up 1 empty switch in `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:117$24'.
Removing empty process `a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:117$24'.
Found and cleaned up 5 empty switches in `\a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:81$9'.
Removing empty process `a25_multiply.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:81$9'.
Cleaned up 6 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_multiply.
<suppressed ~6 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_multiply.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_multiply'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$61.
    dead port 1/2 on $mux $procmux$55.
    dead port 1/2 on $mux $procmux$52.
    dead port 1/2 on $mux $procmux$43.
Removed 4 multiplexer ports.
<suppressed ~4 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_multiply.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_multiply'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$67 ($dff) from module a25_multiply (D = $procmux$46_Y, Q = \count).
Adding EN signal on $procdff$68 ($dff) from module a25_multiply (D = { $procmux$64_Y [67:65] $procmux$64_Y [32:0] }, Q = { \product [67:65] \product [32:0] }).
Adding EN signal on $procdff$68 ($dff) from module a25_multiply (D = $procmux$64_Y [64:33], Q = \product [64:33]).
Adding SRST signal on $auto$ff.cc:262:slice$81 ($dffe) from module a25_multiply (D = $2\product_nxt[67:0] [64:33], Q = \product [64:33], rval = 0).
Adding SRST signal on $auto$ff.cc:262:slice$74 ($dffe) from module a25_multiply (D = { $2\product_nxt[67:0] [67:65] $2\product_nxt[67:0] [0] }, Q = { \product [67:65] \product [0] }, rval = 4'0000).
Adding EN signal on $procdff$66 ($dff) from module a25_multiply (D = $eq$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_multiply.v:122$28_Y, Q = \o_done).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_multiply..
Removed 7 unused cells and 46 unused wires.
<suppressed ~8 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_multiply.
<suppressed ~2 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_multiply.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_multiply'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_multiply..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_multiply.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_multiply..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_multiply.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_multiply'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_multiply..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_multiply.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== a25_multiply ===

   Number of wires:                 46
   Number of wire bits:            665
   Number of public wires:          21
   Number of public wire bits:     425
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 37
     $add                          107
     $dffe                          39
     $eq                            22
     $le                             6
     $logic_and                      3
     $logic_not                     39
     $logic_or                       1
     $mux                          290
     $ne                             3
     $not                           35
     $reduce_and                     9
     $reduce_bool                    3
     $sdffce                        36

End of script. Logfile hash: 97fabe373a, CPU: user 0.06s system 0.00s, MEM: 12.18 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 3x opt_clean (0 sec), 19% 5x opt_expr (0 sec), ...
