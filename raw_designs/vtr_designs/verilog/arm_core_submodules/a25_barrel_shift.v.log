
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v' to AST representation.
Generating RTLIL representation for module `\a25_barrel_shift'.
Generating RTLIL representation for module `\a25_shifter_quick'.
Generating RTLIL representation for module `\a25_shifter_full'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: a25_shifter_full    
root of   0 design levels: a25_shifter_quick   
root of   1 design levels: a25_barrel_shift    
Automatically selected a25_barrel_shift as design top module.

2.2. Analyzing design hierarchy..
Top module:  \a25_barrel_shift
Used module:     \a25_shifter_quick
Used module:     \a25_shifter_full

2.3. Analyzing design hierarchy..
Top module:  \a25_barrel_shift
Used module:     \a25_shifter_quick
Used module:     \a25_shifter_full
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:50$9'.
  Set init value: \use_quick_r = 1'1
Found init rule in `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:49$8'.
  Set init value: \full_carry_out_r = 1'0
Found init rule in `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:48$7'.
  Set init value: \full_out_r = 0

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:50$9'.
Creating decoders for process `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:49$8'.
Creating decoders for process `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:48$7'.
Creating decoders for process `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:60$5'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\a25_barrel_shift.\full_out_r' using process `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:60$5'.
  created $dff cell `$procdff$314' with positive edge clock.
Creating register for signal `\a25_barrel_shift.\full_carry_out_r' using process `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:60$5'.
  created $dff cell `$procdff$315' with positive edge clock.
Creating register for signal `\a25_barrel_shift.\use_quick_r' using process `\a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:60$5'.
  created $dff cell `$procdff$316' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:50$9'.
Removing empty process `a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:49$8'.
Removing empty process `a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:48$7'.
Removing empty process `a25_barrel_shift.$proc$/home/zhigang/raw_data/raw_designs/vtr_designs/verilog/arm_core_submodules/a25_barrel_shift.v:60$5'.
Cleaned up 0 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_shifter_full.
<suppressed ~6 debug messages>
Optimizing module a25_shifter_quick.
<suppressed ~5 debug messages>
Optimizing module a25_barrel_shift.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.
Optimizing module a25_barrel_shift.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_shifter_full'.
<suppressed ~198 debug messages>
Finding identical cells in module `\a25_shifter_quick'.
<suppressed ~18 debug messages>
Finding identical cells in module `\a25_barrel_shift'.
Removed a total of 72 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
  Optimizing cells in module \a25_barrel_shift.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Finding identical cells in module `\a25_barrel_shift'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..
Finding unused cells or wires in module \a25_barrel_shift..
Removed 0 unused cells and 91 unused wires.
<suppressed ~3 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_barrel_shift.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a25_barrel_shift..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_full..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \a25_shifter_quick..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a25_barrel_shift.
  Optimizing cells in module \a25_shifter_full.
  Optimizing cells in module \a25_shifter_quick.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a25_barrel_shift'.
Finding identical cells in module `\a25_shifter_full'.
Finding identical cells in module `\a25_shifter_quick'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a25_barrel_shift..
Finding unused cells or wires in module \a25_shifter_full..
Finding unused cells or wires in module \a25_shifter_quick..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a25_barrel_shift.
Optimizing module a25_shifter_full.
Optimizing module a25_shifter_quick.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== a25_barrel_shift ===

   Number of wires:                 18
   Number of wire bits:            181
   Number of public wires:          16
   Number of public wire bits:     179
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $and                            1
     $dff                           34
     $logic_not                      1
     $mux                           33
     $reduce_or                      6

=== a25_shifter_full ===

   Number of wires:                210
   Number of wire bits:           4632
   Number of public wires:          11
   Number of public wire bits:     209
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                204
     $eq                           410
     $logic_not                     15
     $mux                         4521

=== a25_shifter_quick ===

   Number of wires:                 34
   Number of wire bits:            680
   Number of public wires:          11
   Number of public wire bits:     209
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $eq                            24
     $logic_not                     12
     $mux                          627

=== design hierarchy ===

   a25_barrel_shift                  1
     a25_shifter_full                0
     a25_shifter_quick               0

   Number of wires:                 18
   Number of wire bits:            181
   Number of public wires:          16
   Number of public wire bits:     179
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $and                            1
     $dff                           34
     $logic_not                      1
     $mux                           33
     $reduce_or                      6

End of script. Logfile hash: a4b23a1e38, CPU: user 0.23s system 0.01s, MEM: 18.16 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 4x opt_expr (0 sec), 26% 2x read_verilog (0 sec), ...
