
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v' to AST representation.
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Warning: Literal has a width of 3 bit, but value requires 4 bit. (/home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:6717)
Generating RTLIL representation for module `\dual_port_ram'.
Generating RTLIL representation for module `\mkDelayWorker32B'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2246.3-2262.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2322.3-2332.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2333.3-2343.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2613.3-2621.10 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2628.3-2641.10 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2706.3-2714.10 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2720.3-2727.10 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2789.3-2802.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2812.3-2820.10 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2877.3-2885.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2916.3-2930.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2937.3-2950.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:2985.3-3000.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3007.3-3022.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3050.3-3065.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3072.3-3086.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3222.3-3238.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3245.3-3262.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3397.3-3406.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3526.3-3565.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3566.3-3583.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3584.3-3593.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\ResetToBool'.
Note: Assuming pure combinatorial block at /home/zhigang/DATA/raw_designs/vtr_designs/verilog/mkDelayWorker32B.v:3915.1-3921.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\arSRLFIFO_a'.
Generating RTLIL representation for module `\generic_fifo_sc_a'.
Generating RTLIL representation for module `\arSRLFIFO_b'.
Generating RTLIL representation for module `\generic_fifo_sc_b'.
Generating RTLIL representation for module `\arSRLFIFO_c'.
Generating RTLIL representation for module `\generic_fifo_sc_c'.
Generating RTLIL representation for module `\arSRLFIFO_d'.
Generating RTLIL representation for module `\generic_fifo_sc_d'.
Generating RTLIL representation for module `\SizedFIFO_a'.
Generating RTLIL representation for module `\generic_fifo_sc_f'.
Generating RTLIL representation for module `\SizedFIFO_b'.
Generating RTLIL representation for module `\generic_fifo_sc_g'.
Generating RTLIL representation for module `\SizedFIFO_x'.
Generating RTLIL representation for module `\generic_fifo_sc_x'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: generic_fifo_sc_x   
root of   2 design levels: SizedFIFO_x         
root of   1 design levels: generic_fifo_sc_g   
root of   2 design levels: SizedFIFO_b         
root of   1 design levels: generic_fifo_sc_f   
root of   2 design levels: SizedFIFO_a         
root of   1 design levels: generic_fifo_sc_d   
root of   2 design levels: arSRLFIFO_d         
root of   1 design levels: generic_fifo_sc_c   
root of   2 design levels: arSRLFIFO_c         
root of   1 design levels: generic_fifo_sc_b   
root of   2 design levels: arSRLFIFO_b         
root of   1 design levels: generic_fifo_sc_a   
root of   2 design levels: arSRLFIFO_a         
root of   0 design levels: ResetToBool         
root of   3 design levels: mkDelayWorker32B    
root of   0 design levels: dual_port_ram       
Automatically selected mkDelayWorker32B as design top module.

2.2. Analyzing design hierarchy..
Top module:  \mkDelayWorker32B
Used module:     \SizedFIFO_b
Used module:         \generic_fifo_sc_g
Used module:             \dual_port_ram
Used module:     \ResetToBool
Used module:     \SizedFIFO_x
Used module:         \generic_fifo_sc_x
Used module:     \arSRLFIFO_d
Used module:         \generic_fifo_sc_d
Used module:     \arSRLFIFO_c
Used module:         \generic_fifo_sc_c
Used module:     \SizedFIFO_a
Used module:         \generic_fifo_sc_f
Used module:     \arSRLFIFO_b
Used module:         \generic_fifo_sc_b
Used module:     \arSRLFIFO_a
Used module:         \generic_fifo_sc_a
Parameter \DATA_WIDTH = 256
Parameter \ADDR_WIDTH = 10

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 256
Parameter \ADDR_WIDTH = 10
Generating RTLIL representation for module `$paramod$d85aaca54bcf0da34d73bd45e5702b091208a1fc\dual_port_ram'.
Parameter \DATA_WIDTH = 256
Parameter \ADDR_WIDTH = 10
Found cached RTLIL representation for module `$paramod$d85aaca54bcf0da34d73bd45e5702b091208a1fc\dual_port_ram'.
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 4

2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 4
Generating RTLIL representation for module `$paramod$20e56080ec181dbbbeb5e96c6443f519667f1b2d\dual_port_ram'.
Parameter \DATA_WIDTH = 32
Parameter \ADDR_WIDTH = 4
Found cached RTLIL representation for module `$paramod$20e56080ec181dbbbeb5e96c6443f519667f1b2d\dual_port_ram'.
Parameter \DATA_WIDTH = 128
Parameter \ADDR_WIDTH = 4

2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 128
Parameter \ADDR_WIDTH = 4
Generating RTLIL representation for module `$paramod$9d532e1247fd046db4594eb5930a19efcf851bc8\dual_port_ram'.
Parameter \DATA_WIDTH = 128
Parameter \ADDR_WIDTH = 4
Found cached RTLIL representation for module `$paramod$9d532e1247fd046db4594eb5930a19efcf851bc8\dual_port_ram'.
Parameter \DATA_WIDTH = 60
Parameter \ADDR_WIDTH = 3

2.6. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 60
Parameter \ADDR_WIDTH = 3
Generating RTLIL representation for module `$paramod$17b29d3f804c36b130a09071f0e00c567b827562\dual_port_ram'.
Parameter \DATA_WIDTH = 313
Parameter \ADDR_WIDTH = 3

2.7. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 313
Parameter \ADDR_WIDTH = 3
Generating RTLIL representation for module `$paramod$204b100ee0c0bb69566d1d462d247eed36eba337\dual_port_ram'.
Parameter \DATA_WIDTH = 131
Parameter \ADDR_WIDTH = 2

2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\dual_port_ram'.
Parameter \DATA_WIDTH = 131
Parameter \ADDR_WIDTH = 2
Generating RTLIL representation for module `$paramod$8362091736f44a56020a5546c34621742906a62a\dual_port_ram'.

2.9. Analyzing design hierarchy..
Top module:  \mkDelayWorker32B
Used module:     \SizedFIFO_b
Used module:         \generic_fifo_sc_g
Used module:             $paramod$204b100ee0c0bb69566d1d462d247eed36eba337\dual_port_ram
Used module:     \ResetToBool
Used module:     \SizedFIFO_x
Used module:         \generic_fifo_sc_x
Used module:             $paramod$8362091736f44a56020a5546c34621742906a62a\dual_port_ram
Used module:     \arSRLFIFO_d
Used module:         \generic_fifo_sc_d
Used module:             $paramod$9d532e1247fd046db4594eb5930a19efcf851bc8\dual_port_ram
Used module:     \arSRLFIFO_c
Used module:         \generic_fifo_sc_c
Used module:     \SizedFIFO_a
Used module:         \generic_fifo_sc_f
Used module:             $paramod$17b29d3f804c36b130a09071f0e00c567b827562\dual_port_ram
Used module:     \arSRLFIFO_b
Used module:         \generic_fifo_sc_b
Used module:             $paramod$20e56080ec181dbbbeb5e96c6443f519667f1b2d\dual_port_ram
Used module:     \arSRLFIFO_a
Used module:         \generic_fifo_sc_a
Used module:     $paramod$d85aaca54bcf0da34d73bd45e5702b091208a1fc\dual_port_ram

2.10. Analyzing design hierarchy..
Top module:  \mkDelayWorker32B
Used module:     \SizedFIFO_b
Used module:         \generic_fifo_sc_g
Used module:             $paramod$204b100ee0c0bb69566d1d462d247eed36eba337\dual_port_ram
Used module:     \ResetToBool
Used module:     \SizedFIFO_x
Used module:         \generic_fifo_sc_x
Used module:             $paramod$8362091736f44a56020a5546c34621742906a62a\dual_port_ram
Used module:     \arSRLFIFO_d
Used module:         \generic_fifo_sc_d
Used module:             $paramod$9d532e1247fd046db4594eb5930a19efcf851bc8\dual_port_ram
Used module:     \arSRLFIFO_c
Used module:         \generic_fifo_sc_c
Used module:     \SizedFIFO_a
Used module:         \generic_fifo_sc_f
Used module:             $paramod$17b29d3f804c36b130a09071f0e00c567b827562\dual_port_ram
Used module:     \arSRLFIFO_b
Used module:         \generic_fifo_sc_b
Used module:             $paramod$20e56080ec181dbbbeb5e96c6443f519667f1b2d\dual_port_ram
Used module:     \arSRLFIFO_a
Used module:         \generic_fifo_sc_a
Used module:     $paramod$d85aaca54bcf0da34d73bd45e5702b091208a1fc\dual_port_ram
Removing unused module `\dual_port_ram'.
Removed 1 unused modules.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: bcb501bf2f, CPU: user 0.22s system 0.00s, MEM: 31.08 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 88% 2x read_verilog (0 sec), 11% 1x hierarchy (0 sec)
