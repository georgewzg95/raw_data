
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reversed_gate.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reversed_gate.v' to AST representation.
Storing AST representation for module `$abstract\reversed_gate'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: $abstract\reversed_gate
Automatically selected $abstract\reversed_gate as design top module.

2.2. Analyzing design hierarchy..
Top module:  $abstract\reversed_gate

2.3. Analyzing design hierarchy..
Top module:  $abstract\reversed_gate
Removed 0 unused modules.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Executing AST frontend in derive mode using pre-parsed AST for module `\reversed_gate'.
Generating RTLIL representation for module `\reversed_gate'.

3.2. Analyzing design hierarchy..
Top module:  \reversed_gate

3.3. Analyzing design hierarchy..
Top module:  \reversed_gate
Removing unused module `$abstract\reversed_gate'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\reversed_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reversed_gate.v:8$1'.
     1/32: $0\dout[31:0] [31]
     2/32: $0\dout[31:0] [30]
     3/32: $0\dout[31:0] [29]
     4/32: $0\dout[31:0] [28]
     5/32: $0\dout[31:0] [27]
     6/32: $0\dout[31:0] [26]
     7/32: $0\dout[31:0] [25]
     8/32: $0\dout[31:0] [24]
     9/32: $0\dout[31:0] [23]
    10/32: $0\dout[31:0] [22]
    11/32: $0\dout[31:0] [21]
    12/32: $0\dout[31:0] [20]
    13/32: $0\dout[31:0] [19]
    14/32: $0\dout[31:0] [18]
    15/32: $0\dout[31:0] [17]
    16/32: $0\dout[31:0] [16]
    17/32: $0\dout[31:0] [15]
    18/32: $0\dout[31:0] [14]
    19/32: $0\dout[31:0] [13]
    20/32: $0\dout[31:0] [12]
    21/32: $0\dout[31:0] [11]
    22/32: $0\dout[31:0] [10]
    23/32: $0\dout[31:0] [9]
    24/32: $0\dout[31:0] [8]
    25/32: $0\dout[31:0] [7]
    26/32: $0\dout[31:0] [6]
    27/32: $0\dout[31:0] [5]
    28/32: $0\dout[31:0] [4]
    29/32: $0\dout[31:0] [3]
    30/32: $0\dout[31:0] [2]
    31/32: $0\dout[31:0] [0]
    32/32: $0\dout[31:0] [1]

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\reversed_gate.\dout' using process `\reversed_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reversed_gate.v:8$1'.
  created $dff cell `$procdff$597' with positive edge clock.

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\reversed_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reversed_gate.v:8$1'.
Removing empty process `reversed_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reversed_gate.v:8$1'.
Cleaned up 1 empty switch.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module reversed_gate.
<suppressed ~2 debug messages>

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module reversed_gate.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reversed_gate'.
<suppressed ~93 debug messages>
Removed a total of 31 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reversed_gate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reversed_gate.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reversed_gate'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = \din [0], Q = \dout [0]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$6_Y, Q = \dout [31]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$10_Y, Q = \dout [30]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$15_Y, Q = \dout [29]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$21_Y, Q = \dout [28]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$28_Y, Q = \dout [27]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$36_Y, Q = \dout [26]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$45_Y, Q = \dout [25]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$55_Y, Q = \dout [24]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$66_Y, Q = \dout [23]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$78_Y, Q = \dout [22]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$91_Y, Q = \dout [21]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$105_Y, Q = \dout [20]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$120_Y, Q = \dout [19]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$136_Y, Q = \dout [18]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$153_Y, Q = \dout [17]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$171_Y, Q = \dout [16]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$190_Y, Q = \dout [15]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$210_Y, Q = \dout [14]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$231_Y, Q = \dout [13]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$253_Y, Q = \dout [12]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$276_Y, Q = \dout [11]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$300_Y, Q = \dout [10]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$325_Y, Q = \dout [9]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$351_Y, Q = \dout [8]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$378_Y, Q = \dout [7]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$406_Y, Q = \dout [6]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$435_Y, Q = \dout [5]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$465_Y, Q = \dout [4]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$496_Y, Q = \dout [3]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$528_Y, Q = \dout [2]).
Adding EN signal on $procdff$597 ($dff) from module reversed_gate (D = $procmux$594_Y, Q = \dout [1]).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reversed_gate..
Removed 1 unused cells and 63 unused wires.
<suppressed ~2 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module reversed_gate.
<suppressed ~31 debug messages>

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reversed_gate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reversed_gate.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reversed_gate'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reversed_gate..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module reversed_gate.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Printing statistics.

=== reversed_gate ===

   Number of wires:                 73
   Number of wire bits:            281
   Number of public wires:           5
   Number of public wire bits:      58
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                130
     $add                            1
     $dffe                          32
     $eq                            31
     $logic_not                      1
     $mul                            1
     $pmux                          31
     $reduce_bool                   31
     $sub                            2

End of script. Logfile hash: a792286f9b, CPU: user 0.05s system 0.00s, MEM: 11.79 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 45% 4x opt_expr (0 sec), 9% 3x opt_merge (0 sec), ...
