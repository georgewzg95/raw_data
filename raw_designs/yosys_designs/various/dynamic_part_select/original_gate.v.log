
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/original_gate.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/original_gate.v' to AST representation.
Storing AST representation for module `$abstract\original_gate'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: $abstract\original_gate
Automatically selected $abstract\original_gate as design top module.

2.2. Analyzing design hierarchy..
Top module:  $abstract\original_gate

2.3. Analyzing design hierarchy..
Top module:  $abstract\original_gate
Removed 0 unused modules.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Executing AST frontend in derive mode using pre-parsed AST for module `\original_gate'.
Generating RTLIL representation for module `\original_gate'.

3.2. Analyzing design hierarchy..
Top module:  \original_gate

3.3. Analyzing design hierarchy..
Top module:  \original_gate
Removing unused module `$abstract\original_gate'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\original_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/original_gate.v:8$1'.
     1/32: $0\dout[31:0] [31]
     2/32: $0\dout[31:0] [30]
     3/32: $0\dout[31:0] [29]
     4/32: $0\dout[31:0] [28]
     5/32: $0\dout[31:0] [27]
     6/32: $0\dout[31:0] [26]
     7/32: $0\dout[31:0] [25]
     8/32: $0\dout[31:0] [24]
     9/32: $0\dout[31:0] [23]
    10/32: $0\dout[31:0] [22]
    11/32: $0\dout[31:0] [21]
    12/32: $0\dout[31:0] [20]
    13/32: $0\dout[31:0] [19]
    14/32: $0\dout[31:0] [18]
    15/32: $0\dout[31:0] [17]
    16/32: $0\dout[31:0] [16]
    17/32: $0\dout[31:0] [15]
    18/32: $0\dout[31:0] [14]
    19/32: $0\dout[31:0] [13]
    20/32: $0\dout[31:0] [12]
    21/32: $0\dout[31:0] [11]
    22/32: $0\dout[31:0] [10]
    23/32: $0\dout[31:0] [9]
    24/32: $0\dout[31:0] [8]
    25/32: $0\dout[31:0] [7]
    26/32: $0\dout[31:0] [6]
    27/32: $0\dout[31:0] [5]
    28/32: $0\dout[31:0] [4]
    29/32: $0\dout[31:0] [3]
    30/32: $0\dout[31:0] [2]
    31/32: $0\dout[31:0] [1]
    32/32: $0\dout[31:0] [0]

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\original_gate.\dout' using process `\original_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/original_gate.v:8$1'.
  created $dff cell `$procdff$1060' with positive edge clock.

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\original_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/original_gate.v:8$1'.
Removing empty process `original_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/original_gate.v:8$1'.
Cleaned up 1 empty switch.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module original_gate.
<suppressed ~32 debug messages>

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module original_gate.
<suppressed ~1 debug messages>

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\original_gate'.
<suppressed ~1488 debug messages>
Removed a total of 496 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \original_gate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \original_gate.
    New ctrl vector for $pmux cell $procmux$922: { $auto$opt_reduce.cc:134:opt_mux$1062 $procmux$957_CMP $procmux$923_CMP }
    New ctrl vector for $pmux cell $procmux$854: { $auto$opt_reduce.cc:134:opt_mux$1064 $procmux$889_CMP $procmux$855_CMP }
    New ctrl vector for $pmux cell $procmux$786: { $auto$opt_reduce.cc:134:opt_mux$1066 $procmux$821_CMP $procmux$787_CMP }
    New ctrl vector for $pmux cell $procmux$718: { $auto$opt_reduce.cc:134:opt_mux$1068 $procmux$753_CMP $procmux$719_CMP }
    New ctrl vector for $pmux cell $procmux$650: { $auto$opt_reduce.cc:134:opt_mux$1070 $procmux$685_CMP $procmux$651_CMP }
    New ctrl vector for $pmux cell $procmux$582: { $auto$opt_reduce.cc:134:opt_mux$1072 $procmux$617_CMP $procmux$583_CMP }
    New ctrl vector for $pmux cell $procmux$514: { $auto$opt_reduce.cc:134:opt_mux$1074 $procmux$549_CMP $procmux$515_CMP }
    New ctrl vector for $pmux cell $procmux$446: { $auto$opt_reduce.cc:134:opt_mux$1076 $procmux$481_CMP $procmux$447_CMP }
    New ctrl vector for $pmux cell $procmux$378: { $auto$opt_reduce.cc:134:opt_mux$1078 $procmux$413_CMP $procmux$379_CMP }
    New ctrl vector for $pmux cell $procmux$310: { $auto$opt_reduce.cc:134:opt_mux$1080 $procmux$345_CMP $procmux$311_CMP }
    New ctrl vector for $pmux cell $procmux$242: { $auto$opt_reduce.cc:134:opt_mux$1082 $procmux$277_CMP $procmux$243_CMP }
    New ctrl vector for $pmux cell $procmux$174: { $auto$opt_reduce.cc:134:opt_mux$1084 $procmux$209_CMP $procmux$175_CMP }
    New ctrl vector for $pmux cell $procmux$106: { $auto$opt_reduce.cc:134:opt_mux$1086 $procmux$141_CMP $procmux$107_CMP }
    New ctrl vector for $pmux cell $procmux$38: { $auto$opt_reduce.cc:134:opt_mux$1088 $procmux$73_CMP $procmux$39_CMP }
    New ctrl vector for $pmux cell $procmux$956: { $auto$opt_reduce.cc:134:opt_mux$1090 $procmux$991_CMP $procmux$957_CMP }
    New ctrl vector for $pmux cell $procmux$888: { $auto$opt_reduce.cc:134:opt_mux$1092 $procmux$923_CMP $procmux$889_CMP }
    New ctrl vector for $pmux cell $procmux$820: { $auto$opt_reduce.cc:134:opt_mux$1094 $procmux$855_CMP $procmux$821_CMP }
    New ctrl vector for $pmux cell $procmux$752: { $auto$opt_reduce.cc:134:opt_mux$1096 $procmux$787_CMP $procmux$753_CMP }
    New ctrl vector for $pmux cell $procmux$684: { $auto$opt_reduce.cc:134:opt_mux$1098 $procmux$719_CMP $procmux$685_CMP }
    New ctrl vector for $pmux cell $procmux$616: { $auto$opt_reduce.cc:134:opt_mux$1100 $procmux$651_CMP $procmux$617_CMP }
    New ctrl vector for $pmux cell $procmux$548: { $auto$opt_reduce.cc:134:opt_mux$1102 $procmux$583_CMP $procmux$549_CMP }
    New ctrl vector for $pmux cell $procmux$480: { $auto$opt_reduce.cc:134:opt_mux$1104 $procmux$515_CMP $procmux$481_CMP }
    New ctrl vector for $pmux cell $procmux$412: { $auto$opt_reduce.cc:134:opt_mux$1106 $procmux$447_CMP $procmux$413_CMP }
    New ctrl vector for $pmux cell $procmux$344: { $auto$opt_reduce.cc:134:opt_mux$1108 $procmux$379_CMP $procmux$345_CMP }
    New ctrl vector for $pmux cell $procmux$276: { $auto$opt_reduce.cc:134:opt_mux$1110 $procmux$311_CMP $procmux$277_CMP }
    New ctrl vector for $pmux cell $procmux$208: { $auto$opt_reduce.cc:134:opt_mux$1112 $procmux$243_CMP $procmux$209_CMP }
    New ctrl vector for $pmux cell $procmux$140: { $auto$opt_reduce.cc:134:opt_mux$1114 $procmux$175_CMP $procmux$141_CMP }
    New ctrl vector for $pmux cell $procmux$72: { $auto$opt_reduce.cc:134:opt_mux$1116 $procmux$107_CMP $procmux$73_CMP }
    New ctrl vector for $pmux cell $procmux$4: { $auto$opt_reduce.cc:134:opt_mux$1118 $procmux$39_CMP $procmux$5_CMP }
  Optimizing cells in module \original_gate.
Performed a total of 29 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\original_gate'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = \din [0], Q = \dout [0]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$4_Y, Q = \dout [31]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$922_Y, Q = \dout [4]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$854_Y, Q = \dout [6]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$786_Y, Q = \dout [8]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$718_Y, Q = \dout [10]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$650_Y, Q = \dout [12]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$582_Y, Q = \dout [14]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$514_Y, Q = \dout [16]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$446_Y, Q = \dout [18]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$378_Y, Q = \dout [20]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$310_Y, Q = \dout [22]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$242_Y, Q = \dout [24]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$174_Y, Q = \dout [26]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$106_Y, Q = \dout [28]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$38_Y, Q = \dout [30]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$956_Y, Q = \dout [3]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$888_Y, Q = \dout [5]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$820_Y, Q = \dout [7]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$752_Y, Q = \dout [9]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$684_Y, Q = \dout [11]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$616_Y, Q = \dout [13]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$548_Y, Q = \dout [15]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$480_Y, Q = \dout [17]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$412_Y, Q = \dout [19]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$344_Y, Q = \dout [21]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$276_Y, Q = \dout [23]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$208_Y, Q = \dout [25]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$140_Y, Q = \dout [27]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$72_Y, Q = \dout [29]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$990_Y, Q = \dout [2]).
Adding EN signal on $procdff$1060 ($dff) from module original_gate (D = $procmux$1024_Y, Q = \dout [1]).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \original_gate..
Removed 1 unused cells and 529 unused wires.
<suppressed ~3 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module original_gate.
<suppressed ~31 debug messages>

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \original_gate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \original_gate.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\original_gate'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \original_gate..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module original_gate.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Printing statistics.

=== original_gate ===

   Number of wires:                 99
   Number of wire bits:            197
   Number of public wires:           5
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                156
     $dffe                          32
     $eq                            31
     $logic_not                      1
     $mul                            1
     $pmux                          31
     $reduce_bool                   31
     $reduce_or                     29

End of script. Logfile hash: 1bcfaa52aa, CPU: user 0.16s system 0.00s, MEM: 15.10 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 54% 4x opt_expr (0 sec), 12% 1x proc_mux (0 sec), ...
