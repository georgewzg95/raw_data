
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/nonblocking_gate.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/nonblocking_gate.v' to AST representation.
Storing AST representation for module `$abstract\nonblocking_gate'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: $abstract\nonblocking_gate
Automatically selected $abstract\nonblocking_gate as design top module.

2.2. Analyzing design hierarchy..
Top module:  $abstract\nonblocking_gate

2.3. Analyzing design hierarchy..
Top module:  $abstract\nonblocking_gate
Removed 0 unused modules.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Executing AST frontend in derive mode using pre-parsed AST for module `\nonblocking_gate'.
Generating RTLIL representation for module `\nonblocking_gate'.

3.2. Analyzing design hierarchy..
Top module:  \nonblocking_gate

3.3. Analyzing design hierarchy..
Top module:  \nonblocking_gate
Removing unused module `$abstract\nonblocking_gate'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\nonblocking_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/nonblocking_gate.v:8$1'.
     1/32: $0\dout[31:0] [31]
     2/32: $0\dout[31:0] [30]
     3/32: $0\dout[31:0] [29]
     4/32: $0\dout[31:0] [28]
     5/32: $0\dout[31:0] [27]
     6/32: $0\dout[31:0] [26]
     7/32: $0\dout[31:0] [25]
     8/32: $0\dout[31:0] [24]
     9/32: $0\dout[31:0] [23]
    10/32: $0\dout[31:0] [22]
    11/32: $0\dout[31:0] [21]
    12/32: $0\dout[31:0] [20]
    13/32: $0\dout[31:0] [19]
    14/32: $0\dout[31:0] [18]
    15/32: $0\dout[31:0] [17]
    16/32: $0\dout[31:0] [16]
    17/32: $0\dout[31:0] [15]
    18/32: $0\dout[31:0] [14]
    19/32: $0\dout[31:0] [13]
    20/32: $0\dout[31:0] [12]
    21/32: $0\dout[31:0] [11]
    22/32: $0\dout[31:0] [10]
    23/32: $0\dout[31:0] [9]
    24/32: $0\dout[31:0] [8]
    25/32: $0\dout[31:0] [7]
    26/32: $0\dout[31:0] [6]
    27/32: $0\dout[31:0] [5]
    28/32: $0\dout[31:0] [4]
    29/32: $0\dout[31:0] [3]
    30/32: $0\dout[31:0] [2]
    31/32: $0\dout[31:0] [1]
    32/32: $0\dout[31:0] [0]

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\nonblocking_gate.\dout' using process `\nonblocking_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/nonblocking_gate.v:8$1'.
  created $dff cell `$procdff$1061' with positive edge clock.

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\nonblocking_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/nonblocking_gate.v:8$1'.
Removing empty process `nonblocking_gate.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/nonblocking_gate.v:8$1'.
Cleaned up 1 empty switch.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module nonblocking_gate.
<suppressed ~32 debug messages>

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nonblocking_gate.
<suppressed ~1 debug messages>

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nonblocking_gate'.
<suppressed ~1488 debug messages>
Removed a total of 496 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nonblocking_gate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nonblocking_gate.
    New ctrl vector for $pmux cell $procmux$923: { $auto$opt_reduce.cc:134:opt_mux$1063 $procmux$958_CMP $procmux$924_CMP }
    New ctrl vector for $pmux cell $procmux$855: { $auto$opt_reduce.cc:134:opt_mux$1065 $procmux$890_CMP $procmux$856_CMP }
    New ctrl vector for $pmux cell $procmux$787: { $auto$opt_reduce.cc:134:opt_mux$1067 $procmux$822_CMP $procmux$788_CMP }
    New ctrl vector for $pmux cell $procmux$719: { $auto$opt_reduce.cc:134:opt_mux$1069 $procmux$754_CMP $procmux$720_CMP }
    New ctrl vector for $pmux cell $procmux$651: { $auto$opt_reduce.cc:134:opt_mux$1071 $procmux$686_CMP $procmux$652_CMP }
    New ctrl vector for $pmux cell $procmux$583: { $auto$opt_reduce.cc:134:opt_mux$1073 $procmux$618_CMP $procmux$584_CMP }
    New ctrl vector for $pmux cell $procmux$515: { $auto$opt_reduce.cc:134:opt_mux$1075 $procmux$550_CMP $procmux$516_CMP }
    New ctrl vector for $pmux cell $procmux$447: { $auto$opt_reduce.cc:134:opt_mux$1077 $procmux$482_CMP $procmux$448_CMP }
    New ctrl vector for $pmux cell $procmux$379: { $auto$opt_reduce.cc:134:opt_mux$1079 $procmux$414_CMP $procmux$380_CMP }
    New ctrl vector for $pmux cell $procmux$311: { $auto$opt_reduce.cc:134:opt_mux$1081 $procmux$346_CMP $procmux$312_CMP }
    New ctrl vector for $pmux cell $procmux$243: { $auto$opt_reduce.cc:134:opt_mux$1083 $procmux$278_CMP $procmux$244_CMP }
    New ctrl vector for $pmux cell $procmux$175: { $auto$opt_reduce.cc:134:opt_mux$1085 $procmux$210_CMP $procmux$176_CMP }
    New ctrl vector for $pmux cell $procmux$107: { $auto$opt_reduce.cc:134:opt_mux$1087 $procmux$142_CMP $procmux$108_CMP }
    New ctrl vector for $pmux cell $procmux$39: { $auto$opt_reduce.cc:134:opt_mux$1089 $procmux$74_CMP $procmux$40_CMP }
    New ctrl vector for $pmux cell $procmux$957: { $auto$opt_reduce.cc:134:opt_mux$1091 $procmux$992_CMP $procmux$958_CMP }
    New ctrl vector for $pmux cell $procmux$889: { $auto$opt_reduce.cc:134:opt_mux$1093 $procmux$924_CMP $procmux$890_CMP }
    New ctrl vector for $pmux cell $procmux$821: { $auto$opt_reduce.cc:134:opt_mux$1095 $procmux$856_CMP $procmux$822_CMP }
    New ctrl vector for $pmux cell $procmux$753: { $auto$opt_reduce.cc:134:opt_mux$1097 $procmux$788_CMP $procmux$754_CMP }
    New ctrl vector for $pmux cell $procmux$685: { $auto$opt_reduce.cc:134:opt_mux$1099 $procmux$720_CMP $procmux$686_CMP }
    New ctrl vector for $pmux cell $procmux$617: { $auto$opt_reduce.cc:134:opt_mux$1101 $procmux$652_CMP $procmux$618_CMP }
    New ctrl vector for $pmux cell $procmux$549: { $auto$opt_reduce.cc:134:opt_mux$1103 $procmux$584_CMP $procmux$550_CMP }
    New ctrl vector for $pmux cell $procmux$481: { $auto$opt_reduce.cc:134:opt_mux$1105 $procmux$516_CMP $procmux$482_CMP }
    New ctrl vector for $pmux cell $procmux$413: { $auto$opt_reduce.cc:134:opt_mux$1107 $procmux$448_CMP $procmux$414_CMP }
    New ctrl vector for $pmux cell $procmux$345: { $auto$opt_reduce.cc:134:opt_mux$1109 $procmux$380_CMP $procmux$346_CMP }
    New ctrl vector for $pmux cell $procmux$277: { $auto$opt_reduce.cc:134:opt_mux$1111 $procmux$312_CMP $procmux$278_CMP }
    New ctrl vector for $pmux cell $procmux$209: { $auto$opt_reduce.cc:134:opt_mux$1113 $procmux$244_CMP $procmux$210_CMP }
    New ctrl vector for $pmux cell $procmux$141: { $auto$opt_reduce.cc:134:opt_mux$1115 $procmux$176_CMP $procmux$142_CMP }
    New ctrl vector for $pmux cell $procmux$73: { $auto$opt_reduce.cc:134:opt_mux$1117 $procmux$108_CMP $procmux$74_CMP }
    New ctrl vector for $pmux cell $procmux$5: { $auto$opt_reduce.cc:134:opt_mux$1119 $procmux$40_CMP $procmux$6_CMP }
  Optimizing cells in module \nonblocking_gate.
Performed a total of 29 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nonblocking_gate'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nonblocking_gate..
Removed 0 unused cells and 529 unused wires.
<suppressed ~2 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nonblocking_gate.

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nonblocking_gate..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nonblocking_gate.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nonblocking_gate'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nonblocking_gate..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nonblocking_gate.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Printing statistics.

=== nonblocking_gate ===

   Number of wires:                 69
   Number of wire bits:            198
   Number of public wires:           5
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 96
     $add                            1
     $dff                            1
     $eq                            31
     $logic_not                      1
     $mul                            1
     $mux                            1
     $pmux                          31
     $reduce_or                     29

End of script. Logfile hash: ae1b8d8bb8, CPU: user 0.16s system 0.00s, MEM: 15.05 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 58% 4x opt_expr (0 sec), 12% 1x proc_mux (0 sec), ...
