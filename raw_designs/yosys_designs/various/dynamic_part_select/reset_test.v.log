
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v' to AST representation.
Storing AST representation for module `$abstract\reset_test'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: $abstract\reset_test
Automatically selected $abstract\reset_test as design top module.

2.2. Analyzing design hierarchy..
Top module:  $abstract\reset_test

2.3. Analyzing design hierarchy..
Top module:  $abstract\reset_test
Removed 0 unused modules.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Executing AST frontend in derive mode using pre-parsed AST for module `\reset_test'.
Generating RTLIL representation for module `\reset_test'.

3.2. Analyzing design hierarchy..
Top module:  \reset_test

3.3. Analyzing design hierarchy..
Top module:  \reset_test
Removing unused module `$abstract\reset_test'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7 in module reset_test.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 7 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
     1/4: $1\i[1:0]
     2/4: $1$lookahead\dout$6[31:0]$15
     3/4: $1$bitselwrite$data$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:18$3[31:0]$14
     4/4: $1$bitselwrite$mask$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:18$2[31:0]$13

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\reset_test.\dout' using process `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
  created $dff cell `$procdff$47' with positive edge clock.
Creating register for signal `\reset_test.\i' using process `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
  created $dff cell `$procdff$48' with positive edge clock.
Creating register for signal `\reset_test.$bitselwrite$mask$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:18$2' using process `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
  created $dff cell `$procdff$49' with positive edge clock.
Creating register for signal `\reset_test.$bitselwrite$data$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:18$3' using process `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
  created $dff cell `$procdff$50' with positive edge clock.
Creating register for signal `\reset_test.$bitselwrite$mask$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:21$4' using process `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
  created $dff cell `$procdff$51' with positive edge clock.
Creating register for signal `\reset_test.$bitselwrite$data$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:21$5' using process `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
  created $dff cell `$procdff$52' with positive edge clock.
Creating register for signal `\reset_test.$lookahead\dout$6' using process `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
  created $dff cell `$procdff$53' with positive edge clock.

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
Removing empty process `reset_test.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/reset_test.v:15$7'.
Cleaned up 1 empty switch.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset_test.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset_test.
<suppressed ~9 debug messages>

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset_test'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$45.
    dead port 2/2 on $mux $procmux$45.
    dead port 1/2 on $mux $procmux$42.
    dead port 2/2 on $mux $procmux$42.
Removed 4 multiplexer ports.
<suppressed ~2 debug messages>

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset_test.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset_test'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 1 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 2 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 3 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 4 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 5 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 6 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 7 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 8 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 9 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 10 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 11 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 12 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 13 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 14 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 15 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 16 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 17 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 18 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 19 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 20 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 21 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 22 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 23 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 24 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 25 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 26 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 27 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 28 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 29 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 30 on $procdff$49 ($dff) from module reset_test.
Setting constant 1-bit at position 31 on $procdff$49 ($dff) from module reset_test.
Adding EN signal on $procdff$48 ($dff) from module reset_test (D = 2'01, Q = \i).
Setting constant 1-bit at position 0 on $auto$ff.cc:262:slice$54 ($dffe) from module reset_test.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$54 ($dffe) from module reset_test.

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset_test..
Removed 1 unused cells and 33 unused wires.
<suppressed ~3 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset_test.

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \reset_test..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \reset_test.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\reset_test'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \reset_test..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module reset_test.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Printing statistics.

=== reset_test ===

   Number of wires:                 18
   Number of wire bits:            365
   Number of public wires:           8
   Number of public wire bits:      45
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $and                            3
     $dff                            1
     $mul                            1
     $mux                            1
     $not                            1
     $or                             2
     $shl                            2

End of script. Logfile hash: c09d5fa671, CPU: user 0.03s system 0.00s, MEM: 11.39 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 4x opt_expr (0 sec), 28% 3x opt_merge (0 sec), ...
