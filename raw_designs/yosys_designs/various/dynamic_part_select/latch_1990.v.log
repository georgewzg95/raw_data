
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v
Parsing SystemVerilog input from `/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v' to AST representation.
Storing AST representation for module `$abstract\latch_1990'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: $abstract\latch_1990
Automatically selected $abstract\latch_1990 as design top module.

2.2. Analyzing design hierarchy..
Top module:  $abstract\latch_1990

2.3. Analyzing design hierarchy..
Top module:  $abstract\latch_1990
Removed 0 unused modules.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Executing AST frontend in derive mode using pre-parsed AST for module `\latch_1990'.
Generating RTLIL representation for module `\latch_1990'.

3.2. Analyzing design hierarchy..
Top module:  \latch_1990

3.3. Analyzing design hierarchy..
Top module:  \latch_1990
Removing unused module `$abstract\latch_1990'.
Removed 1 unused modules.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v:9$2 in module latch_1990.
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 2 assignments to connections.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\latch_1990.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v:9$2'.
     1/4: $2\x[1:0] [1]
     2/4: $2\x[1:0] [0]
     3/4: $1\x[1:0] [1]
     4/4: $1\x[1:0] [0]

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\latch_1990.\i' from process `\latch_1990.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v:9$2'.
Latch inferred for signal `\latch_1990.\x [0]' from process `\latch_1990.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v:9$2': $auto$proc_dlatch.cc:427:proc_dlatch$41
Latch inferred for signal `\latch_1990.\x [1]' from process `\latch_1990.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v:9$2': $auto$proc_dlatch.cc:427:proc_dlatch$60

4.8. Executing PROC_DFF pass (convert process syncs to FFs).

4.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\latch_1990.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v:9$2'.
Removing empty process `latch_1990.$proc$/home/zhigang/DATA/raw_designs/yosys_designs/various/dynamic_part_select/latch_1990.v:9$2'.
Cleaned up 2 empty switches.

4.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch_1990.
<suppressed ~36 debug messages>

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch_1990.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch_1990'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch_1990..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch_1990.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch_1990'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).
Handling always-active ARST on $auto$proc_dlatch.cc:427:proc_dlatch$60 ($dlatch) from module latch_1990 (changing to const driver).
Handling always-active ARST on $auto$proc_dlatch.cc:427:proc_dlatch$41 ($dlatch) from module latch_1990 (changing to const driver).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch_1990..
Removed 0 unused cells and 36 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch_1990.

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \latch_1990..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \latch_1990.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\latch_1990'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \latch_1990..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module latch_1990.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Printing statistics.

=== latch_1990 ===

   Number of wires:                  3
   Number of wire bits:             35
   Number of public wires:           3
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  0

End of script. Logfile hash: 010d3ba5b0, CPU: user 0.01s system 0.00s, MEM: 11.00 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 4x opt_expr (0 sec), 33% 2x hierarchy (0 sec), ...
