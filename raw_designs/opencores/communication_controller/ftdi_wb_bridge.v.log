
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:801)
Generating RTLIL representation for module `\ftdi_if'.
Generating RTLIL representation for module `\ftdi_sync'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: ftdi_sync           
root of   1 design levels: ftdi_if             
Automatically selected ftdi_if as design top module.

2.2. Analyzing design hierarchy..
Top module:  \ftdi_if
Used module:     \ftdi_sync
Parameter \CLK_DIV = 2

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\ftdi_sync'.
Parameter \CLK_DIV = 2
Generating RTLIL representation for module `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010'.

2.4. Analyzing design hierarchy..
Top module:  \ftdi_if
Used module:     $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010

2.5. Analyzing design hierarchy..
Top module:  \ftdi_if
Used module:     $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010
Removing unused module `\ftdi_sync'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:652$174'.
Found and cleaned up 2 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:376$85'.
Cleaned up 3 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:790$200 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:781$199 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:770$196 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:759$195 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:746$193 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:735$192 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:726$191 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:681$190 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 6 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:681$190 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:652$174 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:630$173 in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:524$138 in module ftdi_if.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:514$133 in module ftdi_if.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:502$130 in module ftdi_if.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:489$127 in module ftdi_if.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:480$123 in module ftdi_if.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:465$115 in module ftdi_if.
Removed 2 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:446$110 in module ftdi_if.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:446$110 in module ftdi_if.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:425$99 in module ftdi_if.
Marked 5 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:376$85 in module ftdi_if.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:365$78 in module ftdi_if.
Marked 6 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:343$61 in module ftdi_if.
Marked 5 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:326$40 in module ftdi_if.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:269$13 in module ftdi_if.
Marked 21 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:153$1 in module ftdi_if.
Removed a total of 3 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 4 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:790$200'.
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:781$199'.
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:770$196'.
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:759$195'.
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:746$193'.
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:735$192'.
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:726$191'.
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:652$174'.
Found async reset \rst_i in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:630$173'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:524$138'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:502$130'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:489$127'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:480$123'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:465$115'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:425$99'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:376$85'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:365$78'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:343$61'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:326$40'.
Found async reset \rst_i in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:269$13'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:790$200'.
     1/1: $0\tx_data_q[7:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:781$199'.
     1/1: $0\rx_data_q[7:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:770$196'.
     1/1: $0\ftdi_wr_o[0:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:759$195'.
     1/1: $0\ftdi_rd_o[0:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:746$193'.
     1/1: $0\tx_ready_q[0:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:735$192'.
     1/1: $0\rd_ready_o[0:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:726$191'.
     1/1: $0\state_q[1:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:681$190'.
     1/6: $6\next_state_r[1:0]
     2/6: $5\next_state_r[1:0]
     3/6: $4\next_state_r[1:0]
     4/6: $3\next_state_r[1:0]
     5/6: $2\next_state_r[1:0]
     6/6: $1\next_state_r[1:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:652$174'.
     1/1: $0\clk_div_q[2:0]
Creating decoders for process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:630$173'.
     1/4: $0\ftdi_txe_ms_q[0:0]
     2/4: $0\ftdi_txe_q[0:0]
     3/4: $0\ftdi_rxf_ms_q[0:0]
     4/4: $0\ftdi_rxf_q[0:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:524$138'.
     1/1: $0\gp_in_q[7:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:514$133'.
     1/1: $1\gp_in_r[7:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:502$130'.
     1/1: $0\gp_out_q[7:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:489$127'.
     1/1: $0\mem_cyc_q[0:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:480$123'.
     1/1: $0\mem_we_o[0:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:465$115'.
     1/1: $0\mem_sel_q[3:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:446$110'.
     1/2: $2\mem_sel_r[3:0]
     2/2: $1\mem_sel_r[3:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:425$99'.
     1/1: $0\mem_stb_o[0:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:376$85'.
     1/4: $0\data_q[31:0] [31:24]
     2/4: $0\data_q[31:0] [7:0]
     3/4: $0\data_q[31:0] [23:16]
     4/4: $0\data_q[31:0] [15:8]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:365$78'.
     1/1: $0\data_idx_q[1:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:343$61'.
     1/4: $0\mem_addr_q[31:0] [31:24]
     2/4: $0\mem_addr_q[31:0] [23:16]
     3/4: $0\mem_addr_q[31:0] [7:0]
     4/4: $0\mem_addr_q[31:0] [15:8]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:326$40'.
     1/2: $0\len_q[11:0] [11:8]
     2/2: $0\len_q[11:0] [7:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:269$13'.
     1/1: $0\state_q[3:0]
Creating decoders for process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:153$1'.
     1/21: $21\next_state_r[3:0]
     2/21: $20\next_state_r[3:0]
     3/21: $19\next_state_r[3:0]
     4/21: $18\next_state_r[3:0]
     5/21: $17\next_state_r[3:0]
     6/21: $16\next_state_r[3:0]
     7/21: $15\next_state_r[3:0]
     8/21: $14\next_state_r[3:0]
     9/21: $13\next_state_r[3:0]
    10/21: $12\next_state_r[3:0]
    11/21: $11\next_state_r[3:0]
    12/21: $10\next_state_r[3:0]
    13/21: $9\next_state_r[3:0]
    14/21: $8\next_state_r[3:0]
    15/21: $7\next_state_r[3:0]
    16/21: $6\next_state_r[3:0]
    17/21: $5\next_state_r[3:0]
    18/21: $4\next_state_r[3:0]
    19/21: $3\next_state_r[3:0]
    20/21: $2\next_state_r[3:0]
    21/21: $1\next_state_r[3:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\next_state_r' from process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:681$190'.
No latch inferred for signal `\ftdi_if.\gp_in_r' from process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:514$133'.
No latch inferred for signal `\ftdi_if.\mem_sel_r' from process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:446$110'.
No latch inferred for signal `\ftdi_if.\next_state_r' from process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:153$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\tx_data_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:790$200'.
  created $adff cell `$procdff$783' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\rx_data_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:781$199'.
  created $adff cell `$procdff$784' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\ftdi_wr_o' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:770$196'.
  created $adff cell `$procdff$785' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\ftdi_rd_o' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:759$195'.
  created $adff cell `$procdff$786' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\tx_ready_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:746$193'.
  created $adff cell `$procdff$787' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\rd_ready_o' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:735$192'.
  created $adff cell `$procdff$788' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\state_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:726$191'.
  created $adff cell `$procdff$789' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\clk_div_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:652$174'.
  created $adff cell `$procdff$790' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\ftdi_rxf_ms_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:630$173'.
  created $adff cell `$procdff$791' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\ftdi_txe_ms_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:630$173'.
  created $adff cell `$procdff$792' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\ftdi_rxf_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:630$173'.
  created $adff cell `$procdff$793' with positive edge clock and positive level reset.
Creating register for signal `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.\ftdi_txe_q' using process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:630$173'.
  created $adff cell `$procdff$794' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\gp_in_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:524$138'.
  created $adff cell `$procdff$795' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\gp_out_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:502$130'.
  created $adff cell `$procdff$796' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\mem_cyc_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:489$127'.
  created $adff cell `$procdff$797' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\mem_we_o' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:480$123'.
  created $adff cell `$procdff$798' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\mem_sel_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:465$115'.
  created $adff cell `$procdff$799' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\mem_stb_o' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:425$99'.
  created $adff cell `$procdff$800' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\data_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:376$85'.
  created $adff cell `$procdff$801' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\data_idx_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:365$78'.
  created $adff cell `$procdff$802' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\mem_addr_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:343$61'.
  created $adff cell `$procdff$803' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\len_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:326$40'.
  created $adff cell `$procdff$804' with positive edge clock and positive level reset.
Creating register for signal `\ftdi_if.\state_q' using process `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:269$13'.
  created $adff cell `$procdff$805' with positive edge clock and positive level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:790$200'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:790$200'.
Found and cleaned up 1 empty switch in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:781$199'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:781$199'.
Found and cleaned up 2 empty switches in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:770$196'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:770$196'.
Found and cleaned up 2 empty switches in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:759$195'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:759$195'.
Found and cleaned up 2 empty switches in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:746$193'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:746$193'.
Found and cleaned up 2 empty switches in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:735$192'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:735$192'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:726$191'.
Found and cleaned up 6 empty switches in `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:681$190'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:681$190'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:652$174'.
Removing empty process `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:630$173'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:524$138'.
Found and cleaned up 1 empty switch in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:514$133'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:514$133'.
Found and cleaned up 1 empty switch in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:502$130'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:502$130'.
Found and cleaned up 2 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:489$127'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:489$127'.
Found and cleaned up 1 empty switch in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:480$123'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:480$123'.
Found and cleaned up 2 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:465$115'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:465$115'.
Found and cleaned up 2 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:446$110'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:446$110'.
Found and cleaned up 4 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:425$99'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:425$99'.
Found and cleaned up 5 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:376$85'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:376$85'.
Found and cleaned up 2 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:365$78'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:365$78'.
Found and cleaned up 6 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:343$61'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:343$61'.
Found and cleaned up 5 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:326$40'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:326$40'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:269$13'.
Found and cleaned up 21 empty switches in `\ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:153$1'.
Removing empty process `ftdi_if.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:153$1'.
Cleaned up 68 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
<suppressed ~5 debug messages>
Optimizing module ftdi_if.
<suppressed ~12 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Optimizing module ftdi_if.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010'.
<suppressed ~36 debug messages>
Finding identical cells in module `\ftdi_if'.
<suppressed ~273 debug messages>
Removed a total of 103 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$265.
    dead port 2/2 on $mux $procmux$257.
    dead port 1/2 on $mux $procmux$255.
    dead port 2/2 on $mux $procmux$246.
    dead port 2/2 on $mux $procmux$239.
    dead port 2/2 on $mux $procmux$233.
Running muxtree optimizer on module \ftdi_if..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $procmux$305: \mem_stb_o -> 1'1
      Replacing known input bits on port A of cell $procmux$299: \mem_stb_o -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$472.
    dead port 2/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$744.
    dead port 1/2 on $mux $procmux$488.
    dead port 2/2 on $mux $procmux$507.
    dead port 2/2 on $mux $procmux$725.
    dead port 1/2 on $mux $procmux$723.
    dead port 2/2 on $mux $procmux$703.
    dead port 1/2 on $mux $procmux$701.
    dead port 1/2 on $mux $procmux$698.
    dead port 2/2 on $mux $procmux$678.
    dead port 2/2 on $mux $procmux$498.
    dead port 1/2 on $mux $procmux$676.
    dead port 1/2 on $mux $procmux$673.
    dead port 1/2 on $mux $procmux$670.
    dead port 2/2 on $mux $procmux$650.
    dead port 2/2 on $mux $procmux$632.
    dead port 2/2 on $mux $procmux$479.
    dead port 2/2 on $mux $procmux$615.
    dead port 2/2 on $mux $procmux$599.
    dead port 2/2 on $mux $procmux$584.
    dead port 2/2 on $mux $procmux$490.
    dead port 2/2 on $mux $procmux$570.
    dead port 1/2 on $mux $procmux$568.
    dead port 2/2 on $mux $procmux$553.
    dead port 2/2 on $mux $procmux$540.
    dead port 2/2 on $mux $procmux$528.
    dead port 2/2 on $mux $procmux$517.
Removed 34 multiplexer ports.
<suppressed ~27 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
  Optimizing cells in module \ftdi_if.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010'.
<suppressed ~3 debug messages>
Finding identical cells in module `\ftdi_if'.
<suppressed ~3 debug messages>
Removed a total of 2 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$783 ($adff) from module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 (D = \data_i, Q = \tx_data_q).
Adding EN signal on $procdff$784 ($adff) from module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:801$205_Y, Q = \rx_data_q).
Adding EN signal on $procdff$785 ($adff) from module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 (D = $procmux$213_Y, Q = \ftdi_wr_o).
Adding EN signal on $procdff$786 ($adff) from module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 (D = $procmux$218_Y, Q = \ftdi_rd_o).
Adding EN signal on $procdff$787 ($adff) from module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 (D = $procmux$223_Y, Q = \tx_ready_q).
Adding EN signal on $procdff$788 ($adff) from module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 (D = $procmux$228_Y, Q = \rd_ready_o).
Adding EN signal on $procdff$789 ($adff) from module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 (D = $procmux$267_Y, Q = \state_q).
Adding EN signal on $procdff$796 ($adff) from module ftdi_if (D = \data_rx_w, Q = \gp_out_q).
Adding EN signal on $procdff$797 ($adff) from module ftdi_if (D = $procmux$280_Y, Q = \mem_cyc_q).
Adding EN signal on $procdff$798 ($adff) from module ftdi_if (D = $eq$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:484$126_Y, Q = \mem_we_o).
Adding EN signal on $procdff$799 ($adff) from module ftdi_if (D = $procmux$287_Y, Q = \mem_sel_q).
Adding EN signal on $procdff$801 ($adff) from module ftdi_if (D = $procmux$320_Y, Q = \data_q [31:24]).
Adding EN signal on $procdff$801 ($adff) from module ftdi_if (D = $procmux$336_Y, Q = \data_q [7:0]).
Adding EN signal on $procdff$801 ($adff) from module ftdi_if (D = $procmux$350_Y, Q = \data_q [23:16]).
Adding EN signal on $procdff$801 ($adff) from module ftdi_if (D = $procmux$365_Y, Q = \data_q [15:8]).
Adding EN signal on $procdff$802 ($adff) from module ftdi_if (D = $procmux$370_Y, Q = \data_idx_q).
Adding EN signal on $procdff$803 ($adff) from module ftdi_if (D = $procmux$387_Y, Q = \mem_addr_q [31:24]).
Adding EN signal on $procdff$803 ($adff) from module ftdi_if (D = $procmux$401_Y, Q = \mem_addr_q [23:16]).
Adding EN signal on $procdff$803 ($adff) from module ftdi_if (D = $procmux$432_Y, Q = \mem_addr_q [15:8]).
Adding EN signal on $procdff$803 ($adff) from module ftdi_if (D = $procmux$412_Y, Q = \mem_addr_q [7:0]).
Adding EN signal on $procdff$804 ($adff) from module ftdi_if (D = $procmux$463_Y, Q = \len_q [7:0]).
Adding EN signal on $procdff$804 ($adff) from module ftdi_if (D = $procmux$452_Y, Q = \len_q [11:8]).
Adding EN signal on $procdff$805 ($adff) from module ftdi_if (D = $procmux$767_Y, Q = \state_q).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \ftdi_if..
Removed 12 unused cells and 334 unused wires.
<suppressed ~14 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
<suppressed ~4 debug messages>
Optimizing module ftdi_if.
<suppressed ~14 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ftdi_if..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
    New ctrl vector for $pmux cell $procmux$267: { $eq$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:674$183_Y $eq$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ftdi_wb_bridge.v:773$197_Y $auto$opt_reduce.cc:134:opt_mux$952 }
  Optimizing cells in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
  Optimizing cells in module \ftdi_if.
Performed a total of 1 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010'.
Finding identical cells in module `\ftdi_if'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$820 ($adffe) from module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 (D = \next_state_r, Q = \state_q).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \ftdi_if..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Optimizing module ftdi_if.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ftdi_if..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$957: { $auto$opt_dff.cc:197:make_patterns_logic$823 $auto$opt_dff.cc:197:make_patterns_logic$821 $auto$opt_dff.cc:197:make_patterns_logic$954 }
  Optimizing cells in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
  Optimizing cells in module \ftdi_if.
Performed a total of 1 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010'.
Finding identical cells in module `\ftdi_if'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \ftdi_if..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Optimizing module ftdi_if.

4.23. Rerunning OPT passes. (Maybe there is more to do..)

4.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \ftdi_if..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

4.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
  Optimizing cells in module \ftdi_if.
Performed a total of 0 changes.

4.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010'.
Finding identical cells in module `\ftdi_if'.
Removed a total of 0 cells.

4.27. Executing OPT_DFF pass (perform DFF optimizations).

4.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \ftdi_if..

4.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010.
Optimizing module ftdi_if.

4.30. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010 ===

   Number of wires:                 64
   Number of wire bits:            107
   Number of public wires:          31
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 54
     $adff                           5
     $adffe                          7
     $and                            8
     $eq                             3
     $logic_and                      2
     $logic_not                      3
     $logic_or                       1
     $mux                           13
     $ne                             3
     $not                            2
     $pmux                           1
     $reduce_and                     1
     $reduce_bool                    4
     $reduce_or                      1

=== ftdi_if ===

   Number of wires:                234
   Number of wire bits:            953
   Number of public wires:          37
   Number of public wire bits:     275
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                225
     $add                            2
     $adff                           2
     $adffe                         16
     $and                            5
     $eq                            25
     $logic_and                     21
     $logic_not                      6
     $logic_or                       4
     $mux                           77
     $ne                            22
     $not                            4
     $or                            13
     $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010      1
     $pmux                           3
     $reduce_and                    11
     $reduce_bool                   12
     $sub                            1

=== design hierarchy ===

   ftdi_if                           1
     $paramod\ftdi_sync\CLK_DIV=s32'00000000000000000000000000000010      1

   Number of wires:                298
   Number of wire bits:           1060
   Number of public wires:          68
   Number of public wire bits:     345
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                278
     $add                            2
     $adff                           7
     $adffe                         23
     $and                           13
     $eq                            28
     $logic_and                     23
     $logic_not                      9
     $logic_or                       5
     $mux                           90
     $ne                            25
     $not                            6
     $or                            13
     $pmux                           4
     $reduce_and                    12
     $reduce_bool                   16
     $reduce_or                      1
     $sub                            1

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 518f5c8a09, CPU: user 0.21s system 0.00s, MEM: 14.08 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 30% 6x opt_expr (0 sec), 15% 5x opt_merge (0 sec), ...
