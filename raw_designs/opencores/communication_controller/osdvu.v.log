
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v' to AST representation.
Generating RTLIL representation for module `\uart'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: uart                
Automatically selected uart as design top module.

2.2. Analyzing design hierarchy..
Top module:  \uart

2.3. Analyzing design hierarchy..
Top module:  \uart
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 13 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5 in module uart.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 16 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:66$32'.
  Set init value: \tx_state = 2'00
Found init rule in `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:65$31'.
  Set init value: \tx_out = 1'1
Found init rule in `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:60$30'.
  Set init value: \recv_state = 3'000
Found init rule in `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:58$29'.
  Set init value: \tx_clk_divider = 11'10100010110
Found init rule in `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:57$28'.
  Set init value: \rx_clk_divider = 11'10100010110

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:66$32'.
Creating decoders for process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:65$31'.
Creating decoders for process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:60$30'.
Creating decoders for process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:58$29'.
Creating decoders for process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:57$28'.
Creating decoders for process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
     1/47: $5\tx_state[1:0]
     2/47: $5\tx_countdown[5:0]
     3/47: $4\tx_data[7:0]
     4/47: $4\tx_out[0:0]
     5/47: $4\tx_bits_remaining[3:0]
     6/47: $3\tx_data[7:0]
     7/47: $3\tx_bits_remaining[3:0]
     8/47: $4\tx_countdown[5:0]
     9/47: $4\tx_state[1:0]
    10/47: $3\tx_out[0:0]
    11/47: $3\tx_state[1:0]
    12/47: $2\tx_bits_remaining[3:0]
    13/47: $2\tx_out[0:0]
    14/47: $3\tx_countdown[5:0]
    15/47: $3\tx_clk_divider[10:0]
    16/47: $2\tx_data[7:0]
    17/47: $1\tx_data[7:0]
    18/47: $1\tx_bits_remaining[3:0]
    19/47: $2\tx_countdown[5:0]
    20/47: $2\tx_state[1:0]
    21/47: $1\tx_out[0:0]
    22/47: $2\tx_clk_divider[10:0]
    23/47: $7\recv_state[2:0]
    24/47: $6\recv_state[2:0]
    25/47: $4\rx_bits_remaining[3:0]
    26/47: $6\rx_countdown[5:0]
    27/47: $2\rx_data[7:0]
    28/47: $5\recv_state[2:0]
    29/47: $3\rx_bits_remaining[3:0]
    30/47: $5\rx_countdown[5:0]
    31/47: $2\rx_bits_remaining[3:0]
    32/47: $4\rx_countdown[5:0]
    33/47: $4\recv_state[2:0]
    34/47: $3\recv_state[2:0]
    35/47: $3\rx_countdown[5:0]
    36/47: $3\rx_clk_divider[10:0]
    37/47: $2\rx_countdown[5:0]
    38/47: $2\recv_state[2:0]
    39/47: $2\rx_clk_divider[10:0]
    40/47: $1\rx_data[7:0]
    41/47: $1\rx_bits_remaining[3:0]
    42/47: $1\tx_countdown[5:0]
    43/47: $1\tx_clk_divider[10:0]
    44/47: $1\rx_countdown[5:0]
    45/47: $1\rx_clk_divider[10:0]
    46/47: $1\tx_state[1:0]
    47/47: $1\recv_state[2:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\uart.\rx_clk_divider' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$414' with positive edge clock.
Creating register for signal `\uart.\tx_clk_divider' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$415' with positive edge clock.
Creating register for signal `\uart.\recv_state' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$416' with positive edge clock.
Creating register for signal `\uart.\rx_countdown' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$417' with positive edge clock.
Creating register for signal `\uart.\rx_bits_remaining' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$418' with positive edge clock.
Creating register for signal `\uart.\rx_data' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$419' with positive edge clock.
Creating register for signal `\uart.\tx_out' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$420' with positive edge clock.
Creating register for signal `\uart.\tx_state' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$421' with positive edge clock.
Creating register for signal `\uart.\tx_countdown' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$422' with positive edge clock.
Creating register for signal `\uart.\tx_bits_remaining' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$423' with positive edge clock.
Creating register for signal `\uart.\tx_data' using process `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
  created $dff cell `$procdff$424' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:66$32'.
Removing empty process `uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:65$31'.
Removing empty process `uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:60$30'.
Removing empty process `uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:58$29'.
Removing empty process `uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:57$28'.
Found and cleaned up 13 empty switches in `\uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
Removing empty process `uart.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/osdvu.v:79$5'.
Cleaned up 13 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~26 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~150 debug messages>
Removed a total of 50 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$296.
    dead port 2/2 on $mux $procmux$285.
    dead port 2/2 on $mux $procmux$283.
    dead port 2/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$269.
    dead port 2/2 on $mux $procmux$257.
    dead port 2/2 on $mux $procmux$255.
    dead port 2/2 on $mux $procmux$243.
    dead port 2/2 on $mux $procmux$233.
    dead port 2/2 on $mux $procmux$223.
    dead port 2/2 on $mux $procmux$213.
    dead port 2/2 on $mux $procmux$203.
    dead port 2/2 on $mux $procmux$164.
    dead port 2/2 on $mux $procmux$156.
    dead port 2/2 on $mux $procmux$148.
    dead port 2/2 on $mux $procmux$140.
    dead port 2/2 on $mux $procmux$132.
    dead port 2/2 on $mux $procmux$124.
    dead port 2/2 on $mux $procmux$116.
    dead port 2/2 on $mux $procmux$354.
    dead port 2/2 on $mux $procmux$109.
    dead port 2/2 on $mux $procmux$102.
    dead port 2/2 on $mux $procmux$95.
    dead port 2/2 on $mux $procmux$342.
    dead port 2/2 on $mux $procmux$88.
    dead port 2/2 on $mux $procmux$81.
    dead port 2/2 on $mux $procmux$79.
    dead port 2/2 on $mux $procmux$71.
    dead port 2/2 on $mux $procmux$330.
    dead port 2/2 on $mux $procmux$69.
    dead port 2/2 on $mux $procmux$61.
    dead port 2/2 on $mux $procmux$59.
    dead port 2/2 on $mux $procmux$51.
    dead port 2/2 on $mux $procmux$49.
    dead port 2/2 on $mux $procmux$41.
    dead port 2/2 on $mux $procmux$318.
    dead port 2/2 on $mux $procmux$39.
    dead port 2/2 on $mux $procmux$307.
Removed 38 multiplexer ports.
<suppressed ~17 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$424 ($dff) from module uart (D = $procmux$168_Y, Q = \tx_data).
Adding EN signal on $procdff$418 ($dff) from module uart (D = $procmux$393_Y, Q = \rx_bits_remaining).
Adding EN signal on $procdff$419 ($dff) from module uart (D = { \rx \rx_data [7:1] }, Q = \rx_data).
Adding EN signal on $procdff$420 ($dff) from module uart (D = $procmux$188_Y, Q = \tx_out).
Adding EN signal on $procdff$423 ($dff) from module uart (D = $procmux$173_Y, Q = \tx_bits_remaining).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 3 unused cells and 202 unused wires.
<suppressed ~4 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.
<suppressed ~4 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \uart..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \uart.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\uart'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \uart..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module uart.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== uart ===

   Number of wires:                107
   Number of wire bits:            670
   Number of public wires:          22
   Number of public wire bits:      89
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                100
     $dff                            6
     $dffe                           5
     $eq                            10
     $logic_not                      6
     $mux                           41
     $ne                             6
     $pmux                           8
     $reduce_and                     4
     $reduce_bool                    8
     $sub                            6

End of script. Logfile hash: b1427b4cc1, CPU: user 0.07s system 0.01s, MEM: 12.41 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 39% 5x opt_expr (0 sec), 14% 3x opt_clean (0 sec), ...
