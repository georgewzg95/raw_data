
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:258)
Generating RTLIL representation for module `\spi_master'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: spi_master          
Automatically selected spi_master as design top module.

2.2. Analyzing design hierarchy..
Top module:  \spi_master

2.3. Analyzing design hierarchy..
Top module:  \spi_master
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:248$30 in module spi_master.
Marked 7 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15 in module spi_master.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:130$13 in module spi_master.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7 in module spi_master.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 3 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:63$39'.
  Set init value: \inbufffulln = 1'0
Found init rule in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:62$38'.
  Set init value: \inbufffullp = 1'0

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:248$30'.
Found async reset \rst in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
Found async reset \rst in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7'.
Found async reset \res_senderr in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:63$39'.
Creating decoders for process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:62$38'.
Creating decoders for process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:248$30'.
     1/1: $0\charreceivedn[0:0]
Creating decoders for process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
     1/13: $0\modeint[1:0]
     2/13: $0\lsbfirstint[0:0]
     3/13: $0\prescallerint[2:0]
     4/13: $0\sckint[4:0]
     5/13: $0\shift_reg_in[7:0]
     6/13: $0\shift_reg_out[7:0]
     7/13: $0\prescaller_cnt[7:0]
     8/13: $0\state[0:0]
     9/13: $0\output_buffer[7:0]
    10/13: $0\inbufffulln[0:0]
    11/13: $0\charreceivedp[0:0]
    12/13: $0\ss[0:0]
    13/13: $0\_mosi[0:0]
Creating decoders for process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:130$13'.
     1/1: $0\prescdemux[7:0]
Creating decoders for process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7'.
     1/5: $3\prescallerbuff[2:0]
     2/5: $2\prescallerbuff[2:0]
     3/5: $1\prescallerbuff[2:0]
     4/5: $0\inbufffullp[0:0]
     5/5: $0\senderr[0:0]
Creating decoders for process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:79$3'.
     1/1: $0\input_buffer[7:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\spi_master.\prescdemux' from process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:130$13'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\spi_master.\charreceivedn' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:248$30'.
  created $adff cell `$procdff$199' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\_mosi' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$200' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\ss' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$201' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\charreceivedp' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$202' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\inbufffulln' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$203' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\output_buffer' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$204' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\state' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$205' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\prescaller_cnt' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$206' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\shift_reg_out' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$207' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\shift_reg_in' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$208' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\sckint' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$209' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\prescallerint' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$210' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\lsbfirstint' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$211' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\modeint' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
  created $adff cell `$procdff$212' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\senderr' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7'.
  created $adff cell `$procdff$215' with positive edge clock and positive level reset.
Creating register for signal `\spi_master.\inbufffullp' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7'.
Warning: Complex async reset for dff `\inbufffullp'.
  created $dffsr cell `$procdff$228' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\spi_master.\prescallerbuff' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7'.
Warning: Complex async reset for dff `\prescallerbuff'.
  created $dffsr cell `$procdff$241' with positive edge clock and multiple level-sensitive resets.
Creating register for signal `\spi_master.\input_buffer' using process `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:79$3'.
  created $dff cell `$procdff$242' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:63$39'.
Removing empty process `spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:62$38'.
Found and cleaned up 1 empty switch in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:248$30'.
Removing empty process `spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:248$30'.
Found and cleaned up 11 empty switches in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
Removing empty process `spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:152$15'.
Found and cleaned up 2 empty switches in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:130$13'.
Removing empty process `spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:130$13'.
Found and cleaned up 2 empty switches in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7'.
Removing empty process `spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:91$7'.
Found and cleaned up 1 empty switch in `\spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:79$3'.
Removing empty process `spi_master.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:79$3'.
Cleaned up 17 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master.
<suppressed ~24 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$108: \state -> 1'0
      Replacing known input bits on port B of cell $procmux$106: \state -> 1'1
      Replacing known input bits on port B of cell $procmux$103: \state -> 1'1
      Replacing known input bits on port A of cell $procmux$100: \state -> 1'1
      Replacing known input bits on port A of cell $procmux$110: \state -> 1'0
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$215 ($adff) from module spi_master (D = 1'1, Q = \senderr).
Adding EN signal on $procdff$212 ($adff) from module spi_master (D = \mode, Q = \modeint).
Adding EN signal on $procdff$241 ($dffsr) from module spi_master (D = \prescaller, Q = \prescallerbuff).
Adding EN signal on $procdff$242 ($dff) from module spi_master (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:258$33_Y, Q = \input_buffer).
Adding EN signal on $procdff$228 ($dffsr) from module spi_master (D = $auto$proc_dff.cc:110:gen_dffsr_complex$223, Q = \inbufffullp).
Adding EN signal on $procdff$199 ($adff) from module spi_master (D = $not$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:255$32_Y, Q = \charreceivedn).
Adding EN signal on $procdff$200 ($adff) from module spi_master (D = $procmux$164_Y, Q = \_mosi).
Adding EN signal on $procdff$201 ($adff) from module spi_master (D = $procmux$150_Y, Q = \ss).
Adding EN signal on $procdff$202 ($adff) from module spi_master (D = $not$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:233$29_Y, Q = \charreceivedp).
Adding EN signal on $procdff$203 ($adff) from module spi_master (D = $not$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/asynchronous_master_spi.v:177$17_Y, Q = \inbufffulln).
Adding EN signal on $procdff$204 ($adff) from module spi_master (D = \shift_reg_in, Q = \output_buffer).
Adding EN signal on $procdff$206 ($adff) from module spi_master (D = $procmux$95_Y, Q = \prescaller_cnt).
Adding EN signal on $procdff$207 ($adff) from module spi_master (D = $procmux$87_Y, Q = \shift_reg_out).
Adding EN signal on $procdff$208 ($adff) from module spi_master (D = $procmux$69_Y, Q = \shift_reg_in).
Adding EN signal on $procdff$209 ($adff) from module spi_master (D = $procmux$60_Y, Q = \sckint).
Adding EN signal on $procdff$210 ($adff) from module spi_master (D = \prescallerbuff, Q = \prescallerint).
Adding EN signal on $procdff$211 ($adff) from module spi_master (D = \lsbfirst, Q = \lsbfirstint).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master..
Removed 31 unused cells and 132 unused wires.
<suppressed ~32 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master.
<suppressed ~9 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master.
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$321: { $auto$opt_dff.cc:197:make_patterns_logic$318 $auto$opt_dff.cc:197:make_patterns_logic$316 $auto$opt_dff.cc:197:make_patterns_logic$314 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$284: { $auto$opt_dff.cc:197:make_patterns_logic$281 $auto$opt_dff.cc:197:make_patterns_logic$279 $auto$opt_dff.cc:197:make_patterns_logic$277 $auto$opt_dff.cc:197:make_patterns_logic$275 $auto$opt_dff.cc:197:make_patterns_logic$273 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$269: { $auto$opt_dff.cc:197:make_patterns_logic$264 $auto$opt_dff.cc:197:make_patterns_logic$262 $auto$opt_dff.cc:197:make_patterns_logic$258 $auto$opt_dff.cc:197:make_patterns_logic$266 }
  Optimizing cells in module \spi_master.
Performed a total of 3 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master..
Removed 0 unused cells and 22 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spi_master..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spi_master.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spi_master'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spi_master..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module spi_master.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== spi_master ===

   Number of wires:                119
   Number of wire bits:            338
   Number of public wires:          33
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                109
     $add                            2
     $adff                           1
     $adffe                         14
     $dffe                           1
     $dffsre                         2
     $eq                            11
     $logic_and                      2
     $logic_not                      1
     $lt                             1
     $mux                           35
     $ne                            10
     $not                           11
     $pmux                           6
     $reduce_and                     9
     $reduce_bool                    1
     $xor                            2

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: c392a3cacc, CPU: user 0.09s system 0.00s, MEM: 12.32 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 36% 5x opt_expr (0 sec), 13% 3x opt_dff (0 sec), ...
