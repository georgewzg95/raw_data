
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v' to AST representation.
Generating RTLIL representation for module `\eqspiflash'.
Generating RTLIL representation for module `\qspibus'.
Generating RTLIL representation for module `\readqspi'.
Generating RTLIL representation for module `\writeqspi'.
Generating RTLIL representation for module `\ctrlspi'.
Generating RTLIL representation for module `\idotpqspi'.
Generating RTLIL representation for module `\lleqspi'.
Generating RTLIL representation for module `\llqspi'.
Generating RTLIL representation for module `\wbqspiflash'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: wbqspiflash         
root of   0 design levels: llqspi              
root of   0 design levels: lleqspi             
root of   0 design levels: idotpqspi           
root of   0 design levels: ctrlspi             
root of   0 design levels: writeqspi           
root of   0 design levels: readqspi            
root of   0 design levels: qspibus             
root of   1 design levels: eqspiflash          
Automatically selected wbqspiflash as design top module.

2.2. Analyzing design hierarchy..
Top module:  \wbqspiflash
Used module:     \llqspi

2.3. Analyzing design hierarchy..
Top module:  \wbqspiflash
Used module:     \llqspi
Removing unused module `\lleqspi'.
Removing unused module `\idotpqspi'.
Removing unused module `\ctrlspi'.
Removing unused module `\writeqspi'.
Removing unused module `\readqspi'.
Removing unused module `\qspibus'.
Removing unused module `\eqspiflash'.
Removed 7 unused modules.
Mapping positional arguments of cell wbqspiflash.lldriver (llqspi).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
Cleaned up 1 empty switch.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 19 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386 in module llqspi.
Marked 67 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435 in module wbqspiflash.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 24 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$434'.
  Set init value: \o_word = 0
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$433'.
  Set init value: \o_mod = 2'00
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$432'.
  Set init value: \r_input = 31'0000000000000000000000000000000
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$431'.
  Set init value: \o_busy = 1'0
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$430'.
  Set init value: \o_valid = 1'0
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$429'.
  Set init value: \o_dat = 4'1101
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$428'.
  Set init value: \o_cs_n = 1'1
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$427'.
  Set init value: \o_sck = 1'1
Found init rule in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$426'.
  Set init value: \state = 3'000
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$673'.
  Set init value: \spif_ctrl = 1'0
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$672'.
  Set init value: \spif_override = 1'1
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$671'.
  Set init value: \o_interrupt = 1'0
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$670'.
  Set init value: \quad_mode_enabled = 1'0
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$669'.
  Set init value: \spi_len = 2'00
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$668'.
  Set init value: \spi_wr = 1'0
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$667'.
  Set init value: \o_wb_stall = 1'1
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$666'.
  Set init value: \o_wb_ack = 1'0
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$665'.
  Set init value: \state = 5'00000
Found init rule in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$664'.
  Set init value: \write_in_progress = 1'0
  Set init value: \write_protect = 1'1
  Set init value: \erased_sector = 6'000000
  Set init value: \dirty_sector = 1'1

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$434'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$433'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$432'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$431'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$430'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$429'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$428'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$427'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$426'.
Creating decoders for process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
     1/13: $0\o_busy[0:0]
     2/13: $0\o_valid[0:0]
     3/13: $0\state[2:0]
     4/13: $0\r_input[30:0]
     5/13: $0\r_word[31:0]
     6/13: $0\r_dir[0:0]
     7/13: $0\r_spd[0:0]
     8/13: $0\o_dat[3:0]
     9/13: $0\o_mod[1:0]
    10/13: $0\o_cs_n[0:0]
    11/13: $0\o_sck[0:0]
    12/13: $0\o_word[31:0]
    13/13: $0\spi_len[5:0]
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$673'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$672'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$671'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$670'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$669'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$668'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$667'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$666'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$665'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$664'.
Creating decoders for process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
     1/26: $0\last_status[7:0] [7]
     2/26: $0\last_status[7:0] [6:5]
     3/26: $0\last_status[7:0] [4:0]
     4/26: $0\spif_req[0:0]
     5/26: $0\spif_ctrl[0:0]
     6/26: $0\spif_data[31:0]
     7/26: $0\spif_cmd[0:0]
     8/26: $0\quad_mode_enabled[0:0]
     9/26: $0\reset_counter[9:0]
    10/26: $0\spif_override[0:0]
    11/26: $0\spif_addr[19:0]
    12/26: $0\dirty_sector[0:0]
    13/26: $0\erased_sector[5:0]
    14/26: $0\write_protect[0:0]
    15/26: $0\write_in_progress[0:0]
    16/26: $0\spi_in[31:0]
    17/26: $0\state[4:0]
    18/26: $0\spi_len[1:0]
    19/26: $0\spi_dir[0:0]
    20/26: $0\spi_spd[0:0]
    21/26: $0\spi_hold[0:0]
    22/26: $0\spi_wr[0:0]
    23/26: $0\o_interrupt[0:0]
    24/26: $0\o_wb_data[31:0]
    25/26: $0\o_wb_stall[0:0]
    26/26: $0\o_wb_ack[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\llqspi.\spi_len' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3821' with positive edge clock.
Creating register for signal `\llqspi.\o_word' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3822' with positive edge clock.
Creating register for signal `\llqspi.\o_valid' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3823' with positive edge clock.
Creating register for signal `\llqspi.\o_busy' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3824' with positive edge clock.
Creating register for signal `\llqspi.\o_sck' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3825' with positive edge clock.
Creating register for signal `\llqspi.\o_cs_n' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3826' with positive edge clock.
Creating register for signal `\llqspi.\o_mod' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3827' with positive edge clock.
Creating register for signal `\llqspi.\o_dat' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3828' with positive edge clock.
Creating register for signal `\llqspi.\r_spd' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3829' with positive edge clock.
Creating register for signal `\llqspi.\r_dir' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3830' with positive edge clock.
Creating register for signal `\llqspi.\r_word' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3831' with positive edge clock.
Creating register for signal `\llqspi.\r_input' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3832' with positive edge clock.
Creating register for signal `\llqspi.\state' using process `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
  created $dff cell `$procdff$3833' with positive edge clock.
Creating register for signal `\wbqspiflash.\o_wb_ack' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3834' with positive edge clock.
Creating register for signal `\wbqspiflash.\o_wb_stall' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3835' with positive edge clock.
Creating register for signal `\wbqspiflash.\o_wb_data' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3836' with positive edge clock.
Creating register for signal `\wbqspiflash.\o_interrupt' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3837' with positive edge clock.
Creating register for signal `\wbqspiflash.\spi_wr' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3838' with positive edge clock.
Creating register for signal `\wbqspiflash.\spi_hold' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3839' with positive edge clock.
Creating register for signal `\wbqspiflash.\spi_spd' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3840' with positive edge clock.
Creating register for signal `\wbqspiflash.\spi_dir' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3841' with positive edge clock.
Creating register for signal `\wbqspiflash.\spi_len' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3842' with positive edge clock.
Creating register for signal `\wbqspiflash.\state' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3843' with positive edge clock.
Creating register for signal `\wbqspiflash.\spi_in' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3844' with positive edge clock.
Creating register for signal `\wbqspiflash.\write_in_progress' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3845' with positive edge clock.
Creating register for signal `\wbqspiflash.\write_protect' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3846' with positive edge clock.
Creating register for signal `\wbqspiflash.\erased_sector' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3847' with positive edge clock.
Creating register for signal `\wbqspiflash.\dirty_sector' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3848' with positive edge clock.
Creating register for signal `\wbqspiflash.\spif_addr' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3849' with positive edge clock.
Creating register for signal `\wbqspiflash.\last_status' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3850' with positive edge clock.
Creating register for signal `\wbqspiflash.\reset_counter' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3851' with positive edge clock.
Creating register for signal `\wbqspiflash.\quad_mode_enabled' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3852' with positive edge clock.
Creating register for signal `\wbqspiflash.\spif_cmd' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3853' with positive edge clock.
Creating register for signal `\wbqspiflash.\spif_override' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3854' with positive edge clock.
Creating register for signal `\wbqspiflash.\spif_data' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3855' with positive edge clock.
Creating register for signal `\wbqspiflash.\spif_ctrl' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3856' with positive edge clock.
Creating register for signal `\wbqspiflash.\spif_req' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3857' with positive edge clock.
Creating register for signal `\wbqspiflash.\alt_cmd' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3858' with positive edge clock.
Creating register for signal `\wbqspiflash.\alt_ctrl' using process `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
  created $dff cell `$procdff$3859' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$434'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$433'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$432'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$431'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$430'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$429'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$428'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$427'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$426'.
Found and cleaned up 25 empty switches in `\llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
Removing empty process `llqspi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2326$386'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$673'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$672'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$671'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$670'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$669'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$668'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$667'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$666'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$665'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:0$664'.
Found and cleaned up 102 empty switches in `\wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
Removing empty process `wbqspiflash.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2893$435'.
Cleaned up 127 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module llqspi.
<suppressed ~21 debug messages>
Optimizing module wbqspiflash.
<suppressed ~110 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module llqspi.
Optimizing module wbqspiflash.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\llqspi'.
<suppressed ~24 debug messages>
Finding identical cells in module `\wbqspiflash'.
<suppressed ~579 debug messages>
Removed a total of 201 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \llqspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$983.
    dead port 2/2 on $mux $procmux$775.
    dead port 2/2 on $mux $procmux$767.
Running muxtree optimizer on module \wbqspiflash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$3383: { \write_in_progress \dirty_sector \spi_busy $not$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:3099$461_Y \quad_mode_enabled 7'0000000 \erased_sector 14'00000000000000 } -> { 1'0 \dirty_sector \spi_busy $not$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:3099$461_Y \quad_mode_enabled 7'0000000 \erased_sector 14'00000000000000 }
  Analyzing evaluation results.
Removed 3 multiplexer ports.
<suppressed ~46 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \llqspi.
  Optimizing cells in module \wbqspiflash.
    New ctrl vector for $pmux cell $procmux$3190: { $procmux$3778_CMP $auto$opt_reduce.cc:134:opt_mux$3861 }
    New ctrl vector for $pmux cell $procmux$3178: { $procmux$3778_CMP $auto$opt_reduce.cc:134:opt_mux$3863 }
    New ctrl vector for $pmux cell $procmux$3136: { $procmux$3733_CMP $auto$opt_reduce.cc:134:opt_mux$3865 }
    New ctrl vector for $pmux cell $procmux$3130: $auto$opt_reduce.cc:134:opt_mux$3867
    New ctrl vector for $pmux cell $procmux$3080: $auto$opt_reduce.cc:134:opt_mux$3869
    New ctrl vector for $pmux cell $procmux$3771: { $procmux$3778_CMP $auto$opt_reduce.cc:134:opt_mux$3871 }
    New ctrl vector for $pmux cell $procmux$2700: { $procmux$3778_CMP $auto$opt_reduce.cc:134:opt_mux$3873 }
    New ctrl vector for $pmux cell $procmux$3664: $auto$opt_reduce.cc:134:opt_mux$3875
    New ctrl vector for $pmux cell $procmux$2688: { $procmux$3778_CMP $auto$opt_reduce.cc:134:opt_mux$3877 $procmux$3578_CMP }
    New ctrl vector for $pmux cell $procmux$2646: { $procmux$3733_CMP $auto$opt_reduce.cc:134:opt_mux$3879 }
    New ctrl vector for $pmux cell $procmux$2640: { $auto$opt_reduce.cc:134:opt_mux$3881 $procmux$3730_CMP }
    New ctrl vector for $pmux cell $procmux$3577: { $procmux$3778_CMP $auto$opt_reduce.cc:134:opt_mux$3883 $procmux$3578_CMP }
    New ctrl vector for $pmux cell $procmux$2248: { $procmux$3778_CMP $auto$opt_reduce.cc:134:opt_mux$3885 }
    New ctrl vector for $pmux cell $procmux$3566: { $procmux$3778_CMP $auto$opt_reduce.cc:134:opt_mux$3887 }
    New ctrl vector for $pmux cell $procmux$2194: { $procmux$3733_CMP $auto$opt_reduce.cc:134:opt_mux$3889 }
    New ctrl vector for $pmux cell $procmux$3520: { $procmux$3733_CMP $auto$opt_reduce.cc:134:opt_mux$3891 $procmux$3730_CMP }
    New ctrl vector for $pmux cell $procmux$3729: $auto$opt_reduce.cc:134:opt_mux$3893
    New ctrl vector for $pmux cell $procmux$3514: { $procmux$3733_CMP $auto$opt_reduce.cc:134:opt_mux$3895 }
    New ctrl vector for $pmux cell $procmux$3782: $auto$opt_reduce.cc:134:opt_mux$3897
    New ctrl vector for $pmux cell $procmux$3723: { $procmux$3733_CMP $auto$opt_reduce.cc:134:opt_mux$3899 }
  Optimizing cells in module \wbqspiflash.
Performed a total of 20 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\llqspi'.
<suppressed ~39 debug messages>
Finding identical cells in module `\wbqspiflash'.
<suppressed ~114 debug messages>
Removed a total of 51 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$3828 ($dff) from module llqspi (D = $procmux$896_Y, Q = \o_dat).
Adding EN signal on $procdff$3826 ($dff) from module llqspi (D = $procmux$952_Y, Q = \o_cs_n).
Adding EN signal on $procdff$3829 ($dff) from module llqspi (D = $procmux$857_Y, Q = \r_spd).
Adding EN signal on $procdff$3830 ($dff) from module llqspi (D = $procmux$839_Y, Q = \r_dir).
Adding EN signal on $procdff$3831 ($dff) from module llqspi (D = $procmux$821_Y, Q = \r_word).
Adding EN signal on $procdff$3832 ($dff) from module llqspi (D = $procmux$780_Y, Q = \r_input).
Adding SRST signal on $procdff$3827 ($dff) from module llqspi (D = $procmux$924_Y, Q = \o_mod, rval = 2'00).
Adding EN signal on $auto$ff.cc:262:slice$3960 ($sdff) from module llqspi (D = $procmux$924_Y, Q = \o_mod).
Adding EN signal on $procdff$3833 ($dff) from module llqspi (D = $procmux$764_Y, Q = \state).
Adding SRST signal on $procdff$3823 ($dff) from module llqspi (D = $procmux$711_Y, Q = \o_valid, rval = 1'0).
Adding EN signal on $procdff$3821 ($dff) from module llqspi (D = $procmux$1031_Y, Q = \spi_len).
Adding EN signal on $procdff$3822 ($dff) from module llqspi (D = $procmux$986_Y, Q = \o_word).
Adding EN signal on $procdff$3825 ($dff) from module llqspi (D = $procmux$977_Y, Q = \o_sck).
Adding SRST signal on $auto$ff.cc:262:slice$4006 ($dffe) from module llqspi (D = $procmux$974_Y, Q = \o_sck, rval = 1'0).
Adding EN signal on $procdff$3845 ($dff) from module wbqspiflash (D = $procmux$2064_Y, Q = \write_in_progress).
Adding EN signal on $procdff$3844 ($dff) from module wbqspiflash (D = $procmux$2286_Y, Q = \spi_in).
Adding SRST signal on $procdff$3843 ($dff) from module wbqspiflash (D = $procmux$2550_Y, Q = \state, rval = 5'00001).
Adding EN signal on $auto$ff.cc:262:slice$4116 ($sdff) from module wbqspiflash (D = $procmux$2550_Y, Q = \state).
Adding EN signal on $procdff$3842 ($dff) from module wbqspiflash (D = $procmux$2738_Y, Q = \spi_len).
Adding SRST signal on $procdff$3841 ($dff) from module wbqspiflash (D = $procmux$2827_Y, Q = \spi_dir, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$4237 ($sdff) from module wbqspiflash (D = $procmux$2824_Y, Q = \spi_dir).
Adding SRST signal on $procdff$3840 ($dff) from module wbqspiflash (D = $procmux$2918_Y, Q = \spi_spd, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$4269 ($sdff) from module wbqspiflash (D = $procmux$2915_Y, Q = \spi_spd).
Adding SRST signal on $procdff$3839 ($dff) from module wbqspiflash (D = $procmux$3027_Y, Q = \spi_hold, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$4303 ($sdff) from module wbqspiflash (D = $procmux$3024_Y, Q = \spi_hold).
Adding SRST signal on $procdff$3850 ($dff) from module wbqspiflash (D = { $procmux$1109_Y $procmux$1199_Y $procmux$1280_Y }, Q = \last_status, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:262:slice$4315 ($sdff) from module wbqspiflash (D = { $procmux$1073_Y $procmux$1244_Y }, Q = { \last_status [7] \last_status [4:0] }).
Adding EN signal on $auto$ff.cc:262:slice$4315 ($sdff) from module wbqspiflash (D = $procmux$1163_Y, Q = \last_status [6:5]).
Adding SRST signal on $procdff$3851 ($dff) from module wbqspiflash (D = $procmux$1705_Y, Q = \reset_counter, rval = 10'1111111100).
Adding EN signal on $auto$ff.cc:262:slice$4426 ($sdff) from module wbqspiflash (D = $sub$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/qspiflash.v:2944$443_Y, Q = \reset_counter).
Adding EN signal on $procdff$3852 ($dff) from module wbqspiflash (D = $procmux$1657_Y, Q = \quad_mode_enabled).
Adding EN signal on $procdff$3853 ($dff) from module wbqspiflash (D = $procmux$1617_Y, Q = \spif_cmd).
Adding SRST signal on $procdff$3854 ($dff) from module wbqspiflash (D = $procmux$1714_Y, Q = \spif_override, rval = 1'1).
Adding EN signal on $procdff$3855 ($dff) from module wbqspiflash (D = $procmux$1539_Y, Q = \spif_data).
Adding EN signal on $procdff$3856 ($dff) from module wbqspiflash (D = $procmux$1461_Y, Q = \spif_ctrl).
Adding SRST signal on $procdff$3857 ($dff) from module wbqspiflash (D = $procmux$1386_Y, Q = \spif_req, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$4639 ($sdff) from module wbqspiflash (D = $procmux$1383_Y, Q = \spif_req).
Adding SRST signal on $procdff$3858 ($dff) from module wbqspiflash (D = \reset_counter [3], Q = \alt_cmd, rval = 1'1).
Adding SRST signal on $procdff$3859 ($dff) from module wbqspiflash (D = \reset_counter [0], Q = \alt_ctrl, rval = 1'1).
Adding EN signal on $procdff$3847 ($dff) from module wbqspiflash (D = \spif_data [19:14], Q = \erased_sector).
Adding EN signal on $procdff$3848 ($dff) from module wbqspiflash (D = $procmux$1825_Y, Q = \dirty_sector).
Adding EN signal on $procdff$3849 ($dff) from module wbqspiflash (D = $procmux$1794_Y, Q = \spif_addr).
Adding EN signal on $procdff$3846 ($dff) from module wbqspiflash (D = $procmux$1999_Y, Q = \write_protect).
Adding SRST signal on $procdff$3838 ($dff) from module wbqspiflash (D = $procmux$3225_Y, Q = \spi_wr, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$4825 ($sdff) from module wbqspiflash (D = $procmux$3225_Y, Q = \spi_wr).
Adding EN signal on $procdff$3837 ($dff) from module wbqspiflash (D = $procmux$3314_Y, Q = \o_interrupt).
Adding SRST signal on $auto$ff.cc:262:slice$4829 ($dffe) from module wbqspiflash (D = $procmux$3311_Y, Q = \o_interrupt, rval = 1'0).
Adding EN signal on $procdff$3836 ($dff) from module wbqspiflash (D = $procmux$3398_Y, Q = \o_wb_data).
Adding SRST signal on $procdff$3835 ($dff) from module wbqspiflash (D = $procmux$3612_Y, Q = \o_wb_stall, rval = 1'1).
Adding EN signal on $auto$ff.cc:262:slice$4936 ($sdff) from module wbqspiflash (D = $procmux$3612_Y, Q = \o_wb_stall).
Adding SRST signal on $procdff$3834 ($dff) from module wbqspiflash (D = $procmux$3813_Y, Q = \o_wb_ack, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$4950 ($sdff) from module wbqspiflash (D = $procmux$3813_Y, Q = \o_wb_ack).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \llqspi..
Finding unused cells or wires in module \wbqspiflash..
Removed 168 unused cells and 1549 unused wires.
<suppressed ~170 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module llqspi.
<suppressed ~9 debug messages>
Optimizing module wbqspiflash.
<suppressed ~17 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \llqspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wbqspiflash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~72 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \llqspi.
  Optimizing cells in module \wbqspiflash.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\llqspi'.
<suppressed ~57 debug messages>
Finding identical cells in module `\wbqspiflash'.
<suppressed ~819 debug messages>
Removed a total of 292 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \llqspi..
Finding unused cells or wires in module \wbqspiflash..
Removed 0 unused cells and 292 unused wires.
<suppressed ~2 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module llqspi.
Optimizing module wbqspiflash.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \llqspi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \wbqspiflash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~73 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \llqspi.
  Optimizing cells in module \wbqspiflash.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\llqspi'.
Finding identical cells in module `\wbqspiflash'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \llqspi..
Finding unused cells or wires in module \wbqspiflash..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module llqspi.
Optimizing module wbqspiflash.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== llqspi ===

   Number of wires:                163
   Number of wire bits:            859
   Number of public wires:          22
   Number of public wire bits:     160
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                154
     $add                            1
     $dff                            1
     $dffe                           9
     $eq                             8
     $logic_and                      2
     $logic_not                      4
     $logic_or                       1
     $mux                           91
     $ne                            12
     $not                            4
     $reduce_and                     9
     $reduce_bool                    3
     $reduce_or                      1
     $sdff                           1
     $sdffce                         1
     $sdffe                          1
     $sub                            5

=== wbqspiflash ===

   Number of wires:               1084
   Number of wire bits:           5608
   Number of public wires:          48
   Number of public wire bits:     329
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1068
     $add                            1
     $dffe                          12
     $eq                            43
     $logic_and                     36
     $logic_not                     22
     $logic_or                       4
     $mux                          713
     $ne                           127
     $not                           28
     $or                             1
     $pmux                          24
     $reduce_and                    20
     $reduce_bool                   12
     $reduce_or                      8
     $sdff                           3
     $sdffce                         1
     $sdffe                         11
     $sub                            1
     llqspi                          1

=== design hierarchy ===

   wbqspiflash                       1
     llqspi                          1

   Number of wires:               1247
   Number of wire bits:           6467
   Number of public wires:          70
   Number of public wire bits:     489
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1221
     $add                            2
     $dff                            1
     $dffe                          21
     $eq                            51
     $logic_and                     38
     $logic_not                     26
     $logic_or                       5
     $mux                          804
     $ne                           139
     $not                           32
     $or                             1
     $pmux                          24
     $reduce_and                    29
     $reduce_bool                   15
     $reduce_or                      9
     $sdff                           4
     $sdffce                         2
     $sdffe                         12
     $sub                            6

End of script. Logfile hash: ca4c64dbcf, CPU: user 1.10s system 0.00s, MEM: 25.02 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 5x opt_expr (0 sec), 21% 3x opt_dff (0 sec), ...
