
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:38)
Warning: Yosys has only limited support for tri-state logic at the moment. (/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:39)
Generating RTLIL representation for module `\i2crepeater'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: i2crepeater         
Automatically selected i2crepeater as design top module.

2.2. Analyzing design hierarchy..
Top module:  \i2crepeater

2.3. Analyzing design hierarchy..
Top module:  \i2crepeater
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 6 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:112$24 in module i2crepeater.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:52$7 in module i2crepeater.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\i2crepeater.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:52$7'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\i2crepeater.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:112$24'.
     1/4: $0\isread[0:0]
     2/4: $0\bitcount[3:0]
     3/4: $0\State[31:0]
     4/4: $0\sda_direction[31:0]
Creating decoders for process `\i2crepeater.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:100$23'.
Creating decoders for process `\i2crepeater.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:52$7'.
     1/8: $0\got_stop[0:0]
     2/8: $0\sda_old[0:0]
     3/8: $0\scl_old[0:0]
     4/8: $0\sda_samples[4:0]
     5/8: $0\scl_samples[4:0]
     6/8: $0\got_start[0:0]
     7/8: $0\sda_new[0:0]
     8/8: $0\scl_new[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\i2crepeater.\sda_direction' using process `\i2crepeater.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2crepeater.v:112$24'.
ERROR: Multiple edge sensitive events found for this signal!
