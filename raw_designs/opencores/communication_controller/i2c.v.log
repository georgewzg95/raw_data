
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Warning: Encountered `full_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `full_case' attribute or the SystemVerilog `unique' or `unique0' keywords is recommended!
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\i2c_master_bit_ctrl'.
Generating RTLIL representation for module `\i2c_master_byte_ctrl'.
Generating RTLIL representation for module `\i2c_master_top'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   2 design levels: i2c_master_top      
root of   1 design levels: i2c_master_byte_ctrl
root of   0 design levels: i2c_master_bit_ctrl 
Automatically selected i2c_master_top as design top module.

2.2. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl

2.3. Analyzing design hierarchy..
Top module:  \i2c_master_top
Used module:     \i2c_master_byte_ctrl
Used module:         \i2c_master_bit_ctrl
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1258$119 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109 in module i2c_master_top.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1175$104 in module i2c_master_top.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1151$102 in module i2c_master_top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1136$101 in module i2c_master_top.
Marked 10 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92 in module i2c_master_byte_ctrl.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:762$87 in module i2c_master_byte_ctrl.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:751$85 in module i2c_master_byte_ctrl.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:352$65 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:344$62 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:333$57 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:314$49 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:265$33 in module i2c_master_bit_ctrl.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:258$25 in module i2c_master_bit_ctrl.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:239$23 in module i2c_master_bit_ctrl.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:212$14 in module i2c_master_bit_ctrl.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:202$2 in module i2c_master_bit_ctrl.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 25 redundant assignments.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_i in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1258$119'.
Found async reset \rst_i in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109'.
Found async reset \rst_i in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1175$104'.
Found async reset \rst_i in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1151$102'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:762$87'.
Found async reset \nReset in `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:751$85'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:352$65'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:344$62'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:333$57'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:314$49'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:265$33'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:258$25'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:239$23'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:212$14'.
Found async reset \nReset in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:202$2'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1258$119'.
     1/1: $0\wb_inta_o[0:0]
Creating decoders for process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109'.
     1/4: $0\irq_flag[0:0]
     2/4: $0\tip[0:0]
     3/4: $0\rxack[0:0]
     4/4: $0\al[0:0]
Creating decoders for process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1175$104'.
     1/4: $0\cr[7:0] [7:4]
     2/4: $0\cr[7:0] [3]
     3/4: $0\cr[7:0] [2:1]
     4/4: $0\cr[7:0] [0]
Creating decoders for process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1151$102'.
     1/4: $0\prer[15:0] [15:8]
     2/4: $0\prer[15:0] [7:0]
     3/4: $0\ctr[7:0]
     4/4: $0\txr[7:0]
Creating decoders for process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1136$101'.
     1/1: $0\wb_dat_o[7:0]
Creating decoders for process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1132$97'.
Creating decoders for process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
     1/7: $0\cmd_ack[0:0]
     2/7: $0\ld[0:0]
     3/7: $0\shift[0:0]
     4/7: $0\core_txd[0:0]
     5/7: $0\core_cmd[3:0]
     6/7: $0\ack_out[0:0]
     7/7: $0\c_state[4:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:762$87'.
     1/1: $0\dcnt[2:0]
Creating decoders for process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:751$85'.
     1/1: $0\sr[7:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
     1/5: $0\cmd_ack[0:0]
     2/5: $0\c_state[17:0]
     3/5: $0\sda_chk[0:0]
     4/5: $0\sda_oen[0:0]
     5/5: $0\scl_oen[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:362$75'.
     1/1: $0\dout[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:352$65'.
     1/1: $0\al[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:344$62'.
     1/1: $0\cmd_stop[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:333$57'.
     1/1: $0\busy[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:314$49'.
     1/2: $0\sto_condition[0:0]
     2/2: $0\sta_condition[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37'.
     1/4: $0\dSDA[0:0]
     2/4: $0\dSCL[0:0]
     3/4: $0\sSDA[0:0]
     4/4: $0\sSCL[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:265$33'.
     1/2: $0\fSDA[2:0]
     2/2: $0\fSCL[2:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:258$25'.
     1/1: $0\filter_cnt[13:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:239$23'.
     1/2: $0\cSDA[1:0]
     2/2: $0\cSCL[1:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:212$14'.
     1/2: $0\clk_en[0:0]
     2/2: $0\cnt[15:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:202$2'.
     1/1: $0\slave_wait[0:0]
Creating decoders for process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:197$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\i2c_master_top.\wb_inta_o' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1258$119'.
  created $adff cell `$procdff$567' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\al' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109'.
  created $adff cell `$procdff$568' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\rxack' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109'.
  created $adff cell `$procdff$569' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\tip' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109'.
  created $adff cell `$procdff$570' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\irq_flag' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109'.
  created $adff cell `$procdff$571' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\cr' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1175$104'.
  created $adff cell `$procdff$572' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\prer' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1151$102'.
  created $adff cell `$procdff$573' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\ctr' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1151$102'.
  created $adff cell `$procdff$574' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\txr' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1151$102'.
  created $adff cell `$procdff$575' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_top.\wb_dat_o' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1136$101'.
  created $dff cell `$procdff$576' with positive edge clock.
Creating register for signal `\i2c_master_top.\wb_ack_o' using process `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1132$97'.
  created $dff cell `$procdff$577' with positive edge clock.
Creating register for signal `\i2c_master_byte_ctrl.\cmd_ack' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
  created $adff cell `$procdff$578' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\c_state' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
  created $adff cell `$procdff$579' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ack_out' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
  created $adff cell `$procdff$580' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_cmd' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
  created $adff cell `$procdff$581' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\core_txd' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
  created $adff cell `$procdff$582' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\shift' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
  created $adff cell `$procdff$583' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\ld' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
  created $adff cell `$procdff$584' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\dcnt' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:762$87'.
  created $adff cell `$procdff$585' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_byte_ctrl.\sr' using process `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:751$85'.
  created $adff cell `$procdff$586' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_ack' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
  created $adff cell `$procdff$587' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\scl_oen' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
  created $adff cell `$procdff$588' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_oen' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
  created $adff cell `$procdff$589' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sda_chk' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
  created $adff cell `$procdff$590' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\c_state' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
  created $adff cell `$procdff$591' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dout' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:362$75'.
  created $dff cell `$procdff$592' with positive edge clock.
Creating register for signal `\i2c_master_bit_ctrl.\al' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:352$65'.
  created $adff cell `$procdff$593' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cmd_stop' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:344$62'.
  created $adff cell `$procdff$594' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\busy' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:333$57'.
  created $adff cell `$procdff$595' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sta_condition' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:314$49'.
  created $adff cell `$procdff$596' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sto_condition' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:314$49'.
  created $adff cell `$procdff$597' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSCL' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37'.
  created $adff cell `$procdff$598' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\sSDA' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37'.
  created $adff cell `$procdff$599' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSCL' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37'.
  created $adff cell `$procdff$600' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dSDA' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37'.
  created $adff cell `$procdff$601' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\fSCL' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:265$33'.
  created $adff cell `$procdff$602' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\fSDA' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:265$33'.
  created $adff cell `$procdff$603' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\filter_cnt' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:258$25'.
  created $adff cell `$procdff$604' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cSCL' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:239$23'.
  created $adff cell `$procdff$605' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cSDA' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:239$23'.
  created $adff cell `$procdff$606' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\clk_en' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:212$14'.
  created $adff cell `$procdff$607' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\cnt' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:212$14'.
  created $adff cell `$procdff$608' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\slave_wait' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:202$2'.
  created $adff cell `$procdff$609' with positive edge clock and negative level reset.
Creating register for signal `\i2c_master_bit_ctrl.\dscl_oen' using process `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:197$1'.
  created $dff cell `$procdff$610' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1258$119'.
Removing empty process `i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1258$119'.
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109'.
Removing empty process `i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1234$109'.
Found and cleaned up 4 empty switches in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1175$104'.
Removing empty process `i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1175$104'.
Found and cleaned up 3 empty switches in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1151$102'.
Removing empty process `i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1151$102'.
Found and cleaned up 1 empty switch in `\i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1136$101'.
Removing empty process `i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1136$101'.
Removing empty process `i2c_master_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:1132$97'.
Found and cleaned up 15 empty switches in `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
Removing empty process `i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:779$92'.
Found and cleaned up 3 empty switches in `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:762$87'.
Removing empty process `i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:762$87'.
Found and cleaned up 3 empty switches in `\i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:751$85'.
Removing empty process `i2c_master_byte_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:751$85'.
Found and cleaned up 4 empty switches in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:388$78'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:362$75'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:362$75'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:352$65'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:352$65'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:344$62'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:344$62'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:333$57'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:333$57'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:314$49'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:314$49'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:284$37'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:265$33'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:265$33'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:258$25'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:258$25'.
Found and cleaned up 1 empty switch in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:239$23'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:239$23'.
Found and cleaned up 2 empty switches in `\i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:212$14'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:212$14'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:202$2'.
Removing empty process `i2c_master_bit_ctrl.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2c.v:197$1'.
Cleaned up 49 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
<suppressed ~3 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~8 debug messages>
Optimizing module i2c_master_bit_ctrl.
<suppressed ~6 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_top.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_bit_ctrl.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
<suppressed ~27 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~51 debug messages>
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~213 debug messages>
Removed a total of 97 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_top.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_bit_ctrl.
    New ctrl vector for $pmux cell $procmux$457: { $auto$opt_reduce.cc:134:opt_mux$616 $auto$opt_reduce.cc:134:opt_mux$614 $auto$opt_reduce.cc:134:opt_mux$612 }
    New ctrl vector for $pmux cell $procmux$432: { $procmux$483_CMP $auto$opt_reduce.cc:134:opt_mux$618 }
    New ctrl vector for $pmux cell $procmux$401: { $procmux$450_CMP $procmux$474_CMP $procmux$497_CMP $procmux$496_CMP $procmux$495_CMP $procmux$493_CMP $procmux$492_CMP $procmux$491_CMP $procmux$489_CMP $procmux$488_CMP $procmux$487_CMP $procmux$485_CMP $procmux$484_CMP $procmux$483_CMP $auto$opt_reduce.cc:134:opt_mux$620 }
    New ctrl vector for $pmux cell $procmux$390: $auto$opt_reduce.cc:134:opt_mux$622
    New ctrl vector for $pmux cell $procmux$481: { $auto$opt_reduce.cc:134:opt_mux$626 $auto$opt_reduce.cc:134:opt_mux$624 }
  Optimizing cells in module \i2c_master_bit_ctrl.
Performed a total of 5 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_top'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~6 debug messages>
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~3 debug messages>
Removed a total of 3 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$572 ($adff) from module i2c_master_top (D = $procmux$153_Y, Q = \cr [3]).
Adding EN signal on $procdff$572 ($adff) from module i2c_master_top (D = $procmux$145_Y, Q = \cr [7:4]).
Adding EN signal on $procdff$572 ($adff) from module i2c_master_top (D = { $procmux$161_Y $procmux$169_Y }, Q = \cr [2:0]).
Adding EN signal on $procdff$573 ($adff) from module i2c_master_top (D = $procmux$178_Y, Q = \prer [15:8]).
Adding EN signal on $procdff$573 ($adff) from module i2c_master_top (D = $procmux$188_Y, Q = \prer [7:0]).
Adding EN signal on $procdff$574 ($adff) from module i2c_master_top (D = $procmux$196_Y, Q = \ctr).
Adding EN signal on $procdff$575 ($adff) from module i2c_master_top (D = $procmux$203_Y, Q = \txr).
Adding EN signal on $procdff$579 ($adff) from module i2c_master_byte_ctrl (D = $procmux$371_Y, Q = \c_state).
Adding EN signal on $procdff$580 ($adff) from module i2c_master_byte_ctrl (D = $procmux$326_Y, Q = \ack_out).
Adding EN signal on $procdff$581 ($adff) from module i2c_master_byte_ctrl (D = $procmux$316_Y, Q = \core_cmd).
Adding EN signal on $procdff$585 ($adff) from module i2c_master_byte_ctrl (D = $procmux$379_Y, Q = \dcnt).
Adding EN signal on $procdff$586 ($adff) from module i2c_master_byte_ctrl (D = $procmux$387_Y, Q = \sr).
Adding EN signal on $procdff$608 ($adff) from module i2c_master_bit_ctrl (D = $procmux$565_Y, Q = \cnt).
Adding EN signal on $procdff$588 ($adff) from module i2c_master_bit_ctrl (D = $procmux$501_Y, Q = \scl_oen).
Adding EN signal on $procdff$589 ($adff) from module i2c_master_bit_ctrl (D = $procmux$478_Y, Q = \sda_oen).
Adding EN signal on $procdff$590 ($adff) from module i2c_master_bit_ctrl (D = $procmux$454_Y, Q = \sda_chk).
Adding EN signal on $procdff$591 ($adff) from module i2c_master_bit_ctrl (D = $procmux$429_Y, Q = \c_state).
Adding EN signal on $procdff$592 ($dff) from module i2c_master_bit_ctrl (D = \sSDA, Q = \dout).
Adding EN signal on $procdff$594 ($adff) from module i2c_master_bit_ctrl (D = $procmux$511_Y, Q = \cmd_stop).
Adding EN signal on $procdff$602 ($adff) from module i2c_master_bit_ctrl (D = $procmux$542_Y, Q = \fSCL).
Adding EN signal on $procdff$603 ($adff) from module i2c_master_bit_ctrl (D = $procmux$537_Y, Q = \fSDA).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_top..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Removed 7 unused cells and 269 unused wires.
<suppressed ~11 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
<suppressed ~5 debug messages>
Optimizing module i2c_master_byte_ctrl.
<suppressed ~5 debug messages>
Optimizing module i2c_master_top.
<suppressed ~6 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
<suppressed ~12 debug messages>
Finding identical cells in module `\i2c_master_byte_ctrl'.
<suppressed ~30 debug messages>
Finding identical cells in module `\i2c_master_top'.
<suppressed ~18 debug messages>
Removed a total of 20 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..
Removed 0 unused cells and 20 unused wires.
<suppressed ~3 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_master_bit_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_byte_ctrl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \i2c_master_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~45 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_master_bit_ctrl.
  Optimizing cells in module \i2c_master_byte_ctrl.
  Optimizing cells in module \i2c_master_top.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_master_bit_ctrl'.
Finding identical cells in module `\i2c_master_byte_ctrl'.
Finding identical cells in module `\i2c_master_top'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_master_bit_ctrl..
Finding unused cells or wires in module \i2c_master_byte_ctrl..
Finding unused cells or wires in module \i2c_master_top..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_master_bit_ctrl.
Optimizing module i2c_master_byte_ctrl.
Optimizing module i2c_master_top.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== i2c_master_bit_ctrl ===

   Number of wires:                160
   Number of wire bits:            409
   Number of public wires:          36
   Number of public wire bits:     105
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                149
     $adff                          14
     $adffe                          8
     $and                           17
     $dff                            1
     $dffe                           1
     $eq                            21
     $logic_not                      3
     $logic_or                       4
     $mux                           32
     $ne                             6
     $not                            7
     $or                             8
     $pmux                           5
     $reduce_and                     8
     $reduce_bool                    2
     $reduce_or                     10
     $sub                            2

=== i2c_master_byte_ctrl ===

   Number of wires:                110
   Number of wire bits:            289
   Number of public wires:          32
   Number of public wire bits:      77
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 89
     $adff                           4
     $adffe                          5
     $and                            1
     $eq                             5
     $logic_not                      1
     $mux                           49
     $ne                             6
     $not                            1
     $or                             3
     $pmux                           6
     $reduce_and                     2
     $reduce_bool                    3
     $reduce_or                      1
     $sub                            1
     i2c_master_bit_ctrl             1

=== i2c_master_top ===

   Number of wires:                102
   Number of wire bits:            278
   Number of public wires:          41
   Number of public wire bits:     107
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $adff                           5
     $adffe                          7
     $and                            6
     $dff                            2
     $eq                             7
     $logic_and                      1
     $logic_not                      1
     $mux                           30
     $ne                             5
     $not                            3
     $or                             4
     $pmux                           1
     $reduce_and                     6
     $reduce_bool                    2
     i2c_master_byte_ctrl            1

=== design hierarchy ===

   i2c_master_top                    1
     i2c_master_byte_ctrl            1
       i2c_master_bit_ctrl           1

   Number of wires:                372
   Number of wire bits:            976
   Number of public wires:         109
   Number of public wire bits:     289
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                317
     $adff                          23
     $adffe                         20
     $and                           24
     $dff                            3
     $dffe                           1
     $eq                            33
     $logic_and                      1
     $logic_not                      5
     $logic_or                       4
     $mux                          111
     $ne                            17
     $not                           11
     $or                            15
     $pmux                          12
     $reduce_and                    16
     $reduce_bool                    7
     $reduce_or                     11
     $sub                            3

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 64f97e6555, CPU: user 0.19s system 0.01s, MEM: 14.19 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 5x opt_expr (0 sec), 14% 4x opt_merge (0 sec), ...
