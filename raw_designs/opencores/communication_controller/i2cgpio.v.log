
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v' to AST representation.
Warning: Yosys has only limited support for tri-state logic at the moment. (/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:57)
Generating RTLIL representation for module `\i2c_gpio'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: i2c_gpio            
Automatically selected i2c_gpio as design top module.

2.2. Analyzing design hierarchy..
Top module:  \i2c_gpio

2.3. Analyzing design hierarchy..
Top module:  \i2c_gpio
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:29$1 in module i2c_gpio.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\i2c_gpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:29$1'.
     1/7: $3\sda_out[0:0]
     2/7: $2\sda_out[0:0]
     3/7: $1\sda_out[0:0]
     4/7: $0\sr[7:0] [7:1]
     5/7: $0\sr[7:0] [0]
     6/7: $0\gpio[3:0]
     7/7: $0\sr_out[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\i2c_gpio.\sda_out' using process `\i2c_gpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:29$1'.
  created $dff cell `$procdff$42' with positive edge clock.
Creating register for signal `\i2c_gpio.\sr_out' using process `\i2c_gpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:29$1'.
  created $dff cell `$procdff$43' with positive edge clock.
Creating register for signal `\i2c_gpio.\gpio [3:0]' using process `\i2c_gpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:29$1'.
  created $dff cell `$procdff$44' with positive edge clock.
Creating register for signal `\i2c_gpio.\sr' using process `\i2c_gpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:29$1'.
  created $dff cell `$procdff$45' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\i2c_gpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:29$1'.
Removing empty process `i2c_gpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/i2cgpio.v:29$1'.
Cleaned up 5 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_gpio.
<suppressed ~10 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_gpio.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_gpio'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_gpio..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/3 on $pmux $procmux$31.
    dead port 3/3 on $pmux $procmux$31.
    dead port 1/2 on $mux $procmux$19.
    dead port 1/2 on $mux $procmux$13.
    dead port 2/2 on $mux $procmux$11.
Removed 5 multiplexer ports.
<suppressed ~5 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_gpio.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_gpio'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$44 ($dff) from module i2c_gpio (D = \sr [7:4], Q = \gpio [3:0]).
Adding EN signal on $procdff$45 ($dff) from module i2c_gpio (D = { \sr [6:0] \sr_in }, Q = \sr).
Adding EN signal on $procdff$42 ($dff) from module i2c_gpio (D = $2\sda_out[0:0], Q = \sda_out).
Adding EN signal on $procdff$43 ($dff) from module i2c_gpio (D = \sr [7], Q = \sr_out).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_gpio..
Removed 10 unused cells and 37 unused wires.
<suppressed ~13 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_gpio.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_gpio..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_gpio.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_gpio'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$52 ($dffe) from module i2c_gpio (D = $3\sda_out[0:0], Q = \sda_out).
Adding SRST signal on $auto$ff.cc:262:slice$54 ($dffe) from module i2c_gpio (D = 1'x, Q = \sda_out, rval = 1'1).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_gpio..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_gpio.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_gpio..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_gpio.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_gpio'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_gpio..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_gpio.

4.23. Rerunning OPT passes. (Maybe there is more to do..)

4.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \i2c_gpio..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \i2c_gpio.
Performed a total of 0 changes.

4.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\i2c_gpio'.
Removed a total of 0 cells.

4.27. Executing OPT_DFF pass (perform DFF optimizations).

4.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \i2c_gpio..

4.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module i2c_gpio.

4.30. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== i2c_gpio ===

   Number of wires:                 13
   Number of wire bits:             33
   Number of public wires:           9
   Number of public wire bits:      29
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $dffe                           3
     $eq                             1
     $not                            1
     $reduce_and                     2
     $sdffce                         1

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 0122a30825, CPU: user 0.03s system 0.01s, MEM: 10.97 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 49% 6x opt_expr (0 sec), 12% 5x opt_merge (0 sec), ...
