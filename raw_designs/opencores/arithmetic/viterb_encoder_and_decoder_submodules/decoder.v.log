
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v' to AST representation.
Generating RTLIL representation for module `\decoder'.
Warning: Replacing memory \path_cost with list of registers. See /home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:172
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:488: Warning: Identifier `\d_o_disp_mem_0' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:497: Warning: Identifier `\d_o_disp_mem_1' is implicitly declared.
Generating RTLIL representation for module `\mem_disp'.
Generating RTLIL representation for module `\tbu'.
Generating RTLIL representation for module `\mem'.
Generating RTLIL representation for module `\ACS'.
Generating RTLIL representation for module `\bmc111'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:905: Warning: Identifier `\tmp00' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:906: Warning: Identifier `\tmp01' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:908: Warning: Identifier `\tmp10' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:909: Warning: Identifier `\tmp11' is implicitly declared.
Generating RTLIL representation for module `\bmc110'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:927: Warning: Identifier `\tmp00' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:928: Warning: Identifier `\tmp01' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:930: Warning: Identifier `\tmp10' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:931: Warning: Identifier `\tmp11' is implicitly declared.
Generating RTLIL representation for module `\bmc101'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:949: Warning: Identifier `\tmp00' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:950: Warning: Identifier `\tmp01' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:952: Warning: Identifier `\tmp10' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:953: Warning: Identifier `\tmp11' is implicitly declared.
Generating RTLIL representation for module `\bmc100'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:971: Warning: Identifier `\tmp00' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:972: Warning: Identifier `\tmp01' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:974: Warning: Identifier `\tmp10' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:975: Warning: Identifier `\tmp11' is implicitly declared.
Generating RTLIL representation for module `\bmc011'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:993: Warning: Identifier `\tmp00' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:994: Warning: Identifier `\tmp01' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:996: Warning: Identifier `\tmp10' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:997: Warning: Identifier `\tmp11' is implicitly declared.
Generating RTLIL representation for module `\bmc010'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1016: Warning: Identifier `\tmp00' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1017: Warning: Identifier `\tmp01' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1019: Warning: Identifier `\tmp10' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1020: Warning: Identifier `\tmp11' is implicitly declared.
Generating RTLIL representation for module `\bmc001'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1039: Warning: Identifier `\tmp00' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1040: Warning: Identifier `\tmp01' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1042: Warning: Identifier `\tmp10' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1043: Warning: Identifier `\tmp11' is implicitly declared.
Generating RTLIL representation for module `\bmc000'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1062: Warning: Identifier `\tmp00' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1063: Warning: Identifier `\tmp01' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1065: Warning: Identifier `\tmp10' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:1066: Warning: Identifier `\tmp11' is implicitly declared.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: bmc000              
root of   0 design levels: bmc001              
root of   0 design levels: bmc010              
root of   0 design levels: bmc011              
root of   0 design levels: bmc100              
root of   0 design levels: bmc101              
root of   0 design levels: bmc110              
root of   0 design levels: bmc111              
root of   0 design levels: ACS                 
root of   0 design levels: mem                 
root of   0 design levels: tbu                 
root of   0 design levels: mem_disp            
root of   1 design levels: decoder             
Automatically selected decoder as design top module.

2.2. Analyzing design hierarchy..
Top module:  \decoder
Used module:     \mem_disp
Used module:     \tbu
Used module:     \mem
Used module:     \ACS
Used module:     \bmc111
Used module:     \bmc110
Used module:     \bmc101
Used module:     \bmc100
Used module:     \bmc011
Used module:     \bmc010
Used module:     \bmc001
Used module:     \bmc000

2.3. Analyzing design hierarchy..
Top module:  \decoder
Used module:     \mem_disp
Used module:     \tbu
Used module:     \mem
Used module:     \ACS
Used module:     \bmc111
Used module:     \bmc110
Used module:     \bmc101
Used module:     \bmc100
Used module:     \bmc011
Used module:     \bmc010
Used module:     \bmc001
Used module:     \bmc000
Removed 0 unused modules.
Mapping positional arguments of cell decoder.ACS111 (ACS).
Mapping positional arguments of cell decoder.ACS110 (ACS).
Mapping positional arguments of cell decoder.ACS101 (ACS).
Mapping positional arguments of cell decoder.ACS100 (ACS).
Mapping positional arguments of cell decoder.ACS011 (ACS).
Mapping positional arguments of cell decoder.ACS010 (ACS).
Mapping positional arguments of cell decoder.ACS001 (ACS).
Mapping positional arguments of cell decoder.ACS000 (ACS).
Mapping positional arguments of cell decoder.bmc111_inst (bmc111).
Mapping positional arguments of cell decoder.bmc110_inst (bmc110).
Mapping positional arguments of cell decoder.bmc101_inst (bmc101).
Mapping positional arguments of cell decoder.bmc100_inst (bmc100).
Mapping positional arguments of cell decoder.bmc011_inst (bmc011).
Mapping positional arguments of cell decoder.bmc010_inst (bmc010).
Mapping positional arguments of cell decoder.bmc001_inst (bmc001).
Mapping positional arguments of cell decoder.bmc000_inst (bmc000).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:875$94 in module ACS.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:875$94 in module ACS.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:833$81 in module mem.
Removed 17 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:640$71 in module tbu.
Marked 25 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:640$71 in module tbu.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:627$65 in module tbu.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:583$56 in module mem_disp.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:550$54 in module decoder.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:525$51 in module decoder.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:514$47 in module decoder.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:504$43 in module decoder.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41 in module decoder.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:387$38 in module decoder.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:375$35 in module decoder.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32 in module decoder.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:252$27 in module decoder.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:241$23 in module decoder.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:231$19 in module decoder.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1 in module decoder.
Removed a total of 18 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 35 redundant assignments.
Promoted 25 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:627$65'.
Found async reset \rst in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:387$38'.
Found async reset \rst in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:375$35'.
Found async reset \rst in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:252$27'.
Found async reset \rst in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:241$23'.
Found async reset \rst in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:231$19'.
Found async reset \rst in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ACS.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:875$94'.
     1/2: $1\valid_o[0:0]
     2/2: $1\selection[0:0]
Creating decoders for process `\mem.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:833$81'.
     1/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:836$80_EN[7:0]$87
     2/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:836$80_DATA[7:0]$86
     3/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:836$80_ADDR[9:0]$85
Creating decoders for process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:640$71'.
     1/43: $25\nstate[2:0]
     2/43: $24\nstate[2:0]
     3/43: $23\nstate[2:0]
     4/43: $9\wr_en_reg[0:0]
     5/43: $9\d_o_reg[0:0]
     6/43: $22\nstate[2:0]
     7/43: $21\nstate[2:0]
     8/43: $20\nstate[2:0]
     9/43: $8\wr_en_reg[0:0]
    10/43: $8\d_o_reg[0:0]
    11/43: $19\nstate[2:0]
    12/43: $18\nstate[2:0]
    13/43: $17\nstate[2:0]
    14/43: $7\wr_en_reg[0:0]
    15/43: $7\d_o_reg[0:0]
    16/43: $16\nstate[2:0]
    17/43: $15\nstate[2:0]
    18/43: $14\nstate[2:0]
    19/43: $6\wr_en_reg[0:0]
    20/43: $6\d_o_reg[0:0]
    21/43: $13\nstate[2:0]
    22/43: $12\nstate[2:0]
    23/43: $11\nstate[2:0]
    24/43: $5\wr_en_reg[0:0]
    25/43: $5\d_o_reg[0:0]
    26/43: $10\nstate[2:0]
    27/43: $9\nstate[2:0]
    28/43: $8\nstate[2:0]
    29/43: $4\wr_en_reg[0:0]
    30/43: $4\d_o_reg[0:0]
    31/43: $7\nstate[2:0]
    32/43: $6\nstate[2:0]
    33/43: $5\nstate[2:0]
    34/43: $3\wr_en_reg[0:0]
    35/43: $3\d_o_reg[0:0]
    36/43: $4\nstate[2:0]
    37/43: $3\nstate[2:0]
    38/43: $2\nstate[2:0]
    39/43: $2\wr_en_reg[0:0]
    40/43: $2\d_o_reg[0:0]
    41/43: $1\nstate[2:0]
    42/43: $1\wr_en_reg[0:0]
    43/43: $1\d_o_reg[0:0]
Creating decoders for process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:627$65'.
     1/1: $0\pstate[2:0]
Creating decoders for process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:621$64'.
Creating decoders for process `\mem_disp.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:583$56'.
     1/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:586$55_EN[0:0]$62
     2/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:586$55_DATA[0:0]$61
     3/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:586$55_ADDR[9:0]$60
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:550$54'.
     1/1: $0\decoder_o_reg[0:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:545$53'.
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:542$52'.
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:525$51'.
     1/2: $0\addr_disp_mem_1[9:0]
     2/2: $0\addr_disp_mem_0[9:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:514$47'.
     1/1: $0\rd_mem_counter_disp[9:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:504$43'.
     1/1: $0\wr_mem_counter_disp[9:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:501$42'.
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
     1/6: $0\selection_tbu_1[0:0]
     2/6: $0\selection_tbu_0[0:0]
     3/6: $0\d_in_1_tbu_1[7:0]
     4/6: $0\d_in_0_tbu_1[7:0]
     5/6: $0\d_in_1_tbu_0[7:0]
     6/6: $0\d_in_0_tbu_0[7:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:387$38'.
     1/1: $0\enable_tbu_1[0:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:375$35'.
     1/1: $0\enable_tbu_0[0:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:371$34'.
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:368$33'.
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
     1/8: $0\wr_mem_D[0:0]
     2/8: $0\wr_mem_C[0:0]
     3/8: $0\wr_mem_B[0:0]
     4/8: $0\wr_mem_A[0:0]
     5/8: $0\addr_mem_D[9:0]
     6/8: $0\addr_mem_C[9:0]
     7/8: $0\addr_mem_B[9:0]
     8/8: $0\addr_mem_A[9:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:263$31'.
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:252$27'.
     1/1: $0\mem_bank[1:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:241$23'.
     1/2: $0\rd_mem_counter[9:0]
     2/2: $1\wr_mem_counter[9:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:231$19'.
     1/1: $0\wr_mem_counter[9:0]
Creating decoders for process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
     1/10: $0\path_cost[7][7:0]
     2/10: $0\path_cost[6][7:0]
     3/10: $0\path_cost[5][7:0]
     4/10: $0\path_cost[4][7:0]
     5/10: $0\path_cost[3][7:0]
     6/10: $0\path_cost[2][7:0]
     7/10: $0\path_cost[1][7:0]
     8/10: $0\path_cost[0][7:0]
     9/10: $0\selection[7:0]
    10/10: $0\validity[7:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ACS.\selection' from process `\ACS.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:875$94'.
No latch inferred for signal `\ACS.\valid_o' from process `\ACS.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:875$94'.
No latch inferred for signal `\tbu.\wr_en_reg' from process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:640$71'.
No latch inferred for signal `\tbu.\nstate' from process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:640$71'.
Latch inferred for signal `\tbu.\d_o_reg' from process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:640$71': $auto$proc_dlatch.cc:427:proc_dlatch$902

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mem.\d_o' using process `\mem.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:833$81'.
  created $dff cell `$procdff$903' with positive edge clock.
Creating register for signal `\mem.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:836$80_ADDR' using process `\mem.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:833$81'.
  created $dff cell `$procdff$904' with positive edge clock.
Creating register for signal `\mem.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:836$80_DATA' using process `\mem.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:833$81'.
  created $dff cell `$procdff$905' with positive edge clock.
Creating register for signal `\mem.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:836$80_EN' using process `\mem.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:833$81'.
  created $dff cell `$procdff$906' with positive edge clock.
Creating register for signal `\tbu.\pstate' using process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:627$65'.
  created $adff cell `$procdff$907' with positive edge clock and negative level reset.
Creating register for signal `\tbu.\d_o' using process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:621$64'.
  created $dff cell `$procdff$908' with positive edge clock.
Creating register for signal `\tbu.\wr_en' using process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:621$64'.
  created $dff cell `$procdff$909' with positive edge clock.
Creating register for signal `\tbu.\selection_buf' using process `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:621$64'.
  created $dff cell `$procdff$910' with positive edge clock.
Creating register for signal `\mem_disp.\d_o' using process `\mem_disp.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:583$56'.
  created $dff cell `$procdff$911' with positive edge clock.
Creating register for signal `\mem_disp.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:586$55_ADDR' using process `\mem_disp.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:583$56'.
  created $dff cell `$procdff$912' with positive edge clock.
Creating register for signal `\mem_disp.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:586$55_DATA' using process `\mem_disp.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:583$56'.
  created $dff cell `$procdff$913' with positive edge clock.
Creating register for signal `\mem_disp.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:586$55_EN' using process `\mem_disp.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:583$56'.
  created $dff cell `$procdff$914' with positive edge clock.
Creating register for signal `\decoder.\decoder_o_reg' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:550$54'.
  created $dff cell `$procdff$915' with positive edge clock.
Creating register for signal `\decoder.\mem_bank_buf_buf_buf_buf_buf' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:545$53'.
  created $dff cell `$procdff$916' with positive edge clock.
Creating register for signal `\decoder.\mem_bank_buf_buf_buf_buf' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:542$52'.
  created $dff cell `$procdff$917' with positive edge clock.
Creating register for signal `\decoder.\addr_disp_mem_0' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:525$51'.
  created $dff cell `$procdff$918' with positive edge clock.
Creating register for signal `\decoder.\addr_disp_mem_1' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:525$51'.
  created $dff cell `$procdff$919' with positive edge clock.
Creating register for signal `\decoder.\rd_mem_counter_disp' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:514$47'.
  created $dff cell `$procdff$920' with positive edge clock.
Creating register for signal `\decoder.\wr_mem_counter_disp' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:504$43'.
  created $dff cell `$procdff$921' with positive edge clock.
Creating register for signal `\decoder.\mem_bank_buf_buf_buf' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:501$42'.
  created $dff cell `$procdff$922' with positive edge clock.
Creating register for signal `\decoder.\selection_tbu_0' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
  created $dff cell `$procdff$923' with positive edge clock.
Creating register for signal `\decoder.\selection_tbu_1' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
  created $dff cell `$procdff$924' with positive edge clock.
Creating register for signal `\decoder.\d_in_0_tbu_0' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
  created $dff cell `$procdff$925' with positive edge clock.
Creating register for signal `\decoder.\d_in_1_tbu_0' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
  created $dff cell `$procdff$926' with positive edge clock.
Creating register for signal `\decoder.\d_in_0_tbu_1' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
  created $dff cell `$procdff$927' with positive edge clock.
Creating register for signal `\decoder.\d_in_1_tbu_1' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
  created $dff cell `$procdff$928' with positive edge clock.
Creating register for signal `\decoder.\enable_tbu_1' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:387$38'.
  created $adff cell `$procdff$929' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\enable_tbu_0' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:375$35'.
  created $adff cell `$procdff$930' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\mem_bank_buf_buf' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:371$34'.
  created $dff cell `$procdff$931' with positive edge clock.
Creating register for signal `\decoder.\mem_bank_buf' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:368$33'.
  created $dff cell `$procdff$932' with positive edge clock.
Creating register for signal `\decoder.\addr_mem_A' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
  created $dff cell `$procdff$933' with positive edge clock.
Creating register for signal `\decoder.\addr_mem_B' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
  created $dff cell `$procdff$934' with positive edge clock.
Creating register for signal `\decoder.\addr_mem_C' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
  created $dff cell `$procdff$935' with positive edge clock.
Creating register for signal `\decoder.\addr_mem_D' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
  created $dff cell `$procdff$936' with positive edge clock.
Creating register for signal `\decoder.\wr_mem_A' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
  created $dff cell `$procdff$937' with positive edge clock.
Creating register for signal `\decoder.\wr_mem_B' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
  created $dff cell `$procdff$938' with positive edge clock.
Creating register for signal `\decoder.\wr_mem_C' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
  created $dff cell `$procdff$939' with positive edge clock.
Creating register for signal `\decoder.\wr_mem_D' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
  created $dff cell `$procdff$940' with positive edge clock.
Creating register for signal `\decoder.\d_in_mem_A' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:263$31'.
  created $dff cell `$procdff$941' with positive edge clock.
Creating register for signal `\decoder.\d_in_mem_B' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:263$31'.
  created $dff cell `$procdff$942' with positive edge clock.
Creating register for signal `\decoder.\d_in_mem_C' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:263$31'.
  created $dff cell `$procdff$943' with positive edge clock.
Creating register for signal `\decoder.\d_in_mem_D' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:263$31'.
  created $dff cell `$procdff$944' with positive edge clock.
Creating register for signal `\decoder.\mem_bank' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:252$27'.
  created $adff cell `$procdff$945' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\wr_mem_counter' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:241$23'.
  created $dff cell `$procdff$948' with positive edge clock.
Creating register for signal `\decoder.\rd_mem_counter' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:241$23'.
  created $adff cell `$procdff$949' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\wr_mem_counter' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:231$19'.
  created $adff cell `$procdff$950' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\validity' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$951' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\selection' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$952' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\path_cost[0]' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$953' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\path_cost[1]' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$954' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\path_cost[2]' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$955' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\path_cost[3]' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$956' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\path_cost[4]' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$957' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\path_cost[5]' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$958' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\path_cost[6]' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$959' with positive edge clock and negative level reset.
Creating register for signal `\decoder.\path_cost[7]' using process `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
  created $adff cell `$procdff$960' with positive edge clock and negative level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\ACS.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:875$94'.
Removing empty process `ACS.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:875$94'.
Found and cleaned up 1 empty switch in `\mem.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:833$81'.
Removing empty process `mem.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:833$81'.
Found and cleaned up 25 empty switches in `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:640$71'.
Removing empty process `tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:640$71'.
Found and cleaned up 2 empty switches in `\tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:627$65'.
Removing empty process `tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:627$65'.
Removing empty process `tbu.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:621$64'.
Found and cleaned up 1 empty switch in `\mem_disp.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:583$56'.
Removing empty process `mem_disp.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:583$56'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:550$54'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:550$54'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:545$53'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:542$52'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:525$51'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:525$51'.
Found and cleaned up 2 empty switches in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:514$47'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:514$47'.
Found and cleaned up 2 empty switches in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:504$43'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:504$43'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:501$42'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:399$41'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:387$38'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:387$38'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:375$35'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:375$35'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:371$34'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:368$33'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:273$32'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:263$31'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:252$27'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:252$27'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:241$23'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:241$23'.
Found and cleaned up 1 empty switch in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:231$19'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:231$19'.
Found and cleaned up 2 empty switches in `\decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
Removing empty process `decoder.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:165$1'.
Cleaned up 45 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module bmc000.
<suppressed ~4 debug messages>
Optimizing module bmc001.
<suppressed ~4 debug messages>
Optimizing module bmc010.
<suppressed ~4 debug messages>
Optimizing module bmc011.
<suppressed ~4 debug messages>
Optimizing module bmc100.
<suppressed ~4 debug messages>
Optimizing module bmc101.
<suppressed ~4 debug messages>
Optimizing module bmc110.
<suppressed ~4 debug messages>
Optimizing module bmc111.
<suppressed ~4 debug messages>
Optimizing module ACS.
<suppressed ~3 debug messages>
Optimizing module mem.
Optimizing module tbu.
<suppressed ~134 debug messages>
Optimizing module mem_disp.
Optimizing module decoder.
<suppressed ~45 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module ACS.
Optimizing module mem.
Optimizing module tbu.
Optimizing module mem_disp.
Optimizing module decoder.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\ACS'.
<suppressed ~12 debug messages>
Finding identical cells in module `\mem'.
Finding identical cells in module `\tbu'.
<suppressed ~192 debug messages>
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\decoder'.
<suppressed ~195 debug messages>
Removed a total of 133 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$465.
    dead port 2/2 on $mux $procmux$453.
    dead port 2/2 on $mux $procmux$451.
    dead port 2/2 on $mux $procmux$429.
    dead port 2/2 on $mux $procmux$419.
    dead port 2/2 on $mux $procmux$409.
    dead port 1/2 on $mux $procmux$407.
    dead port 2/2 on $mux $procmux$396.
    dead port 2/2 on $mux $procmux$394.
    dead port 2/2 on $mux $procmux$374.
    dead port 2/2 on $mux $procmux$365.
    dead port 2/2 on $mux $procmux$356.
    dead port 1/2 on $mux $procmux$354.
    dead port 2/2 on $mux $procmux$344.
    dead port 2/2 on $mux $procmux$342.
    dead port 2/2 on $mux $procmux$324.
    dead port 2/2 on $mux $procmux$316.
    dead port 2/2 on $mux $procmux$554.
    dead port 2/2 on $mux $procmux$308.
    dead port 1/2 on $mux $procmux$306.
    dead port 2/2 on $mux $procmux$297.
    dead port 2/2 on $mux $procmux$295.
    dead port 2/2 on $mux $procmux$542.
    dead port 2/2 on $mux $procmux$279.
    dead port 2/2 on $mux $procmux$272.
    dead port 2/2 on $mux $procmux$265.
    dead port 2/2 on $mux $procmux$530.
    dead port 1/2 on $mux $procmux$263.
    dead port 2/2 on $mux $procmux$255.
    dead port 2/2 on $mux $procmux$253.
    dead port 1/2 on $mux $procmux$528.
    dead port 2/2 on $mux $procmux$239.
    dead port 2/2 on $mux $procmux$233.
    dead port 2/2 on $mux $procmux$227.
    dead port 2/2 on $mux $procmux$515.
    dead port 1/2 on $mux $procmux$225.
    dead port 2/2 on $mux $procmux$218.
    dead port 2/2 on $mux $procmux$216.
    dead port 2/2 on $mux $procmux$513.
    dead port 2/2 on $mux $procmux$204.
    dead port 2/2 on $mux $procmux$199.
    dead port 2/2 on $mux $procmux$194.
    dead port 1/2 on $mux $procmux$192.
    dead port 2/2 on $mux $procmux$186.
    dead port 2/2 on $mux $procmux$184.
    dead port 2/2 on $mux $procmux$489.
    dead port 2/2 on $mux $procmux$478.
    dead port 2/2 on $mux $procmux$467.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 48 multiplexer ports.
<suppressed ~47 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \ACS.
    New ctrl vector for $pmux cell $procmux$161: { $procmux$165_CMP $auto$opt_reduce.cc:134:opt_mux$996 }
    New ctrl vector for $pmux cell $procmux$166: { $procmux$169_CMP $auto$opt_reduce.cc:134:opt_mux$998 $procmux$167_CMP }
  Optimizing cells in module \ACS.
  Optimizing cells in module \mem.
    Consolidated identical input bits for $mux cell $procmux$172:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$172_Y
      New ports: A=1'0, B=1'1, Y=$procmux$172_Y [0]
      New connections: $procmux$172_Y [7:1] = { $procmux$172_Y [0] $procmux$172_Y [0] $procmux$172_Y [0] $procmux$172_Y [0] $procmux$172_Y [0] $procmux$172_Y [0] $procmux$172_Y [0] }
  Optimizing cells in module \mem.
  Optimizing cells in module \tbu.
    New ctrl vector for $pmux cell $procmux$586: { $procmux$593_CMP $procmux$592_CMP $procmux$591_CMP $procmux$590_CMP $procmux$589_CMP $procmux$588_CMP $procmux$587_CMP }
  Optimizing cells in module \tbu.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \decoder.
    New ctrl vector for $pmux cell $procmux$696: { $procmux$700_CMP $procmux$698_CMP $auto$opt_reduce.cc:134:opt_mux$1000 }
    New ctrl vector for $pmux cell $procmux$691: { $procmux$699_CMP $auto$opt_reduce.cc:134:opt_mux$1002 $procmux$697_CMP }
    New ctrl vector for $pmux cell $procmux$686: { $procmux$700_CMP $procmux$698_CMP $auto$opt_reduce.cc:134:opt_mux$1004 }
    New ctrl vector for $pmux cell $procmux$681: { $procmux$699_CMP $auto$opt_reduce.cc:134:opt_mux$1006 $procmux$697_CMP }
    New ctrl vector for $pmux cell $procmux$676: { $procmux$700_CMP $auto$opt_reduce.cc:134:opt_mux$1008 }
    New ctrl vector for $pmux cell $procmux$671: { $procmux$699_CMP $auto$opt_reduce.cc:134:opt_mux$1010 }
    New ctrl vector for $pmux cell $procmux$666: { $procmux$698_CMP $auto$opt_reduce.cc:134:opt_mux$1012 }
    New ctrl vector for $pmux cell $procmux$661: { $auto$opt_reduce.cc:134:opt_mux$1014 $procmux$697_CMP }
    New ctrl vector for $pmux cell $procmux$650: { $auto$opt_reduce.cc:134:opt_mux$1018 $auto$opt_reduce.cc:134:opt_mux$1016 }
    New ctrl vector for $pmux cell $procmux$645: { $auto$opt_reduce.cc:134:opt_mux$1022 $auto$opt_reduce.cc:134:opt_mux$1020 }
    New ctrl vector for $pmux cell $procmux$640: { $auto$opt_reduce.cc:134:opt_mux$1026 $auto$opt_reduce.cc:134:opt_mux$1024 }
    New ctrl vector for $pmux cell $procmux$635: { $auto$opt_reduce.cc:134:opt_mux$1030 $auto$opt_reduce.cc:134:opt_mux$1028 }
    New ctrl vector for $pmux cell $procmux$630: { $auto$opt_reduce.cc:134:opt_mux$1034 $auto$opt_reduce.cc:134:opt_mux$1032 }
    New ctrl vector for $pmux cell $procmux$625: { $auto$opt_reduce.cc:134:opt_mux$1038 $auto$opt_reduce.cc:134:opt_mux$1036 }
  Optimizing cells in module \decoder.
Performed a total of 18 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\ACS'.
Finding identical cells in module `\mem'.
Finding identical cells in module `\tbu'.
<suppressed ~21 debug messages>
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\decoder'.
<suppressed ~24 debug messages>
Removed a total of 15 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$920 ($dff) from module decoder (D = $add$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:521$50_Y, Q = \rd_mem_counter_disp, rval = 10'1111111101).
Adding SRST signal on $procdff$921 ($dff) from module decoder (D = $sub$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:511$46_Y, Q = \wr_mem_counter_disp, rval = 10'0000000010).
Adding EN signal on $procdff$929 ($adff) from module decoder (D = 1'1, Q = \enable_tbu_1).
Adding EN signal on $procdff$930 ($adff) from module decoder (D = 1'1, Q = \enable_tbu_0).
Adding EN signal on $procdff$945 ($adff) from module decoder (D = $add$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:258$30_Y, Q = \mem_bank).
Adding EN signal on $procdff$948 ($dff) from module decoder (D = 10'0000000000, Q = \wr_mem_counter).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 2 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 5 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 7 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Setting constant 0-bit at position 9 on $auto$ff.cc:262:slice$1044 ($dffe) from module decoder.
Adding EN signal on $procdff$949 ($adff) from module decoder (D = $sub$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/viterb_encoder_and_decoder_submodules/decoder.v:248$26_Y, Q = \rd_mem_counter).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \tbu..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \decoder..
Warning: Driver-driver conflict for \wr_mem_counter [9] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [8] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [7] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [6] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [5] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [4] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [3] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [2] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [1] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Warning: Driver-driver conflict for \wr_mem_counter [0] between cell $procdff$950.Q and constant 1'0 in decoder: Resolved using constant.
Removed 24 unused cells and 574 unused wires.
<suppressed ~37 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
<suppressed ~1 debug messages>
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~39 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ACS.
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \decoder.
    New ctrl vector for $pmux cell $procmux$681: { $auto$opt_reduce.cc:134:opt_mux$1002 $auto$opt_reduce.cc:134:opt_mux$1051 }
    New ctrl vector for $pmux cell $procmux$686: { $auto$opt_reduce.cc:134:opt_mux$1053 $auto$opt_reduce.cc:134:opt_mux$1000 }
    New ctrl vector for $pmux cell $procmux$691: { $auto$opt_reduce.cc:134:opt_mux$1002 $auto$opt_reduce.cc:134:opt_mux$1055 }
    New ctrl vector for $pmux cell $procmux$696: { $auto$opt_reduce.cc:134:opt_mux$1057 $auto$opt_reduce.cc:134:opt_mux$1000 }
  Optimizing cells in module \decoder.
  Optimizing cells in module \mem.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \tbu.
    New ctrl vector for $pmux cell $procmux$577: $auto$opt_reduce.cc:134:opt_mux$1059
  Optimizing cells in module \tbu.
Performed a total of 5 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ACS'.
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\decoder'.
<suppressed ~24 debug messages>
Finding identical cells in module `\mem'.
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\tbu'.
Removed a total of 8 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Handling never-active EN on $auto$ff.cc:262:slice$1043 ($adffe) from module decoder (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1043 ($adffe) from module decoder.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$1043 ($adffe) from module decoder.

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \tbu..
Removed 1 unused cells and 8 unused wires.
<suppressed ~2 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
<suppressed ~10 debug messages>
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/3 on $pmux $procmux$661.
    dead port 3/3 on $pmux $procmux$661.
    dead port 2/3 on $pmux $procmux$666.
    dead port 3/3 on $pmux $procmux$666.
    dead port 2/3 on $pmux $procmux$671.
    dead port 3/3 on $pmux $procmux$671.
    dead port 1/3 on $pmux $procmux$676.
    dead port 3/3 on $pmux $procmux$676.
    dead port 1/3 on $pmux $procmux$681.
    dead port 3/3 on $pmux $procmux$681.
    dead port 1/3 on $pmux $procmux$686.
    dead port 3/3 on $pmux $procmux$686.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~37 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ACS.
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \decoder.
  Optimizing cells in module \mem.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \tbu.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ACS'.
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\decoder'.
<suppressed ~6 debug messages>
Finding identical cells in module `\mem'.
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\tbu'.
Removed a total of 2 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$932 ($dff) from module decoder.
Setting constant 0-bit at position 1 on $procdff$932 ($dff) from module decoder.

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \tbu..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.23. Rerunning OPT passes. (Maybe there is more to do..)

4.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~31 debug messages>

4.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ACS.
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \decoder.
  Optimizing cells in module \mem.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \tbu.
Performed a total of 0 changes.

4.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ACS'.
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\mem'.
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\tbu'.
Removed a total of 0 cells.

4.27. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$938 ($dff) from module decoder.
Setting constant 1-bit at position 0 on $procdff$937 ($dff) from module decoder.
Setting constant 0-bit at position 0 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 1 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 2 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 3 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 4 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 5 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 6 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 7 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 8 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 9 on $procdff$933 ($dff) from module decoder.
Setting constant 0-bit at position 0 on $procdff$931 ($dff) from module decoder.
Setting constant 0-bit at position 1 on $procdff$931 ($dff) from module decoder.

4.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \tbu..

4.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
<suppressed ~10 debug messages>
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.30. Rerunning OPT passes. (Maybe there is more to do..)

4.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/3 on $pmux $procmux$625.
    dead port 3/3 on $pmux $procmux$625.
    dead port 1/3 on $pmux $procmux$630.
    dead port 3/3 on $pmux $procmux$630.
    dead port 2/3 on $pmux $procmux$635.
    dead port 3/3 on $pmux $procmux$635.
    dead port 2/3 on $pmux $procmux$640.
    dead port 3/3 on $pmux $procmux$640.
    dead port 1/3 on $pmux $procmux$645.
    dead port 3/3 on $pmux $procmux$645.
    dead port 1/3 on $pmux $procmux$650.
    dead port 3/3 on $pmux $procmux$650.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 12 multiplexer ports.
<suppressed ~31 debug messages>

4.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ACS.
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \decoder.
  Optimizing cells in module \mem.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \tbu.
Performed a total of 0 changes.

4.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ACS'.
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\decoder'.
<suppressed ~9 debug messages>
Finding identical cells in module `\mem'.
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\tbu'.
Removed a total of 3 cells.

4.34. Executing OPT_DFF pass (perform DFF optimizations).
Handling never-active EN on $auto$ff.cc:262:slice$1041 ($adffe) from module decoder (removing D path).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$1041 ($adffe) from module decoder.
Setting constant 0-bit at position 0 on $procdff$922 ($dff) from module decoder.

4.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \tbu..
Removed 1 unused cells and 17 unused wires.
<suppressed ~3 debug messages>

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
<suppressed ~1 debug messages>
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.37. Rerunning OPT passes. (Maybe there is more to do..)

4.38. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/3 on $pmux $procmux$613.
    dead port 3/3 on $pmux $procmux$613.
    dead port 1/3 on $pmux $procmux$616.
    dead port 3/3 on $pmux $procmux$616.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 4 multiplexer ports.
<suppressed ~25 debug messages>

4.39. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ACS.
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \decoder.
  Optimizing cells in module \mem.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \tbu.
Performed a total of 0 changes.

4.40. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ACS'.
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\mem'.
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\tbu'.
Removed a total of 0 cells.

4.41. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 1-bit at position 0 on $procdff$924 ($dff) from module decoder.
Setting constant 0-bit at position 0 on $procdff$917 ($dff) from module decoder.

4.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \tbu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

4.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.44. Rerunning OPT passes. (Maybe there is more to do..)

4.45. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

4.46. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ACS.
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \decoder.
  Optimizing cells in module \mem.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \tbu.
Performed a total of 0 changes.

4.47. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ACS'.
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\mem'.
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\tbu'.
Removed a total of 0 cells.

4.48. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $procdff$916 ($dff) from module decoder.

4.49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \tbu..

4.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
<suppressed ~1 debug messages>
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.51. Rerunning OPT passes. (Maybe there is more to do..)

4.52. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/3 on $pmux $procmux$610.
    dead port 3/3 on $pmux $procmux$610.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 2 multiplexer ports.
<suppressed ~23 debug messages>

4.53. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ACS.
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \decoder.
  Optimizing cells in module \mem.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \tbu.
Performed a total of 0 changes.

4.54. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ACS'.
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\mem'.
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\tbu'.
Removed a total of 0 cells.

4.55. Executing OPT_DFF pass (perform DFF optimizations).

4.56. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \tbu..
Removed 7 unused cells and 11 unused wires.
<suppressed ~16 debug messages>

4.57. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.58. Rerunning OPT passes. (Maybe there is more to do..)

4.59. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ACS..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \bmc000..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc100..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc101..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc110..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \bmc111..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \decoder..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \mem_disp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~22 debug messages>

4.60. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ACS.
  Optimizing cells in module \bmc000.
  Optimizing cells in module \bmc001.
  Optimizing cells in module \bmc010.
  Optimizing cells in module \bmc011.
  Optimizing cells in module \bmc100.
  Optimizing cells in module \bmc101.
  Optimizing cells in module \bmc110.
  Optimizing cells in module \bmc111.
  Optimizing cells in module \decoder.
  Optimizing cells in module \mem.
  Optimizing cells in module \mem_disp.
  Optimizing cells in module \tbu.
Performed a total of 0 changes.

4.61. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ACS'.
Finding identical cells in module `\bmc000'.
Finding identical cells in module `\bmc001'.
Finding identical cells in module `\bmc010'.
Finding identical cells in module `\bmc011'.
Finding identical cells in module `\bmc100'.
Finding identical cells in module `\bmc101'.
Finding identical cells in module `\bmc110'.
Finding identical cells in module `\bmc111'.
Finding identical cells in module `\decoder'.
Finding identical cells in module `\mem'.
Finding identical cells in module `\mem_disp'.
Finding identical cells in module `\tbu'.
Removed a total of 0 cells.

4.62. Executing OPT_DFF pass (perform DFF optimizations).

4.63. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ACS..
Finding unused cells or wires in module \bmc000..
Finding unused cells or wires in module \bmc001..
Finding unused cells or wires in module \bmc010..
Finding unused cells or wires in module \bmc011..
Finding unused cells or wires in module \bmc100..
Finding unused cells or wires in module \bmc101..
Finding unused cells or wires in module \bmc110..
Finding unused cells or wires in module \bmc111..
Finding unused cells or wires in module \decoder..
Finding unused cells or wires in module \mem..
Finding unused cells or wires in module \mem_disp..
Finding unused cells or wires in module \tbu..

4.64. Executing OPT_EXPR pass (perform const folding).
Optimizing module ACS.
Optimizing module bmc000.
Optimizing module bmc001.
Optimizing module bmc010.
Optimizing module bmc011.
Optimizing module bmc100.
Optimizing module bmc101.
Optimizing module bmc110.
Optimizing module bmc111.
Optimizing module decoder.
Optimizing module mem.
Optimizing module mem_disp.
Optimizing module tbu.

4.65. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== ACS ===

   Number of wires:                 20
   Number of wire bits:             64
   Number of public wires:          11
   Number of public wire bits:      48
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $add                           16
     $eq                             6
     $gt                             8
     $logic_not                      2
     $mux                           17
     $pmux                           2
     $reduce_or                      5

=== bmc000 ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            2
     $xor                            2

=== bmc001 ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            2
     $xor                            2

=== bmc010 ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            2
     $xor                            2

=== bmc011 ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            2
     $xor                            2

=== bmc100 ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            2
     $xor                            2

=== bmc101 ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            2
     $xor                            2

=== bmc110 ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            2
     $xor                            2

=== bmc111 ===

   Number of wires:                  7
   Number of wire bits:             10
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $and                            2
     $not                            2
     $xor                            2

=== decoder ===

   Number of wires:                128
   Number of wire bits:            623
   Number of public wires:          93
   Number of public wire bits:     388
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 73
     $add                           10
     $adff                          80
     $adffe                         10
     $and                           64
     $dff                           45
     $logic_and                      7
     $mux                          144
     $sdff                          10
     $sub                           10

=== mem ===

   Number of wires:                  9
   Number of wire bits:             62
   Number of public wires:           5
   Number of public wire bits:      28
   Number of memories:               1
   Number of memory bits:         8192
   Number of processes:              0
   Number of cells:                  6
     $dff                            8
     $mux                           19

=== mem_disp ===

   Number of wires:                  9
   Number of wire bits:             27
   Number of public wires:           5
   Number of public wire bits:      14
   Number of memories:               1
   Number of memory bits:         1024
   Number of processes:              0
   Number of cells:                  6
     $dff                            1
     $mux                           12

=== tbu ===

   Number of wires:                 85
   Number of wire bits:            155
   Number of public wires:          13
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $adff                           3
     $and                           16
     $dff                            3
     $dlatch                         1
     $eq                            21
     $logic_and                      1
     $logic_not                      3
     $mux                           32
     $not                           17
     $pmux                          52
     $reduce_or                     16

=== design hierarchy ===

   decoder                           1
     ACS                             0
     bmc000                          0
     bmc001                          0
     bmc010                          0
     bmc011                          0
     bmc100                          0
     bmc101                          0
     bmc110                          0
     bmc111                          0
     mem                             0
     mem_disp                        0
     tbu                             0

   Number of wires:                128
   Number of wire bits:            623
   Number of public wires:          93
   Number of public wire bits:     388
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 73
     $add                           10
     $adff                          80
     $adffe                         10
     $and                           64
     $dff                           45
     $logic_and                      7
     $mux                          144
     $sdff                          10
     $sub                           10

Warnings: 17 unique messages, 45 total
End of script. Logfile hash: 264381b3cc, CPU: user 0.48s system 0.00s, MEM: 15.86 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 11x opt_expr (0 sec), 21% 10x opt_merge (0 sec), ...
