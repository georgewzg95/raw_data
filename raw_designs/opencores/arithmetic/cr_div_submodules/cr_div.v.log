
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v' to AST representation.
Generating RTLIL representation for module `\cr_div'.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:0: Warning: System task `$display' outside initial block is unsupported.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:0: Warning: System task `$display' outside initial block is unsupported.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:0: Warning: System task `$display' outside initial block is unsupported.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:0: Warning: System task `$display' outside initial block is unsupported.
/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:0: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: cr_div              
Automatically selected cr_div as design top module.

2.2. Analyzing design hierarchy..
Top module:  \cr_div

2.3. Analyzing design hierarchy..
Top module:  \cr_div
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10 in module cr_div.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
     1/22: $3$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_EN[31:0]$40
     2/22: $3$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_DATA[31:0]$39
     3/22: $3$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_ADDR[5:0]$38
     4/22: $3$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_EN[31:0]$37
     5/22: $3$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_DATA[31:0]$36
     6/22: $3$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_ADDR[5:0]$35
     7/22: $2$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_EN[31:0]$30
     8/22: $2$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_DATA[31:0]$29
     9/22: $2$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_ADDR[5:0]$28
    10/22: $2$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_EN[31:0]$27
    11/22: $2$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_DATA[31:0]$26
    12/22: $2$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_ADDR[5:0]$25
    13/22: $1$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_EN[31:0]$22
    14/22: $1$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_DATA[31:0]$21
    15/22: $1$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_ADDR[5:0]$20
    16/22: $1$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_EN[31:0]$19
    17/22: $1$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_DATA[31:0]$18
    18/22: $1$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_ADDR[5:0]$17
    19/22: $0\cnt[7:0]
    20/22: $0\state[2:0]
    21/22: $0\r[31:0]
    22/22: $0\q[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\cr_div.\q' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$244' with positive edge clock.
Creating register for signal `\cr_div.\r' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$245' with positive edge clock.
Creating register for signal `\cr_div.\state' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$246' with positive edge clock.
Creating register for signal `\cr_div.\cnt' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$247' with positive edge clock.
Creating register for signal `\cr_div.$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_ADDR' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$248' with positive edge clock.
Creating register for signal `\cr_div.$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_DATA' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$249' with positive edge clock.
Creating register for signal `\cr_div.$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_EN' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$250' with positive edge clock.
Creating register for signal `\cr_div.$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_ADDR' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$251' with positive edge clock.
Creating register for signal `\cr_div.$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_DATA' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$252' with positive edge clock.
Creating register for signal `\cr_div.$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_EN' using process `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
  created $dff cell `$procdff$253' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 7 empty switches in `\cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
Removing empty process `cr_div.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:29$10'.
Cleaned up 7 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module cr_div.
<suppressed ~11 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cr_div.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cr_div'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cr_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$155.
    dead port 1/2 on $mux $procmux$147.
    dead port 1/2 on $mux $procmux$139.
    dead port 1/2 on $mux $procmux$131.
    dead port 1/2 on $mux $procmux$123.
    dead port 1/2 on $mux $procmux$115.
    dead port 1/2 on $mux $procmux$107.
    dead port 2/2 on $mux $procmux$104.
    dead port 1/2 on $mux $procmux$96.
    dead port 2/2 on $mux $procmux$93.
    dead port 1/2 on $mux $procmux$85.
    dead port 2/2 on $mux $procmux$82.
    dead port 1/2 on $mux $procmux$74.
    dead port 2/2 on $mux $procmux$71.
    dead port 1/2 on $mux $procmux$63.
    dead port 2/2 on $mux $procmux$60.
    dead port 1/2 on $mux $procmux$52.
    dead port 2/2 on $mux $procmux$49.
Removed 18 multiplexer ports.
<suppressed ~11 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cr_div.
    Consolidated identical input bits for $mux cell $procmux$80:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$80_Y
      New ports: A=1'0, B=1'1, Y=$procmux$80_Y [0]
      New connections: $procmux$80_Y [31:1] = { $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] $procmux$80_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$47:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$47_Y
      New ports: A=1'0, B=1'1, Y=$procmux$47_Y [0]
      New connections: $procmux$47_Y [31:1] = { $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] $procmux$47_Y [0] }
  Optimizing cells in module \cr_div.
    Consolidated identical input bits for $mux cell $procmux$136:
      Old ports: A=0, B=$procmux$80_Y, Y=$procmux$136_Y
      New ports: A=1'0, B=$procmux$80_Y [0], Y=$procmux$136_Y [0]
      New connections: $procmux$136_Y [31:1] = { $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] $procmux$136_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$112:
      Old ports: A=0, B=$procmux$47_Y, Y=$procmux$112_Y
      New ports: A=1'0, B=$procmux$47_Y [0], Y=$procmux$112_Y [0]
      New connections: $procmux$112_Y [31:1] = { $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] $procmux$112_Y [0] }
  Optimizing cells in module \cr_div.
    Consolidated identical input bits for $mux cell $procmux$167:
      Old ports: A=$2$memwr$\bcache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:69$1_EN[31:0]$27, B=0, Y=$procmux$167_Y
      New ports: A=$procmux$136_Y [0], B=1'0, Y=$procmux$167_Y [0]
      New connections: $procmux$167_Y [31:1] = { $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] $procmux$167_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$158:
      Old ports: A=$2$memwr$\recip_cache$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cr_div_submodules/cr_div.v:70$2_EN[31:0]$30, B=0, Y=$procmux$158_Y
      New ports: A=$procmux$112_Y [0], B=1'0, Y=$procmux$158_Y [0]
      New connections: $procmux$158_Y [31:1] = { $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] $procmux$158_Y [0] }
  Optimizing cells in module \cr_div.
Performed a total of 6 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cr_div'.
<suppressed ~24 debug messages>
Removed a total of 8 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$244 ($dff) from module cr_div (D = $procmux$226_Y, Q = \q).
Adding EN signal on $procdff$245 ($dff) from module cr_div (D = $procmux$209_Y, Q = \r).
Adding SRST signal on $procdff$246 ($dff) from module cr_div (D = $procmux$189_Y, Q = \state, rval = 3'001).
Adding EN signal on $auto$ff.cc:262:slice$278 ($sdff) from module cr_div (D = $procmux$189_Y, Q = \state).
Adding EN signal on $procdff$247 ($dff) from module cr_div (D = $procmux$183_Y, Q = \cnt).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cr_div..
Removed 9 unused cells and 130 unused wires.
<suppressed ~10 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cr_div.
<suppressed ~3 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cr_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cr_div.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cr_div'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cr_div..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cr_div.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cr_div..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cr_div.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cr_div'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cr_div..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module cr_div.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== cr_div ===

   Number of wires:                 65
   Number of wire bits:           1089
   Number of public wires:          15
   Number of public wire bits:     273
   Number of memories:               2
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 61
     $dffe                          72
     $eq                            76
     $le                            32
     $logic_not                      8
     $mul                           96
     $mux                          505
     $ne                             6
     $not                            1
     $pmux                          67
     $reduce_and                    11
     $reduce_bool                   10
     $sdffe                          3
     $sub                           72

Warnings: 1 unique messages, 5 total
End of script. Logfile hash: dbcd8643d3, CPU: user 0.14s system 0.00s, MEM: 12.71 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 5x opt_expr (0 sec), 15% 3x opt_clean (0 sec), ...
