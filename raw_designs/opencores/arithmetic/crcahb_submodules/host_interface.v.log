
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v' to AST representation.
Generating RTLIL representation for module `\host_interface'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: host_interface      
Automatically selected host_interface as design top module.

2.2. Analyzing design hierarchy..
Top module:  \host_interface

2.3. Analyzing design hierarchy..
Top module:  \host_interface
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:151$36 in module host_interface.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1 in module host_interface.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:151$36'.
     1/1: $0\crc_cr_ff[4:0]
Creating decoders for process `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1'.
     1/5: $0\hselx_pp[0:0]
     2/5: $0\hwrite_pp[0:0]
     3/5: $0\htrans_pp[1:0]
     4/5: $0\hsize_pp[2:0]
     5/5: $0\haddr_pp[2:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\host_interface.\crc_cr_ff' using process `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:151$36'.
  created $dff cell `$procdff$69' with positive edge clock.
Creating register for signal `\host_interface.\haddr_pp' using process `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1'.
  created $dff cell `$procdff$70' with positive edge clock.
Creating register for signal `\host_interface.\hsize_pp' using process `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1'.
  created $dff cell `$procdff$71' with positive edge clock.
Creating register for signal `\host_interface.\htrans_pp' using process `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\host_interface.\hwrite_pp' using process `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1'.
  created $dff cell `$procdff$73' with positive edge clock.
Creating register for signal `\host_interface.\hselx_pp' using process `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1'.
  created $dff cell `$procdff$74' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:151$36'.
Removing empty process `host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:151$36'.
Found and cleaned up 2 empty switches in `\host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1'.
Removing empty process `host_interface.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/crcahb_submodules/host_interface.v:83$1'.
Cleaned up 4 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module host_interface.
<suppressed ~7 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module host_interface.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\host_interface'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \host_interface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \host_interface.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\host_interface'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$74 ($dff) from module host_interface (D = $procmux$44_Y, Q = \hselx_pp, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$75 ($sdff) from module host_interface (D = \HSElx, Q = \hselx_pp).
Adding SRST signal on $procdff$69 ($dff) from module host_interface (D = $procmux$39_Y, Q = \crc_cr_ff, rval = 5'00000).
Adding EN signal on $auto$ff.cc:262:slice$77 ($sdff) from module host_interface (D = \HWDATA [7:3], Q = \crc_cr_ff).
Adding EN signal on $procdff$70 ($dff) from module host_interface (D = \HADDR [4:2], Q = \haddr_pp).
Adding EN signal on $procdff$71 ($dff) from module host_interface (D = \HSIZE, Q = \hsize_pp).
Adding EN signal on $procdff$72 ($dff) from module host_interface (D = \HTRANS, Q = \htrans_pp).
Adding EN signal on $procdff$73 ($dff) from module host_interface (D = \HWRITE, Q = \hwrite_pp).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \host_interface..
Removed 13 unused cells and 50 unused wires.
<suppressed ~14 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module host_interface.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \host_interface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \host_interface.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\host_interface'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \host_interface..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module host_interface.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \host_interface..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \host_interface.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\host_interface'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \host_interface..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module host_interface.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== host_interface ===

   Number of wires:                 64
   Number of wire bits:            582
   Number of public wires:          47
   Number of public wire bits:     317
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $and                          160
     $dffe                           9
     $eq                            14
     $logic_and                     15
     $logic_not                      5
     $logic_or                       2
     $or                           128
     $reduce_and                     2
     $sdffe                          6

End of script. Logfile hash: 934fa9e00b, CPU: user 0.06s system 0.00s, MEM: 11.62 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 3x opt_clean (0 sec), 19% 5x opt_expr (0 sec), ...
