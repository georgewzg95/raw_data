
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v' to AST representation.
Generating RTLIL representation for module `\cfg_crc'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: cfg_crc             
Automatically selected cfg_crc as design top module.

2.2. Analyzing design hierarchy..
Top module:  \cfg_crc

2.3. Analyzing design hierarchy..
Top module:  \cfg_crc
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\cfg_crc.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v:16$3'.
Cleaned up 4 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v:16$3 in module cfg_crc.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\cfg_crc.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v:16$3'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cfg_crc.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v:16$3'.
     1/8: $0\dat_o[4:0] [4]
     2/8: $0\dat_o[4:0] [3]
     3/8: $0\dat_o[4:0] [2]
     4/8: $0\dat_o[4:0] [1]
     5/8: $3\i[31:0]
     6/8: $0\dat_o[4:0] [0]
     7/8: $1\i[31:0]
     8/8: $2\i[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\cfg_crc.\dat_o' using process `\cfg_crc.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v:16$3'.
  created $adff cell `$procdff$44' with positive edge clock and positive level reset.
Creating register for signal `\cfg_crc.\i' using process `\cfg_crc.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v:16$3'.
  created $dff cell `$procdff$47' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\cfg_crc.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v:16$3'.
Removing empty process `cfg_crc.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cfg_crc.v:16$3'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$33.
Removed 1 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$47 ($dff) from module cfg_crc (D = $3\i[31:0], Q = \i).
Adding EN signal on $procdff$44 ($adff) from module cfg_crc (D = { $procmux$9_Y $procmux$15_Y $procmux$21_Y $procmux$27_Y $procmux$39_Y }, Q = \dat_o).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..
Removed 7 unused cells and 31 unused wires.
<suppressed ~9 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.
<suppressed ~1 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cfg_crc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cfg_crc.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cfg_crc'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cfg_crc..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cfg_crc.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== cfg_crc ===

   Number of wires:                 15
   Number of wire bits:             23
   Number of public wires:           7
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $adffe                          5
     $mux                           10
     $reduce_bool                    2
     $xor                            2

End of script. Logfile hash: b20a27edea, CPU: user 0.04s system 0.00s, MEM: 11.11 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 4x opt_expr (0 sec), 24% 2x opt_clean (0 sec), ...
