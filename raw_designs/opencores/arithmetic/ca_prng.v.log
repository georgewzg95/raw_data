
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v' to AST representation.
Generating RTLIL representation for module `\ca_prng'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: ca_prng             
Automatically selected ca_prng as design top module.

2.2. Analyzing design hierarchy..
Top module:  \ca_prng

2.3. Analyzing design hierarchy..
Top module:  \ca_prng
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 32 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:131$3 in module ca_prng.
Marked 34 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:131$3 in module ca_prng.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:100$1 in module ca_prng.
Removed a total of 32 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 34 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:131$3'.
     1/34: $1\ca_state_we[0:0]
     2/34: $1\ca_state_new[31:0]
     3/34: $32\tmp_ca_state_new[31:31]
     4/34: $31\tmp_ca_state_new[30:30]
     5/34: $30\tmp_ca_state_new[29:29]
     6/34: $29\tmp_ca_state_new[28:28]
     7/34: $28\tmp_ca_state_new[27:27]
     8/34: $27\tmp_ca_state_new[26:26]
     9/34: $26\tmp_ca_state_new[25:25]
    10/34: $25\tmp_ca_state_new[24:24]
    11/34: $24\tmp_ca_state_new[23:23]
    12/34: $23\tmp_ca_state_new[22:22]
    13/34: $22\tmp_ca_state_new[21:21]
    14/34: $21\tmp_ca_state_new[20:20]
    15/34: $20\tmp_ca_state_new[19:19]
    16/34: $19\tmp_ca_state_new[18:18]
    17/34: $18\tmp_ca_state_new[17:17]
    18/34: $17\tmp_ca_state_new[16:16]
    19/34: $16\tmp_ca_state_new[15:15]
    20/34: $15\tmp_ca_state_new[14:14]
    21/34: $14\tmp_ca_state_new[13:13]
    22/34: $13\tmp_ca_state_new[12:12]
    23/34: $12\tmp_ca_state_new[11:11]
    24/34: $11\tmp_ca_state_new[10:10]
    25/34: $10\tmp_ca_state_new[9:9]
    26/34: $9\tmp_ca_state_new[8:8]
    27/34: $8\tmp_ca_state_new[7:7]
    28/34: $7\tmp_ca_state_new[6:6]
    29/34: $6\tmp_ca_state_new[5:5]
    30/34: $5\tmp_ca_state_new[4:4]
    31/34: $4\tmp_ca_state_new[3:3]
    32/34: $3\tmp_ca_state_new[2:2]
    33/34: $2\tmp_ca_state_new[1:1]
    34/34: $1\tmp_ca_state_new[0:0]
Creating decoders for process `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:100$1'.
     1/2: $0\update_rule_reg[7:0]
     2/2: $0\ca_state_reg[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ca_prng.\ca_state_new' from process `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:131$3'.
No latch inferred for signal `\ca_prng.\ca_state_we' from process `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:131$3'.
No latch inferred for signal `\ca_prng.\tmp_ca_state_new' from process `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:131$3'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ca_prng.\ca_state_reg' using process `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:100$1'.
  created $dff cell `$procdff$309' with positive edge clock.
Creating register for signal `\ca_prng.\update_rule_reg' using process `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:100$1'.
  created $dff cell `$procdff$310' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 34 empty switches in `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:131$3'.
Removing empty process `ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:131$3'.
Found and cleaned up 3 empty switches in `\ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:100$1'.
Removing empty process `ca_prng.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/ca_prng.v:100$1'.
Cleaned up 37 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module ca_prng.
<suppressed ~34 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ca_prng.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ca_prng'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ca_prng..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ca_prng.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ca_prng'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$309 ($dff) from module ca_prng (D = $procmux$304_Y, Q = \ca_state_reg, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$311 ($sdff) from module ca_prng (D = $procmux$9_Y, Q = \ca_state_reg).
Adding SRST signal on $procdff$310 ($dff) from module ca_prng (D = $procmux$299_Y, Q = \update_rule_reg, rval = 8'00011110).
Adding EN signal on $auto$ff.cc:262:slice$313 ($sdff) from module ca_prng (D = \update_rule, Q = \update_rule_reg).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ca_prng..
Removed 5 unused cells and 84 unused wires.
<suppressed ~6 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ca_prng.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ca_prng..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ca_prng.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ca_prng'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ca_prng..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ca_prng.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== ca_prng ===

   Number of wires:                270
   Number of wire bits:            439
   Number of public wires:          13
   Number of public wire bits:     182
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                293
     $eq                           672
     $logic_not                     96
     $logic_or                       1
     $mux                           33
     $pmux                          32
     $sdffe                         40

End of script. Logfile hash: 087b35b5c9, CPU: user 0.12s system 0.00s, MEM: 15.47 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 4x opt_expr (0 sec), 22% 2x read_verilog (0 sec), ...
