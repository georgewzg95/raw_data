
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v' to AST representation.
Generating RTLIL representation for module `\dpll'.
Generating RTLIL representation for module `\freqdivider'.
Generating RTLIL representation for module `\phasecomparator'.
Generating RTLIL representation for module `\randomwalkfilter'.
Generating RTLIL representation for module `\variableresetrandomwalkfilter'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:192.1-204.5 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: variableresetrandomwalkfilter
root of   0 design levels: randomwalkfilter    
root of   0 design levels: phasecomparator     
root of   0 design levels: freqdivider         
root of   2 design levels: dpll                
Automatically selected dpll as design top module.

2.2. Analyzing design hierarchy..
Top module:  \dpll
Used module:     \freqdivider
Used module:     \variableresetrandomwalkfilter
Used module:         \randomwalkfilter
Used module:     \phasecomparator
Parameter \FilterResetValue = 32

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\randomwalkfilter'.
Parameter \FilterResetValue = 32
Generating RTLIL representation for module `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000'.

2.4. Analyzing design hierarchy..
Top module:  \dpll
Used module:     \freqdivider
Used module:     \variableresetrandomwalkfilter
Used module:         $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000
Used module:     \phasecomparator

2.5. Analyzing design hierarchy..
Top module:  \dpll
Used module:     \freqdivider
Used module:     \variableresetrandomwalkfilter
Used module:         $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000
Used module:     \phasecomparator
Removing unused module `\randomwalkfilter'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:208$38 in module variableresetrandomwalkfilter.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:192$37 in module variableresetrandomwalkfilter.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:174$25 in module variableresetrandomwalkfilter.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:119$47 in module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:61$1 in module freqdivider.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 8 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:222$44'.
Creating decoders for process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:208$38'.
     1/1: $0\N_FilterCounter[7:0]
Creating decoders for process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:192$37'.
     1/1: $1\ResetterValue[7:0]
Creating decoders for process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:174$25'.
     1/1: $0\ResetterCounter[3:0]
Creating decoders for process `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:133$53'.
Creating decoders for process `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:119$47'.
     1/1: $0\FilterCounter[7:0]
Creating decoders for process `\phasecomparator.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:96$9'.
Creating decoders for process `\phasecomparator.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:81$7'.
Creating decoders for process `\freqdivider.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:61$1'.
     1/2: $0\DividerCounter[6:0]
     2/2: $0\FrequencyOut[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\variableresetrandomwalkfilter.\ResetterValue' from process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:192$37'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\variableresetrandomwalkfilter.\Positive' using process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:222$44'.
  created $dff cell `$procdff$100' with positive edge clock.
Creating register for signal `\variableresetrandomwalkfilter.\Negative' using process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:222$44'.
  created $dff cell `$procdff$101' with positive edge clock.
Creating register for signal `\variableresetrandomwalkfilter.\N_FilterCounter' using process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:208$38'.
  created $dff cell `$procdff$102' with positive edge clock.
Creating register for signal `\variableresetrandomwalkfilter.\ResetterCounter' using process `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:174$25'.
  created $dff cell `$procdff$103' with positive edge clock.
Creating register for signal `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.\Positive' using process `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:133$53'.
  created $dff cell `$procdff$104' with positive edge clock.
Creating register for signal `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.\Negative' using process `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:133$53'.
  created $dff cell `$procdff$105' with positive edge clock.
Creating register for signal `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.\FilterCounter' using process `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:119$47'.
  created $dff cell `$procdff$106' with positive edge clock.
Creating register for signal `\phasecomparator.\Lead' using process `\phasecomparator.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:96$9'.
  created $dff cell `$procdff$107' with positive edge clock.
Creating register for signal `\phasecomparator.\Lag' using process `\phasecomparator.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:96$9'.
  created $dff cell `$procdff$108' with positive edge clock.
Creating register for signal `\phasecomparator.\InputSignalEdgeDet' using process `\phasecomparator.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:81$7'.
  created $dff cell `$procdff$109' with positive edge clock.
Creating register for signal `\freqdivider.\FrequencyOut' using process `\freqdivider.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:61$1'.
  created $dff cell `$procdff$110' with positive edge clock.
Creating register for signal `\freqdivider.\DividerCounter' using process `\freqdivider.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:61$1'.
  created $dff cell `$procdff$111' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:222$44'.
Found and cleaned up 3 empty switches in `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:208$38'.
Removing empty process `variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:208$38'.
Found and cleaned up 1 empty switch in `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:192$37'.
Removing empty process `variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:192$37'.
Found and cleaned up 5 empty switches in `\variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:174$25'.
Removing empty process `variableresetrandomwalkfilter.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:174$25'.
Removing empty process `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:133$53'.
Found and cleaned up 3 empty switches in `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:119$47'.
Removing empty process `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:119$47'.
Removing empty process `phasecomparator.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:96$9'.
Removing empty process `phasecomparator.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:81$7'.
Found and cleaned up 4 empty switches in `\freqdivider.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:61$1'.
Removing empty process `freqdivider.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:61$1'.
Cleaned up 16 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module variableresetrandomwalkfilter.
Optimizing module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.
Optimizing module phasecomparator.
<suppressed ~4 debug messages>
Optimizing module freqdivider.
<suppressed ~1 debug messages>
Optimizing module dpll.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module variableresetrandomwalkfilter.
Optimizing module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.
Optimizing module phasecomparator.
Optimizing module freqdivider.
Optimizing module dpll.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\variableresetrandomwalkfilter'.
<suppressed ~6 debug messages>
Finding identical cells in module `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000'.
<suppressed ~6 debug messages>
Finding identical cells in module `\phasecomparator'.
Finding identical cells in module `\freqdivider'.
Finding identical cells in module `\dpll'.
Removed a total of 4 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \variableresetrandomwalkfilter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phasecomparator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \freqdivider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dpll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \variableresetrandomwalkfilter.
  Optimizing cells in module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.
  Optimizing cells in module \phasecomparator.
  Optimizing cells in module \freqdivider.
  Optimizing cells in module \dpll.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\variableresetrandomwalkfilter'.
Finding identical cells in module `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000'.
Finding identical cells in module `\phasecomparator'.
Finding identical cells in module `\freqdivider'.
Finding identical cells in module `\dpll'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$102 ($dff) from module variableresetrandomwalkfilter (D = $procmux$61_Y, Q = \N_FilterCounter).
Adding SRST signal on $procdff$103 ($dff) from module variableresetrandomwalkfilter (D = $procmux$78_Y, Q = \ResetterCounter, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$115 ($sdff) from module variableresetrandomwalkfilter (D = $procmux$78_Y, Q = \ResetterCounter).
Adding SRST signal on $procdff$106 ($dff) from module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000 (D = $procmux$84_Y, Q = \FilterCounter, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:262:slice$125 ($sdff) from module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000 (D = $procmux$84_Y, Q = \FilterCounter).
Adding EN signal on $procdff$110 ($dff) from module freqdivider (D = $not$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/dpll-isdn.v:68$6_Y, Q = \FrequencyOut).
Adding SRST signal on $procdff$111 ($dff) from module freqdivider (D = $procmux$93_Y, Q = \DividerCounter, rval = 7'0000000).
Adding EN signal on $auto$ff.cc:262:slice$130 ($sdff) from module freqdivider (D = $procmux$93_Y, Q = \DividerCounter).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \variableresetrandomwalkfilter..
Finding unused cells or wires in module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \phasecomparator..
Finding unused cells or wires in module \freqdivider..
Finding unused cells or wires in module \dpll..
Removed 4 unused cells and 42 unused wires.
<suppressed ~8 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.
<suppressed ~1 debug messages>
Optimizing module dpll.
Optimizing module freqdivider.
Optimizing module phasecomparator.
Optimizing module variableresetrandomwalkfilter.
<suppressed ~2 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dpll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \freqdivider..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \phasecomparator..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \variableresetrandomwalkfilter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.
  Optimizing cells in module \dpll.
  Optimizing cells in module \freqdivider.
  Optimizing cells in module \phasecomparator.
  Optimizing cells in module \variableresetrandomwalkfilter.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000'.
Finding identical cells in module `\dpll'.
Finding identical cells in module `\freqdivider'.
Finding identical cells in module `\phasecomparator'.
Finding identical cells in module `\variableresetrandomwalkfilter'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000..
Finding unused cells or wires in module \dpll..
Finding unused cells or wires in module \freqdivider..
Finding unused cells or wires in module \phasecomparator..
Finding unused cells or wires in module \variableresetrandomwalkfilter..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000.
Optimizing module dpll.
Optimizing module freqdivider.
Optimizing module phasecomparator.
Optimizing module variableresetrandomwalkfilter.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000 ===

   Number of wires:                 14
   Number of wire bits:             97
   Number of public wires:           6
   Number of public wire bits:      13
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $add                           32
     $dff                            2
     $eq                            16
     $logic_or                       1
     $mux                           16
     $reduce_bool                    2
     $sdffe                          8
     $sub                           32

=== dpll ===

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3

=== freqdivider ===

   Number of wires:                 13
   Number of wire bits:             93
   Number of public wires:           5
   Number of public wire bits:      11
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                           64
     $dffe                           1
     $ge                            32
     $logic_not                      7
     $mux                           14
     $ne                             2
     $not                            1
     $sdffe                          7

=== phasecomparator ===

   Number of wires:                 10
   Number of wire bits:             11
   Number of public wires:           7
   Number of public wire bits:       8
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $dff                            4
     $eq                             2
     $logic_and                      2
     $not                            1

=== variableresetrandomwalkfilter ===

   Number of wires:                 44
   Number of wire bits:            218
   Number of public wires:          10
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 40
     $add                           64
     $dff                            2
     $dffe                           8
     $eq                            40
     $ge                            32
     $gt                            64
     $le                            32
     $logic_and                      1
     $logic_or                       3
     $lt                            64
     $mux                           40
     $ne                             5
     $pmux                           8
     $reduce_and                     3
     $reduce_bool                    5
     $sdffe                          4
     $sub                           64

=== design hierarchy ===

   dpll                              1
     freqdivider                     0
     phasecomparator                 0
     variableresetrandomwalkfilter      0
       $paramod\randomwalkfilter\FilterResetValue=s32'00000000000000000000000000100000      0

   Number of wires:                  7
   Number of wire bits:              7
   Number of public wires:           7
   Number of public wire bits:       7
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3

End of script. Logfile hash: 06e307f683, CPU: user 0.06s system 0.00s, MEM: 11.56 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 4x opt_expr (0 sec), 14% 3x opt_merge (0 sec), ...
