
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/tiny_tate_bilinear_pairing_submodules/mod_p.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/tiny_tate_bilinear_pairing_submodules/mod_p.v' to AST representation.
Generating RTLIL representation for module `\mod_p'.
Generating RTLIL representation for module `\f3_sub'.
Generating RTLIL representation for module `\f3_mult'.
Generating RTLIL representation for module `\f3_add'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: f3_add              
root of   0 design levels: f3_mult             
root of   1 design levels: f3_sub              
root of   2 design levels: mod_p               
Automatically selected mod_p as design top module.

2.2. Analyzing design hierarchy..
Top module:  \mod_p
Used module:     \f3_sub
Used module:         \f3_add
Used module:     \f3_mult

2.3. Analyzing design hierarchy..
Top module:  \mod_p
Used module:     \f3_sub
Used module:         \f3_add
Used module:     \f3_mult
Removed 0 unused modules.
Mapping positional arguments of cell f3_sub.a0 (f3_add).
Mapping positional arguments of cell mod_p.s112 (f3_sub).
Mapping positional arguments of cell mod_p.m112 (f3_mult).
Mapping positional arguments of cell mod_p.s0 (f3_sub).
Mapping positional arguments of cell mod_p.m0 (f3_mult).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3_mult.
Optimizing module f3_sub.
Optimizing module mod_p.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3_mult.
Optimizing module f3_sub.
Optimizing module mod_p.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3_add'.
<suppressed ~48 debug messages>
Finding identical cells in module `\f3_mult'.
<suppressed ~18 debug messages>
Finding identical cells in module `\f3_sub'.
Finding identical cells in module `\mod_p'.
Removed a total of 22 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f3_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3_sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mod_p..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f3_add.
  Optimizing cells in module \f3_mult.
  Optimizing cells in module \f3_sub.
  Optimizing cells in module \mod_p.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3_add'.
Finding identical cells in module `\f3_mult'.
Finding identical cells in module `\f3_sub'.
Finding identical cells in module `\mod_p'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f3_add..
Finding unused cells or wires in module \f3_mult..
Finding unused cells or wires in module \f3_sub..
Finding unused cells or wires in module \mod_p..
Removed 0 unused cells and 26 unused wires.
<suppressed ~2 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3_mult.
Optimizing module f3_sub.
Optimizing module mod_p.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f3_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3_sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \mod_p..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f3_add.
  Optimizing cells in module \f3_mult.
  Optimizing cells in module \f3_sub.
  Optimizing cells in module \mod_p.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3_add'.
Finding identical cells in module `\f3_mult'.
Finding identical cells in module `\f3_sub'.
Finding identical cells in module `\mod_p'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f3_add..
Finding unused cells or wires in module \f3_mult..
Finding unused cells or wires in module \f3_sub..
Finding unused cells or wires in module \mod_p..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3_mult.
Optimizing module f3_sub.
Optimizing module mod_p.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== f3_add ===

   Number of wires:                 29
   Number of wire bits:             32
   Number of public wires:           9
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $and                           14
     $not                            4
     $or                             4

=== f3_mult ===

   Number of wires:                 21
   Number of wire bits:             24
   Number of public wires:           7
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 16
     $and                           10
     $not                            4
     $or                             2

=== f3_sub ===

   Number of wires:                  3
   Number of wire bits:              6
   Number of public wires:           3
   Number of public wire bits:       6
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1

=== mod_p ===

   Number of wires:                  5
   Number of wire bits:           3564
   Number of public wires:           5
   Number of public wire bits:    3564
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4

=== design hierarchy ===

   mod_p                             1
     f3_mult                         0
     f3_sub                          0
       f3_add                        0

   Number of wires:                  5
   Number of wire bits:           3564
   Number of public wires:           5
   Number of public wire bits:    3564
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4

End of script. Logfile hash: 1f6ac650f7, CPU: user 0.08s system 0.00s, MEM: 12.23 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 23% 4x opt_expr (0 sec), 23% 2x opt_clean (0 sec), ...
