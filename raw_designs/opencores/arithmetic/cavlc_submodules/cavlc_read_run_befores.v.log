
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v' to AST representation.
Generating RTLIL representation for module `\cavlc_read_run_befores'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:154.1-240.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: cavlc_read_run_befores
Automatically selected cavlc_read_run_befores as design top module.

2.2. Analyzing design hierarchy..
Top module:  \cavlc_read_run_befores

2.3. Analyzing design hierarchy..
Top module:  \cavlc_read_run_befores
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24 in module cavlc_read_run_befores.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:268$22 in module cavlc_read_run_befores.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:255$16 in module cavlc_read_run_befores.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:245$14 in module cavlc_read_run_befores.
Marked 11 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:154$1 in module cavlc_read_run_befores.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
Found async reset \rst_n in `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:255$16'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
     1/16: $0\coeff_15[8:0]
     2/16: $0\coeff_14[8:0]
     3/16: $0\coeff_13[8:0]
     4/16: $0\coeff_12[8:0]
     5/16: $0\coeff_11[8:0]
     6/16: $0\coeff_10[8:0]
     7/16: $0\coeff_9[8:0]
     8/16: $0\coeff_8[8:0]
     9/16: $0\coeff_7[8:0]
    10/16: $0\coeff_6[8:0]
    11/16: $0\coeff_5[8:0]
    12/16: $0\coeff_4[8:0]
    13/16: $0\coeff_3[8:0]
    14/16: $0\coeff_2[8:0]
    15/16: $0\coeff_1[8:0]
    16/16: $0\coeff_0[8:0]
Creating decoders for process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:268$22'.
     1/1: $0\coeff[8:0]
Creating decoders for process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:255$16'.
     1/1: $0\ZeroLeft[3:0]
Creating decoders for process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:245$14'.
     1/1: $0\len_comb[3:0]
Creating decoders for process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:154$1'.
     1/2: $0\run[3:0]
     2/2: $0\len[3:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\cavlc_read_run_befores.\coeff' from process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:268$22'.
No latch inferred for signal `\cavlc_read_run_befores.\len_comb' from process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:245$14'.
No latch inferred for signal `\cavlc_read_run_befores.\run' from process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:154$1'.
No latch inferred for signal `\cavlc_read_run_befores.\len' from process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:154$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\cavlc_read_run_befores.\coeff_0' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$493' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_1' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$494' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_2' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$495' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_3' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$496' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_4' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$497' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_5' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$498' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_6' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$499' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_7' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$500' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_8' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$501' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_9' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$502' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_10' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$503' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_11' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$504' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_12' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$505' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_13' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$506' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_14' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$507' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\coeff_15' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
  created $adff cell `$procdff$508' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_run_befores.\ZeroLeft' using process `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:255$16'.
  created $adff cell `$procdff$509' with positive edge clock and negative level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 20 empty switches in `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
Removing empty process `cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:294$24'.
Found and cleaned up 2 empty switches in `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:268$22'.
Removing empty process `cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:268$22'.
Found and cleaned up 3 empty switches in `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:255$16'.
Removing empty process `cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:255$16'.
Found and cleaned up 1 empty switch in `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:245$14'.
Removing empty process `cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:245$14'.
Found and cleaned up 11 empty switches in `\cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:154$1'.
Removing empty process `cavlc_read_run_befores.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_run_befores.v:154$1'.
Cleaned up 37 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_run_befores.
<suppressed ~22 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_run_befores.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_run_befores'.
<suppressed ~87 debug messages>
Removed a total of 29 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cavlc_read_run_befores..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cavlc_read_run_befores.
    New ctrl vector for $pmux cell $procmux$54: $auto$opt_reduce.cc:134:opt_mux$511
  Optimizing cells in module \cavlc_read_run_befores.
Performed a total of 1 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_run_befores'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$500 ($adff) from module cavlc_read_run_befores (D = $procmux$204_Y, Q = \coeff_7).
Adding EN signal on $procdff$499 ($adff) from module cavlc_read_run_befores (D = $procmux$225_Y, Q = \coeff_6).
Adding EN signal on $procdff$498 ($adff) from module cavlc_read_run_befores (D = $procmux$247_Y, Q = \coeff_5).
Adding EN signal on $procdff$497 ($adff) from module cavlc_read_run_befores (D = $procmux$270_Y, Q = \coeff_4).
Adding EN signal on $procdff$496 ($adff) from module cavlc_read_run_befores (D = $procmux$294_Y, Q = \coeff_3).
Adding EN signal on $procdff$495 ($adff) from module cavlc_read_run_befores (D = $procmux$319_Y, Q = \coeff_2).
Adding EN signal on $procdff$494 ($adff) from module cavlc_read_run_befores (D = $procmux$345_Y, Q = \coeff_1).
Adding EN signal on $procdff$509 ($adff) from module cavlc_read_run_befores (D = $procmux$383_Y, Q = \ZeroLeft).
Adding EN signal on $procdff$508 ($adff) from module cavlc_read_run_befores (D = $procmux$72_Y, Q = \coeff_15).
Adding EN signal on $procdff$507 ($adff) from module cavlc_read_run_befores (D = $procmux$85_Y, Q = \coeff_14).
Adding EN signal on $procdff$506 ($adff) from module cavlc_read_run_befores (D = $procmux$99_Y, Q = \coeff_13).
Adding EN signal on $procdff$505 ($adff) from module cavlc_read_run_befores (D = $procmux$114_Y, Q = \coeff_12).
Adding EN signal on $procdff$504 ($adff) from module cavlc_read_run_befores (D = $procmux$130_Y, Q = \coeff_11).
Adding EN signal on $procdff$503 ($adff) from module cavlc_read_run_befores (D = $procmux$147_Y, Q = \coeff_10).
Adding EN signal on $procdff$502 ($adff) from module cavlc_read_run_befores (D = $procmux$165_Y, Q = \coeff_9).
Adding EN signal on $procdff$493 ($adff) from module cavlc_read_run_befores (D = $procmux$355_Y, Q = \coeff_0).
Adding EN signal on $procdff$501 ($adff) from module cavlc_read_run_befores (D = $procmux$184_Y, Q = \coeff_8).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cavlc_read_run_befores..
Removed 1 unused cells and 154 unused wires.
<suppressed ~2 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_run_befores.
<suppressed ~17 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cavlc_read_run_befores..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cavlc_read_run_befores.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_run_befores'.
<suppressed ~45 debug messages>
Removed a total of 15 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cavlc_read_run_befores..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_run_befores.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cavlc_read_run_befores..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cavlc_read_run_befores.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_run_befores'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cavlc_read_run_befores..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_run_befores.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== cavlc_read_run_befores ===

   Number of wires:                286
   Number of wire bits:           1571
   Number of public wires:          46
   Number of public wire bits:     338
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                261
     $add                           32
     $adffe                        148
     $eq                           546
     $ge                           480
     $gt                            64
     $logic_and                      4
     $logic_not                     11
     $mux                         1016
     $ne                           111
     $pmux                          21
     $reduce_and                    48
     $reduce_bool                   11
     $reduce_or                     14
     $sub                           68

End of script. Logfile hash: b1c660b053, CPU: user 0.16s system 0.00s, MEM: 14.24 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 5x opt_expr (0 sec), 15% 3x opt_clean (0 sec), ...
