
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v' to AST representation.
Generating RTLIL representation for module `\cavlc_read_total_zeros'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:133.1-300.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:305.1-668.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: cavlc_read_total_zeros
Automatically selected cavlc_read_total_zeros as design top module.

2.2. Analyzing design hierarchy..
Top module:  \cavlc_read_total_zeros

2.3. Analyzing design hierarchy..
Top module:  \cavlc_read_total_zeros
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:673$23 in module cavlc_read_total_zeros.
Marked 43 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:305$22 in module cavlc_read_total_zeros.
Marked 23 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:133$21 in module cavlc_read_total_zeros.
Marked 8 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:91$8 in module cavlc_read_total_zeros.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:66$1 in module cavlc_read_total_zeros.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 11 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:673$23'.
     1/2: $0\len_comb[3:0]
     2/2: $0\TotalZeros_comb[3:0]
Creating decoders for process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:305$22'.
     1/2: $0\TotalZeros_G3[3:0]
     2/2: $0\len_G3[2:0]
Creating decoders for process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:133$21'.
     1/2: $0\len_LE3[3:0]
     2/2: $0\TotalZeros_LE3[3:0]
Creating decoders for process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:91$8'.
     1/2: $0\len_chroma_DC[1:0]
     2/2: $0\TotalZeros_chroma_DC[1:0]
Creating decoders for process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:66$1'.
     1/3: $0\rbsp_G3[5:0]
     2/3: $0\rbsp_LE3[8:0]
     3/3: $0\rbsp_chroma_DC[2:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\cavlc_read_total_zeros.\TotalZeros_comb' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:673$23'.
No latch inferred for signal `\cavlc_read_total_zeros.\len_comb' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:673$23'.
No latch inferred for signal `\cavlc_read_total_zeros.\TotalZeros_G3' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:305$22'.
No latch inferred for signal `\cavlc_read_total_zeros.\len_G3' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:305$22'.
No latch inferred for signal `\cavlc_read_total_zeros.\TotalZeros_LE3' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:133$21'.
No latch inferred for signal `\cavlc_read_total_zeros.\len_LE3' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:133$21'.
No latch inferred for signal `\cavlc_read_total_zeros.\TotalZeros_chroma_DC' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:91$8'.
No latch inferred for signal `\cavlc_read_total_zeros.\len_chroma_DC' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:91$8'.
No latch inferred for signal `\cavlc_read_total_zeros.\rbsp_chroma_DC' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:66$1'.
No latch inferred for signal `\cavlc_read_total_zeros.\rbsp_LE3' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:66$1'.
No latch inferred for signal `\cavlc_read_total_zeros.\rbsp_G3' from process `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:66$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:673$23'.
Removing empty process `cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:673$23'.
Found and cleaned up 43 empty switches in `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:305$22'.
Removing empty process `cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:305$22'.
Found and cleaned up 23 empty switches in `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:133$21'.
Removing empty process `cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:133$21'.
Found and cleaned up 8 empty switches in `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:91$8'.
Removing empty process `cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:91$8'.
Found and cleaned up 3 empty switches in `\cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:66$1'.
Removing empty process `cavlc_read_total_zeros.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_total_zeros.v:66$1'.
Cleaned up 80 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_total_zeros.
<suppressed ~116 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_total_zeros.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_total_zeros'.
<suppressed ~120 debug messages>
Removed a total of 40 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cavlc_read_total_zeros..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cavlc_read_total_zeros.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_total_zeros'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cavlc_read_total_zeros..
Removed 0 unused cells and 272 unused wires.
<suppressed ~1 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_total_zeros.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cavlc_read_total_zeros..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cavlc_read_total_zeros.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_total_zeros'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cavlc_read_total_zeros..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_total_zeros.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== cavlc_read_total_zeros ===

   Number of wires:                222
   Number of wire bits:            715
   Number of public wires:          16
   Number of public wire bits:      61
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                217
     $eq                            86
     $logic_and                      8
     $logic_not                     10
     $mux                          614
     $pmux                          43

End of script. Logfile hash: 89d9268a27, CPU: user 0.17s system 0.00s, MEM: 14.55 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 4x opt_expr (0 sec), 26% 2x read_verilog (0 sec), ...
