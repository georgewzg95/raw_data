
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v' to AST representation.
Generating RTLIL representation for module `\cavlc_read_levels'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: cavlc_read_levels   
Automatically selected cavlc_read_levels as design top module.

2.2. Analyzing design hierarchy..
Top module:  \cavlc_read_levels

2.3. Analyzing design hierarchy..
Top module:  \cavlc_read_levels
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:358$130 in module cavlc_read_levels.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67 in module cavlc_read_levels.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:213$63 in module cavlc_read_levels.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:197$51 in module cavlc_read_levels.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:180$37 in module cavlc_read_levels.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:167$29 in module cavlc_read_levels.
Marked 5 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:147$12 in module cavlc_read_levels.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:135$6 in module cavlc_read_levels.
Marked 16 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:112$5 in module cavlc_read_levels.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:106$1 in module cavlc_read_levels.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
Found async reset \rst_n in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:213$63'.
Found async reset \rst_n in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:180$37'.
Found async reset \rst_n in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:147$12'.
Found async reset \rst_n in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:135$6'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:358$130'.
     1/1: $0\len_comb[4:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
     1/16: $0\level_15[8:0]
     2/16: $0\level_14[8:0]
     3/16: $0\level_13[8:0]
     4/16: $0\level_12[8:0]
     5/16: $0\level_11[8:0]
     6/16: $0\level_10[8:0]
     7/16: $0\level_9[8:0]
     8/16: $0\level_8[8:0]
     9/16: $0\level_7[8:0]
    10/16: $0\level_6[8:0]
    11/16: $0\level_5[8:0]
    12/16: $0\level_4[8:0]
    13/16: $0\level_3[8:0]
    14/16: $0\level_2[8:0]
    15/16: $0\level_1[8:0]
    16/16: $0\level_0[8:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:213$63'.
     1/1: $0\level_abs[8:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:197$51'.
     1/1: $0\level[8:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:180$37'.
     1/1: $0\level_code_tmp[8:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:167$29'.
     1/1: $0\level_suffix[8:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:147$12'.
     1/1: $0\suffixLength[2:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:135$6'.
     1/1: $0\level_prefix[3:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:112$5'.
     1/1: $0\level_prefix_comb[3:0]
Creating decoders for process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:106$1'.
     1/1: $0\rbsp_internal[15:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\cavlc_read_levels.\len_comb' from process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:358$130'.
No latch inferred for signal `\cavlc_read_levels.\level' from process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:197$51'.
No latch inferred for signal `\cavlc_read_levels.\level_suffix' from process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:167$29'.
No latch inferred for signal `\cavlc_read_levels.\level_prefix_comb' from process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:112$5'.
No latch inferred for signal `\cavlc_read_levels.\rbsp_internal' from process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:106$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\cavlc_read_levels.\level_0' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$682' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_1' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$683' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_2' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$684' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_3' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$685' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_4' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$686' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_5' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$687' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_6' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$688' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_7' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$689' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_8' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$690' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_9' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$691' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_10' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$692' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_11' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$693' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_12' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$694' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_13' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$695' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_14' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$696' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_15' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
  created $adff cell `$procdff$697' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_abs' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:213$63'.
  created $adff cell `$procdff$698' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_code_tmp' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:180$37'.
  created $adff cell `$procdff$699' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\suffixLength' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:147$12'.
  created $adff cell `$procdff$700' with positive edge clock and negative level reset.
Creating register for signal `\cavlc_read_levels.\level_prefix' using process `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:135$6'.
  created $adff cell `$procdff$701' with positive edge clock and negative level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:358$130'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:358$130'.
Found and cleaned up 33 empty switches in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:224$67'.
Found and cleaned up 1 empty switch in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:213$63'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:213$63'.
Found and cleaned up 1 empty switch in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:197$51'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:197$51'.
Found and cleaned up 1 empty switch in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:180$37'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:180$37'.
Found and cleaned up 3 empty switches in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:167$29'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:167$29'.
Found and cleaned up 6 empty switches in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:147$12'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:147$12'.
Found and cleaned up 1 empty switch in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:135$6'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:135$6'.
Found and cleaned up 16 empty switches in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:112$5'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:112$5'.
Found and cleaned up 1 empty switch in `\cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:106$1'.
Removing empty process `cavlc_read_levels.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:106$1'.
Cleaned up 68 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_levels.
<suppressed ~9 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_levels.
<suppressed ~1 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_levels'.
<suppressed ~216 debug messages>
Removed a total of 72 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cavlc_read_levels..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:218$66: \level -> { 1'0 \level [7:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~27 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cavlc_read_levels.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_levels'.
<suppressed ~126 debug messages>
Removed a total of 42 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$693 ($adff) from module cavlc_read_levels (D = $procmux$232_Y, Q = \level_11).
Adding EN signal on $procdff$694 ($adff) from module cavlc_read_levels (D = $procmux$211_Y, Q = \level_12).
Adding EN signal on $procdff$695 ($adff) from module cavlc_read_levels (D = $procmux$192_Y, Q = \level_13).
Adding EN signal on $procdff$701 ($adff) from module cavlc_read_levels (D = $procmux$677_Y, Q = \level_prefix).
Adding EN signal on $procdff$700 ($adff) from module cavlc_read_levels (D = $procmux$625_Y, Q = \suffixLength).
Adding EN signal on $procdff$699 ($adff) from module cavlc_read_levels (D = $add$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:185$47_Y [8:0], Q = \level_code_tmp).
Adding EN signal on $procdff$696 ($adff) from module cavlc_read_levels (D = $procmux$175_Y, Q = \level_14).
Adding EN signal on $procdff$697 ($adff) from module cavlc_read_levels (D = $procmux$162_Y, Q = \level_15).
Adding EN signal on $procdff$682 ($adff) from module cavlc_read_levels (D = $procmux$595_Y, Q = \level_0).
Adding EN signal on $procdff$683 ($adff) from module cavlc_read_levels (D = $procmux$552_Y, Q = \level_1).
Adding EN signal on $procdff$698 ($adff) from module cavlc_read_levels (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/cavlc_submodules/cavlc_read_levels.v:218$66_Y, Q = \level_abs).
Adding EN signal on $procdff$684 ($adff) from module cavlc_read_levels (D = $procmux$511_Y, Q = \level_2).
Adding EN signal on $procdff$685 ($adff) from module cavlc_read_levels (D = $procmux$472_Y, Q = \level_3).
Adding EN signal on $procdff$686 ($adff) from module cavlc_read_levels (D = $procmux$435_Y, Q = \level_4).
Adding EN signal on $procdff$687 ($adff) from module cavlc_read_levels (D = $procmux$400_Y, Q = \level_5).
Adding EN signal on $procdff$688 ($adff) from module cavlc_read_levels (D = $procmux$367_Y, Q = \level_6).
Adding EN signal on $procdff$689 ($adff) from module cavlc_read_levels (D = $procmux$336_Y, Q = \level_7).
Adding EN signal on $procdff$690 ($adff) from module cavlc_read_levels (D = $procmux$307_Y, Q = \level_8).
Adding EN signal on $procdff$691 ($adff) from module cavlc_read_levels (D = $procmux$280_Y, Q = \level_9).
Adding EN signal on $procdff$692 ($adff) from module cavlc_read_levels (D = $procmux$255_Y, Q = \level_10).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cavlc_read_levels..
Removed 5 unused cells and 251 unused wires.
<suppressed ~7 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_levels.
<suppressed ~17 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cavlc_read_levels..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cavlc_read_levels.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_levels'.
<suppressed ~126 debug messages>
Removed a total of 42 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cavlc_read_levels..
Removed 0 unused cells and 42 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_levels.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cavlc_read_levels..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~28 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cavlc_read_levels.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cavlc_read_levels'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cavlc_read_levels..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module cavlc_read_levels.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== cavlc_read_levels ===

   Number of wires:                280
   Number of wire bits:           1669
   Number of public wires:          39
   Number of public wire bits:     251
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                268
     $add                          163
     $adffe                        169
     $and                           32
     $eq                           102
     $gt                            82
     $le                            32
     $logic_and                     16
     $logic_not                     39
     $logic_or                       2
     $lt                            64
     $mux                          754
     $ne                           196
     $neg                           41
     $pmux                         135
     $reduce_and                    79
     $reduce_bool                    7
     $shl                           41
     $shr                            6
     $sub                          134

End of script. Logfile hash: 6535823d70, CPU: user 0.24s system 0.00s, MEM: 15.06 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 31% 5x opt_expr (0 sec), 16% 2x read_verilog (0 sec), ...
