
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v' to AST representation.
Generating RTLIL representation for module `\state_machine'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: state_machine       
Automatically selected state_machine as design top module.

2.2. Analyzing design hierarchy..
Top module:  \state_machine

2.3. Analyzing design hierarchy..
Top module:  \state_machine
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4 in module state_machine.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:23$1 in module state_machine.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_n in `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
Found async reset \rst_n in `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:23$1'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
     1/8: $3\window_line_counter[1:0]
     2/8: $0\raddr_c[9:0]
     3/8: $0\raddr_b[9:0]
     4/8: $0\raddr_a[9:0]
     5/8: $0\window_column_counter[9:0]
     6/8: $2\window_line_counter[1:0]
     7/8: $1\window_line_counter[1:0]
     8/8: $0\valid[0:0]
Creating decoders for process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:23$1'.
     1/1: $0\waddr[9:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\state_machine.\raddr_a' using process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
  created $adff cell `$procdff$65' with positive edge clock and negative level reset.
Creating register for signal `\state_machine.\raddr_b' using process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
  created $adff cell `$procdff$66' with positive edge clock and negative level reset.
Creating register for signal `\state_machine.\raddr_c' using process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
  created $adff cell `$procdff$67' with positive edge clock and negative level reset.
Creating register for signal `\state_machine.\window_line_counter' using process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
  created $adff cell `$procdff$68' with positive edge clock and negative level reset.
Creating register for signal `\state_machine.\window_column_counter' using process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
  created $adff cell `$procdff$69' with positive edge clock and negative level reset.
Creating register for signal `\state_machine.\valid' using process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
  created $dff cell `$procdff$72' with positive edge clock.
Creating register for signal `\state_machine.\waddr' using process `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:23$1'.
  created $adff cell `$procdff$73' with positive edge clock and negative level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
Removing empty process `state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:32$4'.
Found and cleaned up 1 empty switch in `\state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:23$1'.
Removing empty process `state_machine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:23$1'.
Cleaned up 3 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.
<suppressed ~4 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$28.
Removed 1 multiplexer ports.
<suppressed ~7 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
    New ctrl vector for $pmux cell $procmux$39: { $procmux$49_CMP $auto$opt_reduce.cc:134:opt_mux$75 }
    New ctrl vector for $pmux cell $procmux$31: { $auto$opt_reduce.cc:134:opt_mux$77 $procmux$48_CMP }
    New ctrl vector for $pmux cell $procmux$23: { $auto$opt_reduce.cc:134:opt_mux$79 $procmux$48_CMP }
    New ctrl vector for $pmux cell $procmux$47: { $procmux$50_CMP $auto$opt_reduce.cc:134:opt_mux$81 }
  Optimizing cells in module \state_machine.
Performed a total of 4 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$68 ($adff) from module state_machine (D = $3\window_line_counter[1:0], Q = \window_line_counter).
Adding EN signal on $procdff$72 ($dff) from module state_machine (D = 1'1, Q = \valid).
Setting constant 1-bit at position 0 on $auto$ff.cc:262:slice$83 ($dffe) from module state_machine.
Adding EN signal on $procdff$73 ($adff) from module state_machine (D = $add$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/fpga-median_submodules/state_machine.v:28$3_Y, Q = \waddr).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..
Removed 6 unused cells and 43 unused wires.
<suppressed ~7 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Removing always-active EN on $auto$ff.cc:262:slice$86 ($adffe) from module state_machine.
Adding EN signal on $auto$ff.cc:262:slice$82 ($adffe) from module state_machine (D = $3\window_line_counter[1:0], Q = \window_line_counter).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.
<suppressed ~1 debug messages>

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \state_machine..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \state_machine.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\state_machine'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \state_machine..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module state_machine.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== state_machine ===

   Number of wires:                 37
   Number of wire bits:            229
   Number of public wires:          10
   Number of public wire bits:      65
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 33
     $add                           52
     $adff                          50
     $adffe                          2
     $eq                             4
     $logic_not                      2
     $mux                           40
     $ne                            10
     $not                            1
     $pmux                          32
     $reduce_and                     2
     $reduce_bool                    2
     $reduce_or                      6
     $sub                           30

End of script. Logfile hash: 8d3ba1efcd, CPU: user 0.03s system 0.00s, MEM: 11.48 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 5x opt_expr (0 sec), 24% 3x opt_clean (0 sec), ...
