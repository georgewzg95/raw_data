
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v' to AST representation.
Generating RTLIL representation for module `\cosecant_lut'.
Generating RTLIL representation for module `\cosine_lut'.
Generating RTLIL representation for module `\cotangent_lut'.
Generating RTLIL representation for module `\dividor'.
Generating RTLIL representation for module `\secant_lut'.
Generating RTLIL representation for module `\sine_lut'.
Generating RTLIL representation for module `\tangent_lut'.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: top                 
root of   0 design levels: tangent_lut         
root of   0 design levels: sine_lut            
root of   0 design levels: secant_lut          
root of   0 design levels: dividor             
root of   0 design levels: cotangent_lut       
root of   0 design levels: cosine_lut          
root of   0 design levels: cosecant_lut        
Automatically selected top as design top module.

2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \dividor
Used module:     \cotangent_lut
Used module:     \secant_lut
Used module:     \cosecant_lut
Used module:     \tangent_lut
Used module:     \cosine_lut
Used module:     \sine_lut

2.3. Analyzing design hierarchy..
Top module:  \top
Used module:     \dividor
Used module:     \cotangent_lut
Used module:     \secant_lut
Used module:     \cosecant_lut
Used module:     \tangent_lut
Used module:     \cosine_lut
Used module:     \sine_lut
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1342$70 in module top.
Marked 7 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1265$40 in module top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27 in module top.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1020$23 in module tangent_lut.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:841$19 in module sine_lut.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:662$15 in module secant_lut.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:594$13 in module dividor.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:411$9 in module cotangent_lut.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:234$5 in module cosine_lut.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:55$1 in module cosecant_lut.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 16 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1342$70'.
     1/1: $0\data1[63:0]
Creating decoders for process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1265$40'.
     1/3: $0\degrees_tmp2[31:0]
     2/3: $0\quad[1:0]
     3/3: $0\degrees_tmp1[31:0]
Creating decoders for process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
     1/6: $0\cot_enable[0:0]
     2/6: $0\sec_enable[0:0]
     3/6: $0\csc_enable[0:0]
     4/6: $0\tan_enable[0:0]
     5/6: $0\cos_enable[0:0]
     6/6: $0\sin_enable[0:0]
Creating decoders for process `\tangent_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1020$23'.
     1/2: $0\data[63:0] [63]
     2/2: $0\data[63:0] [62:0]
Creating decoders for process `\sine_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:841$19'.
     1/2: $0\data[63:0] [63]
     2/2: $0\data[63:0] [62:0]
Creating decoders for process `\secant_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:662$15'.
     1/2: $0\data[63:0] [63]
     2/2: $0\data[63:0] [62:0]
Creating decoders for process `\dividor.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:594$13'.
     1/1: $0\out[31:0]
Creating decoders for process `\cotangent_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:411$9'.
     1/2: $0\data[63:0] [63]
     2/2: $0\data[63:0] [62:0]
Creating decoders for process `\cosine_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:234$5'.
     1/2: $0\data[63:0] [63]
     2/2: $0\data[63:0] [62:0]
Creating decoders for process `\cosecant_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:55$1'.
     1/2: $0\data[63:0] [63]
     2/2: $0\data[63:0] [62:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\data1' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1342$70'.
  created $dff cell `$procdff$1316' with positive edge clock.
Creating register for signal `\top.\quad' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1265$40'.
  created $dff cell `$procdff$1317' with positive edge clock.
Creating register for signal `\top.\degrees_tmp1' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1265$40'.
  created $dff cell `$procdff$1318' with positive edge clock.
Creating register for signal `\top.\degrees_tmp2' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1265$40'.
  created $dff cell `$procdff$1319' with positive edge clock.
Creating register for signal `\top.\sin_enable' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
  created $dff cell `$procdff$1320' with positive edge clock.
Creating register for signal `\top.\cos_enable' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
  created $dff cell `$procdff$1321' with positive edge clock.
Creating register for signal `\top.\tan_enable' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
  created $dff cell `$procdff$1322' with positive edge clock.
Creating register for signal `\top.\csc_enable' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
  created $dff cell `$procdff$1323' with positive edge clock.
Creating register for signal `\top.\sec_enable' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
  created $dff cell `$procdff$1324' with positive edge clock.
Creating register for signal `\top.\cot_enable' using process `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
  created $dff cell `$procdff$1325' with positive edge clock.
Creating register for signal `\tangent_lut.\data' using process `\tangent_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1020$23'.
  created $dff cell `$procdff$1326' with positive edge clock.
Creating register for signal `\sine_lut.\data' using process `\sine_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:841$19'.
  created $dff cell `$procdff$1327' with positive edge clock.
Creating register for signal `\secant_lut.\data' using process `\secant_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:662$15'.
  created $dff cell `$procdff$1328' with positive edge clock.
Creating register for signal `\dividor.\out' using process `\dividor.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:594$13'.
  created $dff cell `$procdff$1329' with positive edge clock.
Creating register for signal `\cotangent_lut.\data' using process `\cotangent_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:411$9'.
  created $dff cell `$procdff$1330' with positive edge clock.
Creating register for signal `\cosine_lut.\data' using process `\cosine_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:234$5'.
  created $dff cell `$procdff$1331' with positive edge clock.
Creating register for signal `\cosecant_lut.\data' using process `\cosecant_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:55$1'.
  created $dff cell `$procdff$1332' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1342$70'.
Removing empty process `top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1342$70'.
Found and cleaned up 7 empty switches in `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1265$40'.
Removing empty process `top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1265$40'.
Found and cleaned up 1 empty switch in `\top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
Removing empty process `top.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1234$27'.
Found and cleaned up 3 empty switches in `\tangent_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1020$23'.
Removing empty process `tangent_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1020$23'.
Found and cleaned up 3 empty switches in `\sine_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:841$19'.
Removing empty process `sine_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:841$19'.
Found and cleaned up 3 empty switches in `\secant_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:662$15'.
Removing empty process `secant_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:662$15'.
Found and cleaned up 1 empty switch in `\dividor.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:594$13'.
Removing empty process `dividor.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:594$13'.
Found and cleaned up 3 empty switches in `\cotangent_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:411$9'.
Removing empty process `cotangent_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:411$9'.
Found and cleaned up 3 empty switches in `\cosine_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:234$5'.
Removing empty process `cosine_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:234$5'.
Found and cleaned up 3 empty switches in `\cosecant_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:55$1'.
Removing empty process `cosecant_lut.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:55$1'.
Cleaned up 28 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~2 debug messages>
Optimizing module tangent_lut.
<suppressed ~1 debug messages>
Optimizing module sine_lut.
<suppressed ~1 debug messages>
Optimizing module secant_lut.
<suppressed ~2 debug messages>
Optimizing module dividor.
Optimizing module cotangent_lut.
<suppressed ~2 debug messages>
Optimizing module cosine_lut.
<suppressed ~2 debug messages>
Optimizing module cosecant_lut.
<suppressed ~2 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module tangent_lut.
Optimizing module sine_lut.
Optimizing module secant_lut.
Optimizing module dividor.
Optimizing module cotangent_lut.
Optimizing module cosine_lut.
Optimizing module cosecant_lut.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~18 debug messages>
Finding identical cells in module `\tangent_lut'.
<suppressed ~270 debug messages>
Finding identical cells in module `\sine_lut'.
<suppressed ~270 debug messages>
Finding identical cells in module `\secant_lut'.
<suppressed ~273 debug messages>
Finding identical cells in module `\dividor'.
Finding identical cells in module `\cotangent_lut'.
<suppressed ~270 debug messages>
Finding identical cells in module `\cosine_lut'.
<suppressed ~270 debug messages>
Finding identical cells in module `\cosecant_lut'.
<suppressed ~273 debug messages>
Removed a total of 548 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tangent_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sine_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \secant_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cotangent_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cosine_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cosecant_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
  Optimizing cells in module \tangent_lut.
    New ctrl vector for $pmux cell $procmux$150: $auto$opt_reduce.cc:134:opt_mux$1334
  Optimizing cells in module \tangent_lut.
  Optimizing cells in module \sine_lut.
    New ctrl vector for $pmux cell $procmux$344: $auto$opt_reduce.cc:134:opt_mux$1336
  Optimizing cells in module \sine_lut.
  Optimizing cells in module \secant_lut.
    New ctrl vector for $pmux cell $procmux$538: $auto$opt_reduce.cc:134:opt_mux$1338
  Optimizing cells in module \secant_lut.
  Optimizing cells in module \dividor.
  Optimizing cells in module \cotangent_lut.
    New ctrl vector for $pmux cell $procmux$736: $auto$opt_reduce.cc:134:opt_mux$1340
  Optimizing cells in module \cotangent_lut.
  Optimizing cells in module \cosine_lut.
    New ctrl vector for $pmux cell $procmux$931: $auto$opt_reduce.cc:134:opt_mux$1342
  Optimizing cells in module \cosine_lut.
  Optimizing cells in module \cosecant_lut.
    New ctrl vector for $pmux cell $procmux$1126: $auto$opt_reduce.cc:134:opt_mux$1344
  Optimizing cells in module \cosecant_lut.
Performed a total of 6 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Finding identical cells in module `\tangent_lut'.
Finding identical cells in module `\sine_lut'.
Finding identical cells in module `\secant_lut'.
Finding identical cells in module `\dividor'.
Finding identical cells in module `\cotangent_lut'.
Finding identical cells in module `\cosine_lut'.
Finding identical cells in module `\cosecant_lut'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$1320 ($dff) from module top (D = \enable, Q = \sin_enable, rval = 1'0).
Adding SRST signal on $procdff$1321 ($dff) from module top (D = \enable, Q = \cos_enable, rval = 1'0).
Adding SRST signal on $procdff$1322 ($dff) from module top (D = \enable, Q = \tan_enable, rval = 1'0).
Adding SRST signal on $procdff$1323 ($dff) from module top (D = \enable, Q = \csc_enable, rval = 1'0).
Adding SRST signal on $procdff$1324 ($dff) from module top (D = \enable, Q = \sec_enable, rval = 1'0).
Adding SRST signal on $procdff$1325 ($dff) from module top (D = \enable, Q = \cot_enable, rval = 1'0).
Adding EN signal on $procdff$1318 ($dff) from module top (D = $sub$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:1306$61_Y, Q = \degrees_tmp1).
Adding SRST signal on $procdff$1329 ($dff) from module dividor (D = $mod$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/trigonometric_functions_in_double_fpu.v:601$14_Y, Q = \out, rval = 0).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \tangent_lut..
Finding unused cells or wires in module \sine_lut..
Finding unused cells or wires in module \secant_lut..
Finding unused cells or wires in module \dividor..
Finding unused cells or wires in module \cotangent_lut..
Finding unused cells or wires in module \cosine_lut..
Finding unused cells or wires in module \cosecant_lut..
Removed 15 unused cells and 631 unused wires.
<suppressed ~27 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cosecant_lut.
Optimizing module cosine_lut.
Optimizing module cotangent_lut.
Optimizing module dividor.
Optimizing module secant_lut.
Optimizing module sine_lut.
Optimizing module tangent_lut.
Optimizing module top.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cosecant_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cosine_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \cotangent_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dividor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \secant_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \sine_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \tangent_lut..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cosecant_lut.
  Optimizing cells in module \cosine_lut.
  Optimizing cells in module \cotangent_lut.
  Optimizing cells in module \dividor.
  Optimizing cells in module \secant_lut.
  Optimizing cells in module \sine_lut.
  Optimizing cells in module \tangent_lut.
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cosecant_lut'.
Finding identical cells in module `\cosine_lut'.
Finding identical cells in module `\cotangent_lut'.
Finding identical cells in module `\dividor'.
Finding identical cells in module `\secant_lut'.
Finding identical cells in module `\sine_lut'.
Finding identical cells in module `\tangent_lut'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cosecant_lut..
Finding unused cells or wires in module \cosine_lut..
Finding unused cells or wires in module \cotangent_lut..
Finding unused cells or wires in module \dividor..
Finding unused cells or wires in module \secant_lut..
Finding unused cells or wires in module \sine_lut..
Finding unused cells or wires in module \tangent_lut..
Finding unused cells or wires in module \top..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cosecant_lut.
Optimizing module cosine_lut.
Optimizing module cotangent_lut.
Optimizing module dividor.
Optimizing module secant_lut.
Optimizing module sine_lut.
Optimizing module tangent_lut.
Optimizing module top.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== cosecant_lut ===

   Number of wires:                105
   Number of wire bits:            325
   Number of public wires:           6
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $dff                           64
     $eq                          2884
     $logic_not                     32
     $logic_or                       1
     $mux                           66
     $pmux                          63
     $reduce_or                     91

=== cosine_lut ===

   Number of wires:                105
   Number of wire bits:            325
   Number of public wires:           6
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $dff                           64
     $eq                          2884
     $logic_not                     32
     $logic_or                       1
     $mux                           66
     $pmux                          63
     $reduce_or                     91

=== cotangent_lut ===

   Number of wires:                105
   Number of wire bits:            325
   Number of public wires:           6
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $dff                           64
     $eq                          2884
     $logic_not                     32
     $logic_or                       1
     $mux                           66
     $pmux                          63
     $reduce_or                     91

=== dividor ===

   Number of wires:                  6
   Number of wire bits:            130
   Number of public wires:           5
   Number of public wire bits:      98
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $mod                           32
     $sdff                          32

=== secant_lut ===

   Number of wires:                105
   Number of wire bits:            325
   Number of public wires:           6
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $dff                           64
     $eq                          2884
     $logic_not                     32
     $logic_or                       1
     $mux                           66
     $pmux                          63
     $reduce_or                     91

=== sine_lut ===

   Number of wires:                105
   Number of wire bits:            325
   Number of public wires:           6
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $dff                           64
     $eq                          2884
     $logic_not                     32
     $logic_or                       1
     $mux                           66
     $pmux                          63
     $reduce_or                     91

=== tangent_lut ===

   Number of wires:                105
   Number of wire bits:            325
   Number of public wires:           6
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                101
     $dff                           64
     $eq                          2884
     $logic_not                     32
     $logic_or                       1
     $mux                           66
     $pmux                          63
     $reduce_or                     91

=== top ===

   Number of wires:                 86
   Number of wire bits:           1127
   Number of public wires:          22
   Number of public wire bits:     590
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $dff                           98
     $dffe                          32
     $eq                           143
     $gt                           224
     $logic_and                      4
     $logic_not                      3
     $logic_or                       4
     $lt                           128
     $mux                          238
     $not                            7
     $pmux                          64
     $reduce_and                     2
     $reduce_or                     12
     $sdff                           6
     $sub                          192

=== design hierarchy ===

   top                               1
     cosecant_lut                    0
     cosine_lut                      0
     cotangent_lut                   0
     dividor                         0
     secant_lut                      0
     sine_lut                        0
     tangent_lut                     0

   Number of wires:                 86
   Number of wire bits:           1127
   Number of public wires:          22
   Number of public wire bits:     590
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 81
     $dff                           98
     $dffe                          32
     $eq                           143
     $gt                           224
     $logic_and                      4
     $logic_not                      3
     $logic_or                       4
     $lt                           128
     $mux                          238
     $not                            7
     $pmux                          64
     $reduce_and                     2
     $reduce_or                     12
     $sdff                           6
     $sub                          192

End of script. Logfile hash: 07c9279798, CPU: user 0.87s system 0.01s, MEM: 21.89 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 28% 2x opt_reduce (0 sec), 22% 4x opt_expr (0 sec), ...
