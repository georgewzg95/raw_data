
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_nine.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_nine.v' to AST representation.
Generating RTLIL representation for module `\f3m_nine'.
Generating RTLIL representation for module `\f3m_cubic'.
Generating RTLIL representation for module `\f3_add'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: f3_add              
root of   1 design levels: f3m_cubic           
root of   2 design levels: f3m_nine            
Automatically selected f3m_nine as design top module.

2.2. Analyzing design hierarchy..
Top module:  \f3m_nine
Used module:     \f3m_cubic
Used module:         \f3_add

2.3. Analyzing design hierarchy..
Top module:  \f3m_nine
Used module:     \f3m_cubic
Used module:         \f3_add
Removed 0 unused modules.
Mapping positional arguments of cell f3m_cubic.a87 (f3_add).
Mapping positional arguments of cell f3m_cubic.a86 (f3_add).
Mapping positional arguments of cell f3m_cubic.a85 (f3_add).
Mapping positional arguments of cell f3m_cubic.a84 (f3_add).
Mapping positional arguments of cell f3m_cubic.a83 (f3_add).
Mapping positional arguments of cell f3m_cubic.a82 (f3_add).
Mapping positional arguments of cell f3m_cubic.a81 (f3_add).
Mapping positional arguments of cell f3m_cubic.a80 (f3_add).
Mapping positional arguments of cell f3m_cubic.a79 (f3_add).
Mapping positional arguments of cell f3m_cubic.a78 (f3_add).
Mapping positional arguments of cell f3m_cubic.a77 (f3_add).
Mapping positional arguments of cell f3m_cubic.a76 (f3_add).
Mapping positional arguments of cell f3m_cubic.a75 (f3_add).
Mapping positional arguments of cell f3m_cubic.a74 (f3_add).
Mapping positional arguments of cell f3m_cubic.a73 (f3_add).
Mapping positional arguments of cell f3m_cubic.a72 (f3_add).
Mapping positional arguments of cell f3m_cubic.a71 (f3_add).
Mapping positional arguments of cell f3m_cubic.a70 (f3_add).
Mapping positional arguments of cell f3m_cubic.a69 (f3_add).
Mapping positional arguments of cell f3m_cubic.a68 (f3_add).
Mapping positional arguments of cell f3m_cubic.a67 (f3_add).
Mapping positional arguments of cell f3m_cubic.a66 (f3_add).
Mapping positional arguments of cell f3m_cubic.a65 (f3_add).
Mapping positional arguments of cell f3m_cubic.a64 (f3_add).
Mapping positional arguments of cell f3m_cubic.a63 (f3_add).
Mapping positional arguments of cell f3m_cubic.a62 (f3_add).
Mapping positional arguments of cell f3m_cubic.a61 (f3_add).
Mapping positional arguments of cell f3m_cubic.a60 (f3_add).
Mapping positional arguments of cell f3m_cubic.a59 (f3_add).
Mapping positional arguments of cell f3m_cubic.a58 (f3_add).
Mapping positional arguments of cell f3m_cubic.a57 (f3_add).
Mapping positional arguments of cell f3m_cubic.a56 (f3_add).
Mapping positional arguments of cell f3m_cubic.a55 (f3_add).
Mapping positional arguments of cell f3m_cubic.a54 (f3_add).
Mapping positional arguments of cell f3m_cubic.a53 (f3_add).
Mapping positional arguments of cell f3m_cubic.a52 (f3_add).
Mapping positional arguments of cell f3m_cubic.a51 (f3_add).
Mapping positional arguments of cell f3m_cubic.a50 (f3_add).
Mapping positional arguments of cell f3m_cubic.a49 (f3_add).
Mapping positional arguments of cell f3m_cubic.a48 (f3_add).
Mapping positional arguments of cell f3m_cubic.a47 (f3_add).
Mapping positional arguments of cell f3m_cubic.a46 (f3_add).
Mapping positional arguments of cell f3m_cubic.a45 (f3_add).
Mapping positional arguments of cell f3m_cubic.a44 (f3_add).
Mapping positional arguments of cell f3m_cubic.a43 (f3_add).
Mapping positional arguments of cell f3m_cubic.a42 (f3_add).
Mapping positional arguments of cell f3m_cubic.a41 (f3_add).
Mapping positional arguments of cell f3m_cubic.a40 (f3_add).
Mapping positional arguments of cell f3m_cubic.a39 (f3_add).
Mapping positional arguments of cell f3m_cubic.a38 (f3_add).
Mapping positional arguments of cell f3m_cubic.a37 (f3_add).
Mapping positional arguments of cell f3m_cubic.a36 (f3_add).
Mapping positional arguments of cell f3m_cubic.a35 (f3_add).
Mapping positional arguments of cell f3m_cubic.a34 (f3_add).
Mapping positional arguments of cell f3m_cubic.a33 (f3_add).
Mapping positional arguments of cell f3m_cubic.a32 (f3_add).
Mapping positional arguments of cell f3m_cubic.a31 (f3_add).
Mapping positional arguments of cell f3m_cubic.a30 (f3_add).
Mapping positional arguments of cell f3m_cubic.a29 (f3_add).
Mapping positional arguments of cell f3m_cubic.a28 (f3_add).
Mapping positional arguments of cell f3m_cubic.a27 (f3_add).
Mapping positional arguments of cell f3m_cubic.a26 (f3_add).
Mapping positional arguments of cell f3m_cubic.a25 (f3_add).
Mapping positional arguments of cell f3m_cubic.a24 (f3_add).
Mapping positional arguments of cell f3m_cubic.a23 (f3_add).
Mapping positional arguments of cell f3m_cubic.a22 (f3_add).
Mapping positional arguments of cell f3m_cubic.a21 (f3_add).
Mapping positional arguments of cell f3m_cubic.a20 (f3_add).
Mapping positional arguments of cell f3m_cubic.a19 (f3_add).
Mapping positional arguments of cell f3m_cubic.a18 (f3_add).
Mapping positional arguments of cell f3m_cubic.a17 (f3_add).
Mapping positional arguments of cell f3m_cubic.a16 (f3_add).
Mapping positional arguments of cell f3m_cubic.a15 (f3_add).
Mapping positional arguments of cell f3m_cubic.a14 (f3_add).
Mapping positional arguments of cell f3m_cubic.a13 (f3_add).
Mapping positional arguments of cell f3m_cubic.a12 (f3_add).
Mapping positional arguments of cell f3m_cubic.a11 (f3_add).
Mapping positional arguments of cell f3m_cubic.a10 (f3_add).
Mapping positional arguments of cell f3m_cubic.a9 (f3_add).
Mapping positional arguments of cell f3m_cubic.a8 (f3_add).
Mapping positional arguments of cell f3m_cubic.a7 (f3_add).
Mapping positional arguments of cell f3m_cubic.a6 (f3_add).
Mapping positional arguments of cell f3m_cubic.a5 (f3_add).
Mapping positional arguments of cell f3m_cubic.a4 (f3_add).
Mapping positional arguments of cell f3m_cubic.a3 (f3_add).
Mapping positional arguments of cell f3m_cubic.a2 (f3_add).
Mapping positional arguments of cell f3m_cubic.a1 (f3_add).
Mapping positional arguments of cell f3m_cubic.a0 (f3_add).
Mapping positional arguments of cell f3m_nine.ins2 (f3m_cubic).
Mapping positional arguments of cell f3m_nine.ins1 (f3m_cubic).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\f3m_nine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_nine.v:19$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\f3m_nine.\out' using process `\f3m_nine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_nine.v:19$1'.
  created $dff cell `$procdff$40' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `f3m_nine.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_nine.v:19$1'.
Cleaned up 0 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3m_cubic.
Optimizing module f3m_nine.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3m_cubic.
Optimizing module f3m_nine.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3_add'.
<suppressed ~48 debug messages>
Finding identical cells in module `\f3m_cubic'.
Finding identical cells in module `\f3m_nine'.
Removed a total of 16 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f3_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3m_cubic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3m_nine..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f3_add.
  Optimizing cells in module \f3m_cubic.
  Optimizing cells in module \f3m_nine.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3_add'.
Finding identical cells in module `\f3m_cubic'.
Finding identical cells in module `\f3m_nine'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f3_add..
Finding unused cells or wires in module \f3m_cubic..
Finding unused cells or wires in module \f3m_nine..
Removed 0 unused cells and 19 unused wires.
<suppressed ~2 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3m_cubic.
Optimizing module f3m_nine.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f3_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3m_cubic..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3m_nine..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f3_add.
  Optimizing cells in module \f3m_cubic.
  Optimizing cells in module \f3m_nine.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3_add'.
Finding identical cells in module `\f3m_cubic'.
Finding identical cells in module `\f3m_nine'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f3_add..
Finding unused cells or wires in module \f3m_cubic..
Finding unused cells or wires in module \f3m_nine..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3m_cubic.
Optimizing module f3m_nine.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== f3_add ===

   Number of wires:                 29
   Number of wire bits:             32
   Number of public wires:           9
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $and                           14
     $not                            4
     $or                             4

=== f3m_cubic ===

   Number of wires:                 90
   Number of wire bits:            564
   Number of public wires:          90
   Number of public wire bits:     564
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 88

=== f3m_nine ===

   Number of wires:                  5
   Number of wire bits:            777
   Number of public wires:           5
   Number of public wire bits:     777
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dff                          194

=== design hierarchy ===

   f3m_nine                          1
     f3m_cubic                       0
       f3_add                        0

   Number of wires:                  5
   Number of wire bits:            777
   Number of public wires:           5
   Number of public wire bits:     777
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     $dff                          194

End of script. Logfile hash: 93307d7558, CPU: user 0.10s system 0.00s, MEM: 13.18 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 30% 2x read_verilog (0 sec), 21% 2x opt_clean (0 sec), ...
