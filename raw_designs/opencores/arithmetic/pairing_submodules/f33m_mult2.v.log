
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v' to AST representation.
Generating RTLIL representation for module `\f33m_mult2'.
Generating RTLIL representation for module `\f33m_mux2'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: f33m_mux2           
root of   1 design levels: f33m_mult2          
Automatically selected f33m_mult2 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \f33m_mult2
Used module:     \f33m_mux2

2.3. Analyzing design hierarchy..
Top module:  \f33m_mult2
Used module:     \f33m_mux2
Removed 0 unused modules.
Mapping positional arguments of cell f33m_mult2.ins10 (f33m_mux2).
Mapping positional arguments of cell f33m_mult2.ins9 (f33m_mux2).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:52$5 in module f33m_mult2.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:45$4 in module f33m_mult2.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:41$2 in module f33m_mult2.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:56$6'.
Creating decoders for process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:52$5'.
     1/1: $0\done[0:0]
Creating decoders for process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:45$4'.
     1/1: $0\mult_reset[0:0]
Creating decoders for process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:41$2'.
     1/1: $0\K[2:0]
Creating decoders for process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:35$1'.
     1/2: $0\c1[581:0]
     2/2: $0\c0[581:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\f33m_mult2.\delay1' using process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:56$6'.
  created $dff cell `$procdff$1773' with positive edge clock.
Creating register for signal `\f33m_mult2.\delay2' using process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:56$6'.
  created $dff cell `$procdff$1774' with positive edge clock.
Creating register for signal `\f33m_mult2.\done' using process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:52$5'.
  created $dff cell `$procdff$1775' with positive edge clock.
Creating register for signal `\f33m_mult2.\mult_reset' using process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:45$4'.
  created $dff cell `$procdff$1776' with positive edge clock.
Creating register for signal `\f33m_mult2.\K' using process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:41$2'.
  created $dff cell `$procdff$1777' with positive edge clock.
Creating register for signal `\f33m_mult2.\c0' using process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:35$1'.
  created $dff cell `$procdff$1778' with positive edge clock.
Creating register for signal `\f33m_mult2.\c1' using process `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:35$1'.
  created $dff cell `$procdff$1779' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:56$6'.
Found and cleaned up 2 empty switches in `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:52$5'.
Removing empty process `f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:52$5'.
Found and cleaned up 2 empty switches in `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:45$4'.
Removing empty process `f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:45$4'.
Found and cleaned up 2 empty switches in `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:41$2'.
Removing empty process `f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:41$2'.
Found and cleaned up 2 empty switches in `\f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:35$1'.
Removing empty process `f33m_mult2.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_mult2.v:35$1'.
Cleaned up 8 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module f33m_mux2.
Optimizing module f33m_mult2.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module f33m_mux2.
Optimizing module f33m_mult2.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f33m_mux2'.
Finding identical cells in module `\f33m_mult2'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f33m_mux2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f33m_mult2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f33m_mux2.
  Optimizing cells in module \f33m_mult2.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f33m_mux2'.
Finding identical cells in module `\f33m_mult2'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$1775 ($dff) from module f33m_mult2 (D = $procmux$1753_Y, Q = \done, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$1780 ($sdff) from module f33m_mult2 (D = 1'1, Q = \done).
Adding SRST signal on $procdff$1776 ($dff) from module f33m_mult2 (D = $procmux$1759_Y, Q = \mult_reset, rval = 1'1).
Adding SRST signal on $procdff$1777 ($dff) from module f33m_mult2 (D = $procmux$1764_Y, Q = \K, rval = 3'100).
Adding EN signal on $auto$ff.cc:262:slice$1783 ($sdff) from module f33m_mult2 (D = { 1'0 \K [2:1] }, Q = \K).
Adding EN signal on $procdff$1778 ($dff) from module f33m_mult2 (D = \o, Q = \c0).
Adding EN signal on $procdff$1779 ($dff) from module f33m_mult2 (D = \o, Q = \c1).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f33m_mux2..
Finding unused cells or wires in module \f33m_mult2..
Removed 7 unused cells and 604 unused wires.
<suppressed ~9 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module f33m_mult2.
Optimizing module f33m_mux2.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f33m_mult2..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \f33m_mux2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f33m_mult2.
  Optimizing cells in module \f33m_mux2.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f33m_mult2'.
Finding identical cells in module `\f33m_mux2'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f33m_mult2..
Finding unused cells or wires in module \f33m_mux2..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module f33m_mult2.
Optimizing module f33m_mux2.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== f33m_mult2 ===

   Number of wires:                 23
   Number of wire bits:           5254
   Number of public wires:          21
   Number of public wire bits:    5252
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $dff                            2
     $dffe                           2
     $mux                            1
     $or                             1
     $sdff                           1
     $sdffe                          2
     f33m_mult                       1
     f33m_mux2                       2
     func6                           1

=== f33m_mux2 ===

   Number of wires:               1169
   Number of wire bits:           2912
   Number of public wires:           5
   Number of public wire bits:    1748
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1746
     $and                         1164
     $or                           582

=== design hierarchy ===

   f33m_mult2                        1
     f33m_mux2                       2

   Number of wires:               2361
   Number of wire bits:          11078
   Number of public wires:          31
   Number of public wire bits:    8748
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3503
     $and                         2328
     $dff                            2
     $dffe                           2
     $mux                            1
     $or                          1165
     $sdff                           1
     $sdffe                          2
     f33m_mult                       1
     func6                           1

End of script. Logfile hash: 6bc14818dc, CPU: user 0.56s system 0.00s, MEM: 24.70 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 27% 2x read_verilog (0 sec), 27% 4x opt_expr (0 sec), ...
