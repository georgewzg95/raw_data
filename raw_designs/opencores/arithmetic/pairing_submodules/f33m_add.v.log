
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_add.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f33m_add.v' to AST representation.
Generating RTLIL representation for module `\f33m_add'.
Generating RTLIL representation for module `\f3m_add'.
Generating RTLIL representation for module `\f3_add'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: f3_add              
root of   1 design levels: f3m_add             
root of   2 design levels: f33m_add            
Automatically selected f33m_add as design top module.

2.2. Analyzing design hierarchy..
Top module:  \f33m_add
Used module:     \f3m_add
Used module:         \f3_add

2.3. Analyzing design hierarchy..
Top module:  \f33m_add
Used module:     \f3m_add
Used module:         \f3_add
Removed 0 unused modules.
Mapping positional arguments of cell f3m_add.aa[96].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[95].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[94].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[93].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[92].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[91].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[90].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[89].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[88].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[87].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[86].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[85].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[84].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[83].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[82].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[81].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[80].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[79].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[78].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[77].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[76].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[75].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[74].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[73].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[72].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[71].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[70].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[69].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[68].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[67].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[66].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[65].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[64].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[63].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[62].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[61].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[60].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[59].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[58].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[57].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[56].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[55].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[54].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[53].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[52].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[51].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[50].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[49].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[48].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[47].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[46].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[45].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[44].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[43].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[42].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[41].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[40].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[39].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[38].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[37].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[36].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[35].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[34].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[33].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[32].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[31].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[30].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[29].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[28].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[27].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[26].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[25].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[24].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[23].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[22].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[21].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[20].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[19].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[18].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[17].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[16].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[15].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[14].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[13].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[12].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[11].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[10].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[9].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[8].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[7].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[6].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[5].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[4].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[3].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[2].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[1].aa (f3_add).
Mapping positional arguments of cell f3m_add.aa[0].aa (f3_add).
Mapping positional arguments of cell f33m_add.ins3 (f3m_add).
Mapping positional arguments of cell f33m_add.ins2 (f3m_add).
Mapping positional arguments of cell f33m_add.ins1 (f3m_add).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3m_add.
Optimizing module f33m_add.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3_add.
Optimizing module f3m_add.
Optimizing module f33m_add.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3_add'.
<suppressed ~48 debug messages>
Finding identical cells in module `\f3m_add'.
Finding identical cells in module `\f33m_add'.
Removed a total of 16 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f3_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3m_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f33m_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f3_add.
  Optimizing cells in module \f3m_add.
  Optimizing cells in module \f33m_add.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3_add'.
Finding identical cells in module `\f3m_add'.
Finding identical cells in module `\f33m_add'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f3_add..
Finding unused cells or wires in module \f3m_add..
Finding unused cells or wires in module \f33m_add..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module f33m_add.
Optimizing module f3_add.
Optimizing module f3m_add.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f33m_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3m_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f33m_add.
  Optimizing cells in module \f3_add.
  Optimizing cells in module \f3m_add.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f33m_add'.
Finding identical cells in module `\f3_add'.
Finding identical cells in module `\f3m_add'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f33m_add..
Finding unused cells or wires in module \f3_add..
Finding unused cells or wires in module \f3m_add..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module f33m_add.
Optimizing module f3_add.
Optimizing module f3m_add.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== f33m_add ===

   Number of wires:                 12
   Number of wire bits:           3492
   Number of public wires:          12
   Number of public wire bits:    3492
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3

=== f3_add ===

   Number of wires:                 29
   Number of wire bits:             32
   Number of public wires:           9
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 22
     $and                           14
     $not                            4
     $or                             4

=== f3m_add ===

   Number of wires:                  3
   Number of wire bits:            582
   Number of public wires:           3
   Number of public wire bits:     582
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 97

=== design hierarchy ===

   f33m_add                          1
     f3m_add                         0
       f3_add                        0

   Number of wires:                 12
   Number of wire bits:           3492
   Number of public wires:          12
   Number of public wire bits:    3492
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3

End of script. Logfile hash: c82d2b779f, CPU: user 0.06s system 0.01s, MEM: 13.16 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 23% 2x read_verilog (0 sec), 23% 2x opt_clean (0 sec), ...
