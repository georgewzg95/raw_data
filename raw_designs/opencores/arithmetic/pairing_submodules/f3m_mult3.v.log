
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v' to AST representation.
Generating RTLIL representation for module `\f3m_mult3'.
Generating RTLIL representation for module `\f3m_mux3'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: f3m_mux3            
root of   1 design levels: f3m_mult3           
Automatically selected f3m_mult3 as design top module.

2.2. Analyzing design hierarchy..
Top module:  \f3m_mult3
Used module:     \f3m_mux3

2.3. Analyzing design hierarchy..
Top module:  \f3m_mult3
Used module:     \f3m_mux3
Removed 0 unused modules.
Mapping positional arguments of cell f3m_mult3.ins10 (f3m_mux3).
Mapping positional arguments of cell f3m_mult3.ins9 (f3m_mux3).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:54$5 in module f3m_mult3.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:47$4 in module f3m_mult3.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:43$2 in module f3m_mult3.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:58$6'.
Creating decoders for process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:54$5'.
     1/1: $0\done[0:0]
Creating decoders for process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:47$4'.
     1/1: $0\mult_reset[0:0]
Creating decoders for process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:43$2'.
     1/1: $0\K[3:0]
Creating decoders for process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:36$1'.
     1/3: $0\c2[193:0]
     2/3: $0\c1[193:0]
     3/3: $0\c0[193:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\f3m_mult3.\delay1' using process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:58$6'.
  created $dff cell `$procdff$999' with positive edge clock.
Creating register for signal `\f3m_mult3.\delay2' using process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:58$6'.
  created $dff cell `$procdff$1000' with positive edge clock.
Creating register for signal `\f3m_mult3.\done' using process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:54$5'.
  created $dff cell `$procdff$1001' with positive edge clock.
Creating register for signal `\f3m_mult3.\mult_reset' using process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:47$4'.
  created $dff cell `$procdff$1002' with positive edge clock.
Creating register for signal `\f3m_mult3.\K' using process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:43$2'.
  created $dff cell `$procdff$1003' with positive edge clock.
Creating register for signal `\f3m_mult3.\c0' using process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:36$1'.
  created $dff cell `$procdff$1004' with positive edge clock.
Creating register for signal `\f3m_mult3.\c1' using process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:36$1'.
  created $dff cell `$procdff$1005' with positive edge clock.
Creating register for signal `\f3m_mult3.\c2' using process `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:36$1'.
  created $dff cell `$procdff$1006' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:58$6'.
Found and cleaned up 2 empty switches in `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:54$5'.
Removing empty process `f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:54$5'.
Found and cleaned up 2 empty switches in `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:47$4'.
Removing empty process `f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:47$4'.
Found and cleaned up 2 empty switches in `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:43$2'.
Removing empty process `f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:43$2'.
Found and cleaned up 3 empty switches in `\f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:36$1'.
Removing empty process `f3m_mult3.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f3m_mult3.v:36$1'.
Cleaned up 9 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3m_mux3.
Optimizing module f3m_mult3.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3m_mux3.
Optimizing module f3m_mult3.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3m_mux3'.
Finding identical cells in module `\f3m_mult3'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f3m_mux3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f3m_mult3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f3m_mux3.
  Optimizing cells in module \f3m_mult3.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3m_mux3'.
Finding identical cells in module `\f3m_mult3'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$1001 ($dff) from module f3m_mult3 (D = $procmux$977_Y, Q = \done, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$1007 ($sdff) from module f3m_mult3 (D = 1'1, Q = \done).
Adding SRST signal on $procdff$1002 ($dff) from module f3m_mult3 (D = $procmux$983_Y, Q = \mult_reset, rval = 1'1).
Adding SRST signal on $procdff$1003 ($dff) from module f3m_mult3 (D = $procmux$988_Y, Q = \K, rval = 4'1000).
Adding EN signal on $auto$ff.cc:262:slice$1010 ($sdff) from module f3m_mult3 (D = { 1'0 \K [3:1] }, Q = \K).
Adding EN signal on $procdff$1004 ($dff) from module f3m_mult3 (D = \o, Q = \c0).
Adding EN signal on $procdff$1005 ($dff) from module f3m_mult3 (D = \o, Q = \c1).
Adding EN signal on $procdff$1006 ($dff) from module f3m_mult3 (D = \o, Q = \c2).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f3m_mux3..
Finding unused cells or wires in module \f3m_mult3..
Removed 8 unused cells and 219 unused wires.
<suppressed ~10 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3m_mult3.
Optimizing module f3m_mux3.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f3m_mult3..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \f3m_mux3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f3m_mult3.
  Optimizing cells in module \f3m_mux3.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f3m_mult3'.
Finding identical cells in module `\f3m_mux3'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f3m_mult3..
Finding unused cells or wires in module \f3m_mux3..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module f3m_mult3.
Optimizing module f3m_mux3.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== f3m_mult3 ===

   Number of wires:                 27
   Number of wire bits:           2346
   Number of public wires:          25
   Number of public wire bits:    2344
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 14
     $dff                            2
     $dffe                           3
     $mux                            1
     $or                             1
     $sdff                           1
     $sdffe                          2
     f3m_mult                        1
     f3m_mux3                        2
     func6                           1

=== f3m_mux3 ===

   Number of wires:                783
   Number of wire bits:           1555
   Number of public wires:           7
   Number of public wire bits:     779
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                970
     $and                          582
     $or                           388

=== design hierarchy ===

   f3m_mult3                         1
     f3m_mux3                        2

   Number of wires:               1593
   Number of wire bits:           5456
   Number of public wires:          39
   Number of public wire bits:    3902
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1952
     $and                         1164
     $dff                            2
     $dffe                           3
     $mux                            1
     $or                           777
     $sdff                           1
     $sdffe                          2
     f3m_mult                        1
     func6                           1

End of script. Logfile hash: b26faa756f, CPU: user 0.27s system 0.00s, MEM: 18.11 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 30% 4x opt_expr (0 sec), 19% 2x read_verilog (0 sec), ...
