
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v' to AST representation.
Generating RTLIL representation for module `\f36m_mult'.
Generating RTLIL representation for module `\f32m_add4'.
Generating RTLIL representation for module `\f32m_add'.
Generating RTLIL representation for module `\f32m_add3'.
Generating RTLIL representation for module `\f32m_neg'.
Generating RTLIL representation for module `\f32m_mult'.
Generating RTLIL representation for module `\f32m_mux6'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: f32m_mux6           
root of   0 design levels: f32m_mult           
root of   0 design levels: f32m_neg            
root of   1 design levels: f32m_add3           
root of   0 design levels: f32m_add            
root of   1 design levels: f32m_add4           
root of   2 design levels: f36m_mult           
Automatically selected f36m_mult as design top module.

2.2. Analyzing design hierarchy..
Top module:  \f36m_mult
Used module:     \f32m_add4
Used module:         \f32m_add
Used module:     \f32m_add3
Used module:     \f32m_neg
Used module:     \f32m_mult
Used module:     \f32m_mux6

2.3. Analyzing design hierarchy..
Top module:  \f36m_mult
Used module:     \f32m_add4
Used module:         \f32m_add
Used module:     \f32m_add3
Used module:     \f32m_neg
Used module:     \f32m_mult
Used module:     \f32m_mux6
Removed 0 unused modules.
Mapping positional arguments of cell f32m_add3.ins2 (f32m_add).
Mapping positional arguments of cell f32m_add3.ins1 (f32m_add).
Mapping positional arguments of cell f32m_add4.ins3 (f32m_add).
Mapping positional arguments of cell f32m_add4.ins2 (f32m_add).
Mapping positional arguments of cell f32m_add4.ins1 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins19 (f32m_add4).
Mapping positional arguments of cell f36m_mult.ins18 (f32m_add3).
Mapping positional arguments of cell f36m_mult.ins17 (f32m_add3).
Mapping positional arguments of cell f36m_mult.ins16 (f32m_add3).
Mapping positional arguments of cell f36m_mult.ins15 (f32m_neg).
Mapping positional arguments of cell f36m_mult.ins14 (f32m_neg).
Mapping positional arguments of cell f36m_mult.ins13 (f32m_neg).
Mapping positional arguments of cell f36m_mult.ins12 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins11 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins10 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins9 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins8 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins7 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins6 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins5 (f32m_add).
Mapping positional arguments of cell f36m_mult.ins3 (f32m_mult).
Mapping positional arguments of cell f36m_mult.ins2 (f32m_mux6).
Mapping positional arguments of cell f36m_mult.ins1 (f32m_mux6).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:171$9 in module f32m_mult.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:97$6 in module f36m_mult.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:88$5 in module f36m_mult.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:72$2 in module f36m_mult.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 5 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\f32m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:171$9'.
     1/2: $0\done[0:0]
     2/2: $0\c[387:0]
Creating decoders for process `\f32m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:168$8'.
Creating decoders for process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:104$7'.
Creating decoders for process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:97$6'.
     1/1: $0\mult_reset[0:0]
Creating decoders for process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:88$5'.
     1/2: $0\done[0:0]
     2/2: $0\c[1163:0]
Creating decoders for process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
     1/6: $0\x5[387:0]
     2/6: $0\x4[387:0]
     3/6: $0\x3[387:0]
     4/6: $0\x2[387:0]
     5/6: $0\x1[387:0]
     6/6: $0\x0[387:0]
Creating decoders for process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:72$2'.
     1/1: $0\K[6:0]
Creating decoders for process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:67$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\f32m_mult.\c' using process `\f32m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:171$9'.
  created $dff cell `$procdff$53' with positive edge clock.
Creating register for signal `\f32m_mult.\done' using process `\f32m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:171$9'.
  created $dff cell `$procdff$54' with positive edge clock.
Creating register for signal `\f32m_mult.\mult_reset' using process `\f32m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:168$8'.
  created $dff cell `$procdff$55' with positive edge clock.
Creating register for signal `\f36m_mult.\delay1' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:104$7'.
  created $dff cell `$procdff$56' with positive edge clock.
Creating register for signal `\f36m_mult.\delay2' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:104$7'.
  created $dff cell `$procdff$57' with positive edge clock.
Creating register for signal `\f36m_mult.\mult_reset' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:97$6'.
  created $dff cell `$procdff$58' with positive edge clock.
Creating register for signal `\f36m_mult.\c' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:88$5'.
  created $dff cell `$procdff$59' with positive edge clock.
Creating register for signal `\f36m_mult.\done' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:88$5'.
  created $dff cell `$procdff$60' with positive edge clock.
Creating register for signal `\f36m_mult.\x0' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
  created $dff cell `$procdff$61' with positive edge clock.
Creating register for signal `\f36m_mult.\x1' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
  created $dff cell `$procdff$62' with positive edge clock.
Creating register for signal `\f36m_mult.\x2' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
  created $dff cell `$procdff$63' with positive edge clock.
Creating register for signal `\f36m_mult.\x3' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
  created $dff cell `$procdff$64' with positive edge clock.
Creating register for signal `\f36m_mult.\x4' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
  created $dff cell `$procdff$65' with positive edge clock.
Creating register for signal `\f36m_mult.\x5' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
  created $dff cell `$procdff$66' with positive edge clock.
Creating register for signal `\f36m_mult.\K' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:72$2'.
  created $dff cell `$procdff$67' with positive edge clock.
Creating register for signal `\f36m_mult.\in0d' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:67$1'.
  created $dff cell `$procdff$68' with positive edge clock.
Creating register for signal `\f36m_mult.\in1d' using process `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:67$1'.
  created $dff cell `$procdff$69' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\f32m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:171$9'.
Removing empty process `f32m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:171$9'.
Removing empty process `f32m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:168$8'.
Removing empty process `f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:104$7'.
Found and cleaned up 2 empty switches in `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:97$6'.
Removing empty process `f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:97$6'.
Found and cleaned up 2 empty switches in `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:88$5'.
Removing empty process `f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:88$5'.
Found and cleaned up 6 empty switches in `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
Removing empty process `f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:78$4'.
Found and cleaned up 2 empty switches in `\f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:72$2'.
Removing empty process `f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:72$2'.
Removing empty process `f36m_mult.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/pairing_submodules/f36m_mult.v:67$1'.
Cleaned up 14 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module f32m_mux6.
Optimizing module f32m_mult.
Optimizing module f32m_neg.
Optimizing module f32m_add3.
Optimizing module f32m_add.
Optimizing module f32m_add4.
Optimizing module f36m_mult.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module f32m_mux6.
Optimizing module f32m_mult.
Optimizing module f32m_neg.
Optimizing module f32m_add3.
Optimizing module f32m_add.
Optimizing module f32m_add4.
Optimizing module f36m_mult.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f32m_mux6'.
Finding identical cells in module `\f32m_mult'.
Finding identical cells in module `\f32m_neg'.
Finding identical cells in module `\f32m_add3'.
Finding identical cells in module `\f32m_add'.
Finding identical cells in module `\f32m_add4'.
Finding identical cells in module `\f36m_mult'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f32m_mux6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \f32m_neg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_add3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_add4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f36m_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f32m_mux6.
  Optimizing cells in module \f32m_mult.
  Optimizing cells in module \f32m_neg.
  Optimizing cells in module \f32m_add3.
  Optimizing cells in module \f32m_add.
  Optimizing cells in module \f32m_add4.
  Optimizing cells in module \f36m_mult.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f32m_mux6'.
Finding identical cells in module `\f32m_mult'.
Finding identical cells in module `\f32m_neg'.
Finding identical cells in module `\f32m_add3'.
Finding identical cells in module `\f32m_add'.
Finding identical cells in module `\f32m_add4'.
Finding identical cells in module `\f36m_mult'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$53 ($dff) from module f32m_mult (D = { \c1 \c0 }, Q = \c).
Adding SRST signal on $procdff$54 ($dff) from module f32m_mult (D = $procmux$10_Y, Q = \done, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$75 ($sdff) from module f32m_mult (D = 1'1, Q = \done).
Adding SRST signal on $procdff$58 ($dff) from module f36m_mult (D = $procmux$21_Y, Q = \mult_reset, rval = 1'1).
Adding EN signal on $procdff$59 ($dff) from module f36m_mult (D = { \c2 \c1 \c0 }, Q = \c).
Adding SRST signal on $procdff$60 ($dff) from module f36m_mult (D = $procmux$26_Y, Q = \done, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$83 ($sdff) from module f36m_mult (D = 1'1, Q = \done).
Adding EN signal on $procdff$61 ($dff) from module f36m_mult (D = \o, Q = \x0).
Adding EN signal on $procdff$62 ($dff) from module f36m_mult (D = \o, Q = \x1).
Adding EN signal on $procdff$63 ($dff) from module f36m_mult (D = \o, Q = \x2).
Adding EN signal on $procdff$64 ($dff) from module f36m_mult (D = \o, Q = \x3).
Adding EN signal on $procdff$65 ($dff) from module f36m_mult (D = \o, Q = \x4).
Adding EN signal on $procdff$66 ($dff) from module f36m_mult (D = \o, Q = \x5).
Adding SRST signal on $procdff$67 ($dff) from module f36m_mult (D = $procmux$48_Y, Q = \K, rval = 7'1000000).
Adding EN signal on $auto$ff.cc:262:slice$91 ($sdff) from module f36m_mult (D = { 1'0 \K [6:1] }, Q = \K).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f32m_mux6..
Finding unused cells or wires in module \f32m_mult..
Finding unused cells or wires in module \f32m_neg..
Finding unused cells or wires in module \f32m_add3..
Finding unused cells or wires in module \f32m_add..
Finding unused cells or wires in module \f32m_add4..
Finding unused cells or wires in module \f36m_mult..
Removed 17 unused cells and 52 unused wires.
<suppressed ~19 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module f32m_add.
Optimizing module f32m_add3.
Optimizing module f32m_add4.
Optimizing module f32m_mult.
Optimizing module f32m_mux6.
Optimizing module f32m_neg.
Optimizing module f36m_mult.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \f32m_add..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_add3..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_add4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_mult..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_mux6..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f32m_neg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \f36m_mult..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \f32m_add.
  Optimizing cells in module \f32m_add3.
  Optimizing cells in module \f32m_add4.
  Optimizing cells in module \f32m_mult.
  Optimizing cells in module \f32m_mux6.
  Optimizing cells in module \f32m_neg.
  Optimizing cells in module \f36m_mult.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\f32m_add'.
Finding identical cells in module `\f32m_add3'.
Finding identical cells in module `\f32m_add4'.
Finding identical cells in module `\f32m_mult'.
Finding identical cells in module `\f32m_mux6'.
Finding identical cells in module `\f32m_neg'.
Finding identical cells in module `\f36m_mult'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \f32m_add..
Finding unused cells or wires in module \f32m_add3..
Finding unused cells or wires in module \f32m_add4..
Finding unused cells or wires in module \f32m_mult..
Finding unused cells or wires in module \f32m_mux6..
Finding unused cells or wires in module \f32m_neg..
Finding unused cells or wires in module \f36m_mult..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module f32m_add.
Optimizing module f32m_add3.
Optimizing module f32m_add4.
Optimizing module f32m_mult.
Optimizing module f32m_mux6.
Optimizing module f32m_neg.
Optimizing module f36m_mult.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== f32m_add ===

   Number of wires:                  3
   Number of wire bits:           1164
   Number of public wires:           3
   Number of public wire bits:    1164
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     f3m_add                         2

=== f32m_add3 ===

   Number of wires:                  5
   Number of wire bits:           1940
   Number of public wires:           5
   Number of public wire bits:    1940
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     f32m_add                        2

=== f32m_add4 ===

   Number of wires:                  7
   Number of wire bits:           2716
   Number of public wires:           7
   Number of public wire bits:    2716
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     f32m_add                        3

=== f32m_mult ===

   Number of wires:                 23
   Number of wire bits:           3500
   Number of public wires:          21
   Number of public wire bits:    3498
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $dff                            1
     $dffe                           1
     $not                            1
     $reduce_and                     1
     $sdffe                          1
     f3m_add                         3
     f3m_mult3                       1
     f3m_sub                         2
     func6                           1

=== f32m_mux6 ===

   Number of wires:                 13
   Number of wire bits:           2722
   Number of public wires:          13
   Number of public wire bits:    2722
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     f3m_mux6                        2

=== f32m_neg ===

   Number of wires:                  2
   Number of wire bits:            776
   Number of public wires:           2
   Number of public wire bits:     776
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     f3m_neg                         2

=== f36m_mult ===

   Number of wires:                 57
   Number of wire bits:          16710
   Number of public wires:          53
   Number of public wire bits:   16706
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 37
     $dff                            4
     $dffe                           7
     $mux                            1
     $not                            1
     $or                             1
     $reduce_and                     1
     $sdff                           1
     $sdffe                          2
     f32m_add                        8
     f32m_add3                       3
     f32m_add4                       1
     f32m_mult                       1
     f32m_mux6                       2
     f32m_neg                        3
     func6                           1

=== design hierarchy ===

   f36m_mult                         1
     f32m_add                        8
     f32m_add3                       3
       f32m_add                      2
     f32m_add4                       1
       f32m_add                      3
     f32m_mult                       1
     f32m_mux6                       2
     f32m_neg                        3

   Number of wires:                185
   Number of wire bits:          56306
   Number of public wires:         179
   Number of public wire bits:   56300
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     $dff                            5
     $dffe                           8
     $mux                            1
     $not                            2
     $or                             1
     $reduce_and                     2
     $sdff                           1
     $sdffe                          3
     f3m_add                        37
     f3m_mult3                       1
     f3m_mux6                        4
     f3m_neg                         6
     f3m_sub                         2
     func6                           2

End of script. Logfile hash: df7e4592dc, CPU: user 0.44s system 0.01s, MEM: 27.60 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 40% 2x opt_clean (0 sec), 22% 2x opt_dff (0 sec), ...
