
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v' to AST representation.
Generating RTLIL representation for module `\key_expander'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: key_expander        
Automatically selected key_expander as design top module.

2.2. Analyzing design hierarchy..
Top module:  \key_expander

2.3. Analyzing design hierarchy..
Top module:  \key_expander
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 20 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:93$36 in module key_expander.
Marked 20 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:80$5 in module key_expander.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 12 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
Creating decoders for process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:93$36'.
     1/20: $20\rc_inv[7:0]
     2/20: $19\rc_inv[7:0]
     3/20: $18\rc_inv[7:0]
     4/20: $17\rc_inv[7:0]
     5/20: $16\rc_inv[7:0]
     6/20: $15\rc_inv[7:0]
     7/20: $14\rc_inv[7:0]
     8/20: $13\rc_inv[7:0]
     9/20: $12\rc_inv[7:0]
    10/20: $11\rc_inv[7:0]
    11/20: $10\rc_inv[7:0]
    12/20: $9\rc_inv[7:0]
    13/20: $8\rc_inv[7:0]
    14/20: $7\rc_inv[7:0]
    15/20: $6\rc_inv[7:0]
    16/20: $5\rc_inv[7:0]
    17/20: $4\rc_inv[7:0]
    18/20: $3\rc_inv[7:0]
    19/20: $2\rc_inv[7:0]
    20/20: $1\rc_inv[7:0]
Creating decoders for process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:80$5'.
     1/20: $20\rc_dir[7:0]
     2/20: $19\rc_dir[7:0]
     3/20: $18\rc_dir[7:0]
     4/20: $17\rc_dir[7:0]
     5/20: $16\rc_dir[7:0]
     6/20: $15\rc_dir[7:0]
     7/20: $14\rc_dir[7:0]
     8/20: $13\rc_dir[7:0]
     9/20: $12\rc_dir[7:0]
    10/20: $11\rc_dir[7:0]
    11/20: $10\rc_dir[7:0]
    12/20: $9\rc_dir[7:0]
    13/20: $8\rc_dir[7:0]
    14/20: $7\rc_dir[7:0]
    15/20: $6\rc_dir[7:0]
    16/20: $5\rc_dir[7:0]
    17/20: $4\rc_dir[7:0]
    18/20: $3\rc_dir[7:0]
    19/20: $2\rc_dir[7:0]
    20/20: $1\rc_dir[7:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\key_expander.\key[0]' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
No latch inferred for signal `\key_expander.\key[1]' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
No latch inferred for signal `\key_expander.\key[2]' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
No latch inferred for signal `\key_expander.\key[3]' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
No latch inferred for signal `\key_expander.\rot_in[0]' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
No latch inferred for signal `\key_expander.\rot_in[1]' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
No latch inferred for signal `\key_expander.\rot_in[2]' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
No latch inferred for signal `\key_expander.\rot_in[3]' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
No latch inferred for signal `\key_expander.\rc_inv' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:93$36'.
No latch inferred for signal `\key_expander.\RC_INV.i' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:93$36'.
No latch inferred for signal `\key_expander.\rc_dir' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:80$5'.
No latch inferred for signal `\key_expander.\RC_DIR.i' from process `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:80$5'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:0$84'.
Found and cleaned up 20 empty switches in `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:93$36'.
Removing empty process `key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:93$36'.
Found and cleaned up 20 empty switches in `\key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:80$5'.
Removing empty process `key_expander.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/apbtoaes_submodules/key_expander.v:80$5'.
Cleaned up 40 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_expander.
<suppressed ~10 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_expander.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_expander'.
<suppressed ~192 debug messages>
Removed a total of 64 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_expander..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$271.
    dead port 2/2 on $mux $procmux$271.
    dead port 1/2 on $mux $procmux$106.
    dead port 2/2 on $mux $procmux$106.
    dead port 1/2 on $mux $procmux$268.
    dead port 2/2 on $mux $procmux$268.
    dead port 1/2 on $mux $procmux$265.
    dead port 2/2 on $mux $procmux$265.
    dead port 1/2 on $mux $procmux$262.
    dead port 2/2 on $mux $procmux$262.
    dead port 1/2 on $mux $procmux$103.
    dead port 2/2 on $mux $procmux$103.
    dead port 1/2 on $mux $procmux$259.
    dead port 2/2 on $mux $procmux$259.
    dead port 1/2 on $mux $procmux$256.
    dead port 2/2 on $mux $procmux$256.
    dead port 1/2 on $mux $procmux$253.
    dead port 2/2 on $mux $procmux$253.
    dead port 1/2 on $mux $procmux$250.
    dead port 2/2 on $mux $procmux$250.
    dead port 1/2 on $mux $procmux$247.
    dead port 2/2 on $mux $procmux$247.
    dead port 1/2 on $mux $procmux$244.
    dead port 2/2 on $mux $procmux$244.
    dead port 1/2 on $mux $procmux$97.
    dead port 1/2 on $mux $procmux$241.
    dead port 2/2 on $mux $procmux$241.
    dead port 1/2 on $mux $procmux$238.
    dead port 2/2 on $mux $procmux$238.
    dead port 1/2 on $mux $procmux$235.
    dead port 2/2 on $mux $procmux$235.
    dead port 1/2 on $mux $procmux$232.
    dead port 2/2 on $mux $procmux$232.
    dead port 1/2 on $mux $procmux$229.
    dead port 2/2 on $mux $procmux$229.
    dead port 1/2 on $mux $procmux$226.
    dead port 2/2 on $mux $procmux$226.
    dead port 1/2 on $mux $procmux$223.
    dead port 2/2 on $mux $procmux$223.
    dead port 1/2 on $mux $procmux$220.
    dead port 2/2 on $mux $procmux$220.
    dead port 1/2 on $mux $procmux$217.
    dead port 2/2 on $mux $procmux$217.
    dead port 1/2 on $mux $procmux$214.
    dead port 2/2 on $mux $procmux$214.
    dead port 1/2 on $mux $procmux$211.
    dead port 2/2 on $mux $procmux$211.
    dead port 1/2 on $mux $procmux$208.
    dead port 2/2 on $mux $procmux$208.
    dead port 1/2 on $mux $procmux$205.
    dead port 2/2 on $mux $procmux$205.
    dead port 1/2 on $mux $procmux$202.
    dead port 2/2 on $mux $procmux$202.
    dead port 1/2 on $mux $procmux$199.
    dead port 2/2 on $mux $procmux$199.
    dead port 1/2 on $mux $procmux$196.
    dead port 2/2 on $mux $procmux$196.
    dead port 1/2 on $mux $procmux$193.
    dead port 2/2 on $mux $procmux$193.
    dead port 1/2 on $mux $procmux$187.
    dead port 1/2 on $mux $procmux$181.
    dead port 2/2 on $mux $procmux$181.
    dead port 1/2 on $mux $procmux$178.
    dead port 2/2 on $mux $procmux$178.
    dead port 1/2 on $mux $procmux$175.
    dead port 2/2 on $mux $procmux$175.
    dead port 1/2 on $mux $procmux$172.
    dead port 2/2 on $mux $procmux$172.
    dead port 1/2 on $mux $procmux$169.
    dead port 2/2 on $mux $procmux$169.
    dead port 1/2 on $mux $procmux$166.
    dead port 2/2 on $mux $procmux$166.
    dead port 1/2 on $mux $procmux$163.
    dead port 2/2 on $mux $procmux$163.
    dead port 1/2 on $mux $procmux$160.
    dead port 2/2 on $mux $procmux$160.
    dead port 1/2 on $mux $procmux$157.
    dead port 2/2 on $mux $procmux$157.
    dead port 1/2 on $mux $procmux$154.
    dead port 2/2 on $mux $procmux$154.
    dead port 1/2 on $mux $procmux$151.
    dead port 2/2 on $mux $procmux$151.
    dead port 1/2 on $mux $procmux$148.
    dead port 2/2 on $mux $procmux$148.
    dead port 1/2 on $mux $procmux$145.
    dead port 2/2 on $mux $procmux$145.
    dead port 1/2 on $mux $procmux$142.
    dead port 2/2 on $mux $procmux$142.
    dead port 1/2 on $mux $procmux$139.
    dead port 2/2 on $mux $procmux$139.
    dead port 1/2 on $mux $procmux$136.
    dead port 2/2 on $mux $procmux$136.
    dead port 1/2 on $mux $procmux$133.
    dead port 2/2 on $mux $procmux$133.
    dead port 1/2 on $mux $procmux$130.
    dead port 2/2 on $mux $procmux$130.
    dead port 1/2 on $mux $procmux$127.
    dead port 2/2 on $mux $procmux$127.
    dead port 1/2 on $mux $procmux$124.
    dead port 2/2 on $mux $procmux$124.
    dead port 1/2 on $mux $procmux$121.
    dead port 2/2 on $mux $procmux$121.
    dead port 1/2 on $mux $procmux$118.
    dead port 2/2 on $mux $procmux$118.
    dead port 1/2 on $mux $procmux$115.
    dead port 2/2 on $mux $procmux$115.
    dead port 1/2 on $mux $procmux$112.
    dead port 2/2 on $mux $procmux$112.
    dead port 1/2 on $mux $procmux$109.
    dead port 2/2 on $mux $procmux$109.
Removed 110 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_expander.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_expander'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_expander..
Removed 0 unused cells and 244 unused wires.
<suppressed ~1 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_expander.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \key_expander..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \key_expander.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\key_expander'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \key_expander..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module key_expander.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== key_expander ===

   Number of wires:                 36
   Number of wire bits:            770
   Number of public wires:          21
   Number of public wire bits:     606
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 27
     $eq                            12
     $logic_not                      4
     $mux                          104
     $shl                            8
     $shr                           32
     $sub                           32
     $xor                          200

End of script. Logfile hash: d0e6a2a9ab, CPU: user 0.09s system 0.01s, MEM: 12.88 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 29% 4x opt_expr (0 sec), 29% 2x read_verilog (0 sec), ...
