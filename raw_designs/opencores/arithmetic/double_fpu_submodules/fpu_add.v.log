
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v' to AST representation.
Generating RTLIL representation for module `\fpu_add'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: fpu_add             
Automatically selected fpu_add as design top module.

2.2. Analyzing design hierarchy..
Top module:  \fpu_add

2.3. Analyzing design hierarchy..
Top module:  \fpu_add
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7 in module fpu_add.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
     1/23: $0\denorm_to_norm[0:0]
     2/23: $0\exponent[10:0]
     3/23: $0\sum[55:0]
     4/23: $0\small_shift_3[55:0]
     5/23: $0\small_shift[55:0]
     6/23: $0\small_add[55:0]
     7/23: $0\large_add[55:0]
     8/23: $0\exponent_diff[10:0]
     9/23: $0\large_norm_small_denorm[0:0]
    10/23: $0\large_is_denorm[0:0]
    11/23: $0\small_is_denorm[0:0]
    12/23: $0\mantissa_large[51:0]
    13/23: $0\mantissa_small[51:0]
    14/23: $0\exponent_large[10:0]
    15/23: $0\exponent_small[10:0]
    16/23: $0\expa_gt_expb[0:0]
    17/23: $0\mantissa_b[51:0]
    18/23: $0\mantissa_a[51:0]
    19/23: $0\exponent_b[10:0]
    20/23: $0\exponent_a[10:0]
    21/23: $0\exponent_2[10:0]
    22/23: $0\sum_2[55:0]
    23/23: $0\sign[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fpu_add.\sign' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$150' with positive edge clock.
Creating register for signal `\fpu_add.\sum_2' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$151' with positive edge clock.
Creating register for signal `\fpu_add.\exponent_2' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$152' with positive edge clock.
Creating register for signal `\fpu_add.\exponent_a' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$153' with positive edge clock.
Creating register for signal `\fpu_add.\exponent_b' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$154' with positive edge clock.
Creating register for signal `\fpu_add.\mantissa_a' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$155' with positive edge clock.
Creating register for signal `\fpu_add.\mantissa_b' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$156' with positive edge clock.
Creating register for signal `\fpu_add.\expa_gt_expb' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$157' with positive edge clock.
Creating register for signal `\fpu_add.\exponent_small' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$158' with positive edge clock.
Creating register for signal `\fpu_add.\exponent_large' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$159' with positive edge clock.
Creating register for signal `\fpu_add.\mantissa_small' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$160' with positive edge clock.
Creating register for signal `\fpu_add.\mantissa_large' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$161' with positive edge clock.
Creating register for signal `\fpu_add.\small_is_denorm' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$162' with positive edge clock.
Creating register for signal `\fpu_add.\large_is_denorm' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$163' with positive edge clock.
Creating register for signal `\fpu_add.\large_norm_small_denorm' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$164' with positive edge clock.
Creating register for signal `\fpu_add.\exponent_diff' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$165' with positive edge clock.
Creating register for signal `\fpu_add.\large_add' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$166' with positive edge clock.
Creating register for signal `\fpu_add.\small_add' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$167' with positive edge clock.
Creating register for signal `\fpu_add.\small_shift' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$168' with positive edge clock.
Creating register for signal `\fpu_add.\small_shift_3' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$169' with positive edge clock.
Creating register for signal `\fpu_add.\sum' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$170' with positive edge clock.
Creating register for signal `\fpu_add.\exponent' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$171' with positive edge clock.
Creating register for signal `\fpu_add.\denorm_to_norm' using process `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
  created $dff cell `$procdff$172' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
Removing empty process `fpu_add.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:41$7'.
Cleaned up 2 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_add.
<suppressed ~1 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_add.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_add'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:88$27: \sum -> { 1'0 \sum [54:0] }
      Replacing known input bits on port B of cell $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:88$27: $shr$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:88$26_Y -> { $shr$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:88$26_Y [55] 1'1 $shr$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:88$26_Y [53:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_add.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_add'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$170 ($dff) from module fpu_add (D = $procmux$45_Y, Q = \sum, rval = 56'00000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$173 ($sdff) from module fpu_add (D = $add$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:87$25_Y, Q = \sum).
Adding SRST signal on $procdff$171 ($dff) from module fpu_add (D = $procmux$40_Y, Q = \exponent, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:262:slice$175 ($sdff) from module fpu_add (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:89$30_Y [10:0], Q = \exponent).
Adding SRST signal on $procdff$172 ($dff) from module fpu_add (D = $procmux$35_Y, Q = \denorm_to_norm, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$177 ($sdff) from module fpu_add (D = $and$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:90$31_Y, Q = \denorm_to_norm).
Adding SRST signal on $procdff$150 ($dff) from module fpu_add (D = $procmux$145_Y, Q = \sign, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$179 ($sdff) from module fpu_add (D = \opa [63], Q = \sign).
Adding SRST signal on $procdff$151 ($dff) from module fpu_add (D = $procmux$140_Y, Q = \sum_2, rval = 56'00000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$181 ($sdff) from module fpu_add (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:88$27_Y, Q = \sum_2).
Adding SRST signal on $procdff$152 ($dff) from module fpu_add (D = $procmux$135_Y, Q = \exponent_2, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:262:slice$183 ($sdff) from module fpu_add (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:91$34_Y [10:0], Q = \exponent_2).
Adding SRST signal on $procdff$153 ($dff) from module fpu_add (D = $procmux$130_Y, Q = \exponent_a, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:262:slice$185 ($sdff) from module fpu_add (D = \opa [62:52], Q = \exponent_a).
Adding SRST signal on $procdff$154 ($dff) from module fpu_add (D = $procmux$125_Y, Q = \exponent_b, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:262:slice$187 ($sdff) from module fpu_add (D = \opb [62:52], Q = \exponent_b).
Adding SRST signal on $procdff$155 ($dff) from module fpu_add (D = $procmux$120_Y, Q = \mantissa_a, rval = 52'0000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$189 ($sdff) from module fpu_add (D = \opa [51:0], Q = \mantissa_a).
Adding SRST signal on $procdff$156 ($dff) from module fpu_add (D = $procmux$115_Y, Q = \mantissa_b, rval = 52'0000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$191 ($sdff) from module fpu_add (D = \opb [51:0], Q = \mantissa_b).
Adding SRST signal on $procdff$157 ($dff) from module fpu_add (D = $procmux$110_Y, Q = \expa_gt_expb, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$193 ($sdff) from module fpu_add (D = $gt$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:74$8_Y, Q = \expa_gt_expb).
Adding SRST signal on $procdff$158 ($dff) from module fpu_add (D = $procmux$105_Y, Q = \exponent_small, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:262:slice$195 ($sdff) from module fpu_add (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:75$9_Y, Q = \exponent_small).
Adding SRST signal on $procdff$159 ($dff) from module fpu_add (D = $procmux$100_Y, Q = \exponent_large, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:262:slice$197 ($sdff) from module fpu_add (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:76$10_Y, Q = \exponent_large).
Adding SRST signal on $procdff$160 ($dff) from module fpu_add (D = $procmux$95_Y, Q = \mantissa_small, rval = 52'0000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$199 ($sdff) from module fpu_add (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:77$11_Y, Q = \mantissa_small).
Adding SRST signal on $procdff$161 ($dff) from module fpu_add (D = $procmux$90_Y, Q = \mantissa_large, rval = 52'0000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$201 ($sdff) from module fpu_add (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:78$12_Y, Q = \mantissa_large).
Adding SRST signal on $procdff$162 ($dff) from module fpu_add (D = $procmux$85_Y, Q = \small_is_denorm, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$203 ($sdff) from module fpu_add (D = $logic_not$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:79$14_Y, Q = \small_is_denorm).
Adding SRST signal on $procdff$163 ($dff) from module fpu_add (D = $procmux$80_Y, Q = \large_is_denorm, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$205 ($sdff) from module fpu_add (D = $logic_not$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:80$16_Y, Q = \large_is_denorm).
Adding SRST signal on $procdff$164 ($dff) from module fpu_add (D = $procmux$75_Y, Q = \large_norm_small_denorm, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$207 ($sdff) from module fpu_add (D = $logic_and$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:81$18_Y, Q = \large_norm_small_denorm).
Adding SRST signal on $procdff$165 ($dff) from module fpu_add (D = $procmux$70_Y, Q = \exponent_diff, rval = 11'00000000000).
Adding EN signal on $auto$ff.cc:262:slice$209 ($sdff) from module fpu_add (D = $sub$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:82$20_Y, Q = \exponent_diff).
Adding SRST signal on $procdff$166 ($dff) from module fpu_add (D = $procmux$65_Y, Q = \large_add, rval = 56'00000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$211 ($sdff) from module fpu_add (D = { 1'0 $logic_not$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:83$21_Y \mantissa_large 2'00 }, Q = \large_add).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$212 ($sdffe) from module fpu_add.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$212 ($sdffe) from module fpu_add.
Setting constant 0-bit at position 55 on $auto$ff.cc:262:slice$212 ($sdffe) from module fpu_add.
Adding SRST signal on $procdff$167 ($dff) from module fpu_add (D = $procmux$60_Y, Q = \small_add, rval = 56'00000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$214 ($sdff) from module fpu_add (D = { 1'0 $logic_not$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:84$22_Y \mantissa_small 2'00 }, Q = \small_add).
Setting constant 0-bit at position 0 on $auto$ff.cc:262:slice$215 ($sdffe) from module fpu_add.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$215 ($sdffe) from module fpu_add.
Setting constant 0-bit at position 55 on $auto$ff.cc:262:slice$215 ($sdffe) from module fpu_add.
Adding SRST signal on $procdff$168 ($dff) from module fpu_add (D = $procmux$55_Y, Q = \small_shift, rval = 56'00000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$217 ($sdff) from module fpu_add (D = $shr$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:85$23_Y, Q = \small_shift).
Adding SRST signal on $procdff$169 ($dff) from module fpu_add (D = $procmux$50_Y, Q = \small_shift_3, rval = 56'00000000000000000000000000000000000000000000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$219 ($sdff) from module fpu_add (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_add.v:86$24_Y, Q = \small_shift_3).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_add..
Removed 46 unused cells and 123 unused wires.
<suppressed ~49 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_add.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_add.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_add'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_add..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_add.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== fpu_add ===

   Number of wires:                 59
   Number of wire bits:           1330
   Number of public wires:          34
   Number of public wire bits:     819
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 51
     $add                          120
     $and                            2
     $gt                            75
     $logic_and                      1
     $logic_not                      5
     $mux                          302
     $or                             1
     $reduce_or                    108
     $sdffe                        621
     $shr                           56
     $sub                           22

End of script. Logfile hash: 2507550e73, CPU: user 0.11s system 0.00s, MEM: 13.53 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 25% 4x opt_expr (0 sec), 22% 2x opt_dff (0 sec), ...
