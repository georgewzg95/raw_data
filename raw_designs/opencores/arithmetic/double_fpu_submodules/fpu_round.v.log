
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v' to AST representation.
Generating RTLIL representation for module `\fpu_round'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: fpu_round           
Automatically selected fpu_round as design top module.

2.2. Analyzing design hierarchy..
Top module:  \fpu_round

2.3. Analyzing design hierarchy..
Top module:  \fpu_round
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16 in module fpu_round.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
     1/6: $0\round_out[63:0]
     2/6: $0\exponent_final[11:0]
     3/6: $0\sum_final[55:0]
     4/6: $0\exponent_round[11:0]
     5/6: $0\sum_round_2[55:0]
     6/6: $0\sum_round[55:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\fpu_round.\round_out' using process `\fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
  created $dff cell `$procdff$43' with positive edge clock.
Creating register for signal `\fpu_round.\exponent_final' using process `\fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
  created $dff cell `$procdff$44' with positive edge clock.
Creating register for signal `\fpu_round.\sum_round' using process `\fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
  created $dff cell `$procdff$45' with positive edge clock.
Creating register for signal `\fpu_round.\sum_round_2' using process `\fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
  created $dff cell `$procdff$46' with positive edge clock.
Creating register for signal `\fpu_round.\exponent_round' using process `\fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
  created $dff cell `$procdff$47' with positive edge clock.
Creating register for signal `\fpu_round.\sum_final' using process `\fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
  created $dff cell `$procdff$48' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
Removing empty process `fpu_round.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:37$16'.
Cleaned up 1 empty switch.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_round.
<suppressed ~2 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_round.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_round'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_round..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:49$19: \sum_round -> { 1'0 \sum_round [54:0] }
      Replacing known input bits on port B of cell $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:49$19: $shr$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:49$18_Y -> { $shr$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:49$18_Y [55] 1'1 $shr$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:49$18_Y [53:0] }
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_round.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_round'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$47 ($dff) from module fpu_round (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:50$22_Y [11:0], Q = \exponent_round, rval = 12'000000000000).
Adding SRST signal on $procdff$48 ($dff) from module fpu_round (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:51$23_Y, Q = \sum_final, rval = 56'00000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$43 ($dff) from module fpu_round (D = { \sign_term \exponent_final [10:0] \sum_final [53:2] }, Q = \round_out, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$44 ($dff) from module fpu_round (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:52$24_Y, Q = \exponent_final, rval = 12'000000000000).
Adding SRST signal on $procdff$45 ($dff) from module fpu_round (D = $add$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:48$17_Y, Q = \sum_round, rval = 56'00000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$46 ($dff) from module fpu_round (D = $ternary$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/double_fpu_submodules/fpu_round.v:49$19_Y, Q = \sum_round_2, rval = 56'00000000000000000000000000000000000000000000000000000000).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_round..
Removed 7 unused cells and 30 unused wires.
<suppressed ~10 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_round.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \fpu_round..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \fpu_round.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\fpu_round'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \fpu_round..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module fpu_round.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== fpu_round ===

   Number of wires:                 34
   Number of wire bits:            644
   Number of public wires:          22
   Number of public wire bits:     394
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 25
     $add                           88
     $and                            6
     $eq                             4
     $logic_not                      3
     $mux                          156
     $or                             2
     $reduce_or                      2
     $sdff                         256

End of script. Logfile hash: 464f2a01bc, CPU: user 0.06s system 0.00s, MEM: 11.89 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 4x opt_expr (0 sec), 19% 2x opt_clean (0 sec), ...
