
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v' to AST representation.
Generating RTLIL representation for module `\gng_ctg'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: gng_ctg             
Automatically selected gng_ctg as design top module.

2.2. Analyzing design hierarchy..
Top module:  \gng_ctg

2.3. Analyzing design hierarchy..
Top module:  \gng_ctg
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:50$8 in module gng_ctg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:43$6 in module gng_ctg.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:28$4 in module gng_ctg.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:50$8'.
     1/1: $0\data_out[63:0]
Creating decoders for process `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:43$6'.
     1/1: $0\valid_out[0:0]
Creating decoders for process `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:28$4'.
     1/3: $0\z3[63:0]
     2/3: $0\z2[63:0]
     3/3: $0\z1[63:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\gng_ctg.\data_out' using process `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:50$8'.
  created $dff cell `$procdff$33' with positive edge clock.
Creating register for signal `\gng_ctg.\valid_out' using process `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:43$6'.
  created $dff cell `$procdff$34' with positive edge clock.
Creating register for signal `\gng_ctg.\z1' using process `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:28$4'.
  created $dff cell `$procdff$35' with positive edge clock.
Creating register for signal `\gng_ctg.\z2' using process `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:28$4'.
  created $dff cell `$procdff$36' with positive edge clock.
Creating register for signal `\gng_ctg.\z3' using process `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:28$4'.
  created $dff cell `$procdff$37' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:50$8'.
Removing empty process `gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:50$8'.
Found and cleaned up 1 empty switch in `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:43$6'.
Removing empty process `gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:43$6'.
Found and cleaned up 2 empty switches in `\gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:28$4'.
Removing empty process `gng_ctg.$proc$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:28$4'.
Cleaned up 4 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module gng_ctg.
<suppressed ~5 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module gng_ctg.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gng_ctg'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gng_ctg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gng_ctg.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gng_ctg'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$36 ($dff) from module gng_ctg (D = $procmux$23_Y, Q = \z2, rval = 64'1111111111111100101111111111111111011000000000000000011010000000).
Adding EN signal on $auto$ff.cc:262:slice$38 ($sdff) from module gng_ctg (D = { \z2 [50:6] $xor$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:25$2_Y }, Q = \z2).
Adding SRST signal on $procdff$37 ($dff) from module gng_ctg (D = $procmux$18_Y, Q = \z3, rval = 64'1111111111011010001101010000000000000000111111101001010111111111).
Adding EN signal on $auto$ff.cc:262:slice$40 ($sdff) from module gng_ctg (D = { \z3 [56:9] $xor$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:26$3_Y }, Q = \z3).
Adding SRST signal on $procdff$33 ($dff) from module gng_ctg (D = $xor$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:54$11_Y, Q = \data_out, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$34 ($dff) from module gng_ctg (D = \ce, Q = \valid_out, rval = 1'0).
Adding SRST signal on $procdff$35 ($dff) from module gng_ctg (D = $procmux$28_Y, Q = \z1, rval = 64'0100010111010000000000001111111111111111111100000000010111111111).
Adding EN signal on $auto$ff.cc:262:slice$44 ($sdff) from module gng_ctg (D = { \z1 [39:1] $xor$/home/zhigang/raw_data/raw_designs/opencores/arithmetic/gng_submodules/gng_ctg.v:24$1_Y }, Q = \z1).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gng_ctg..
Removed 9 unused cells and 27 unused wires.
<suppressed ~10 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module gng_ctg.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \gng_ctg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \gng_ctg.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\gng_ctg'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \gng_ctg..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module gng_ctg.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== gng_ctg ===

   Number of wires:                 13
   Number of wire bits:            580
   Number of public wires:          11
   Number of public wire bits:     452
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $sdff                          65
     $sdffe                        192
     $xor                          188

End of script. Logfile hash: adfc458e00, CPU: user 0.04s system 0.01s, MEM: 11.86 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 4x opt_expr (0 sec), 24% 2x opt_dff (0 sec), ...
