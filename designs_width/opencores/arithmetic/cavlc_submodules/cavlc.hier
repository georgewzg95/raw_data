
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v' to AST representation.
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\cavlc_fsm'.
Generating RTLIL representation for module `\cavlc_len_gen'.
Generating RTLIL representation for module `\cavlc_read_levels'.
Generating RTLIL representation for module `\cavlc_read_run_befores'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v:839.1-925.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\cavlc_read_total_coeffs'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v:1182.1-1473.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v:1478.1-1777.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v:1782.1-2081.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v:2086.1-2097.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v:2102.1-2176.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\cavlc_read_total_zeros'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v:2381.1-2548.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/arithmetic//cavlc.v:2553.1-2916.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Generating RTLIL representation for module `\cavlc_top'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: cavlc_top           
root of   0 design levels: cavlc_read_total_zeros
root of   0 design levels: cavlc_read_total_coeffs
root of   0 design levels: cavlc_read_run_befores
root of   0 design levels: cavlc_read_levels   
root of   0 design levels: cavlc_len_gen       
root of   0 design levels: cavlc_fsm           
Automatically selected cavlc_top as design top module.

2.2. Analyzing design hierarchy..
Top module:  \cavlc_top
Used module:     \cavlc_fsm
Used module:     \cavlc_len_gen
Used module:     \cavlc_read_run_befores
Used module:     \cavlc_read_total_zeros
Used module:     \cavlc_read_levels
Used module:     \cavlc_read_total_coeffs

2.3. Analyzing design hierarchy..
Top module:  \cavlc_top
Used module:     \cavlc_fsm
Used module:     \cavlc_len_gen
Used module:     \cavlc_read_run_befores
Used module:     \cavlc_read_total_zeros
Used module:     \cavlc_read_levels
Used module:     \cavlc_read_total_coeffs
Removed 0 unused modules.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: f15beff921, CPU: user 0.10s system 0.01s, MEM: 22.53 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 99% 2x read_verilog (0 sec), 0% 1x hierarchy (0 sec)
