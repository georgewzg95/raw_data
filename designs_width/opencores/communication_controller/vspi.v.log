
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v' to AST representation.
Generating RTLIL representation for module `\spiifc'.
Generating RTLIL representation for module `\spiloop'.
Generating RTLIL representation for module `\spiwrap'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: spiwrap             
root of   1 design levels: spiloop             
root of   0 design levels: spiifc              
Automatically selected spiwrap as design top module.

2.2. Analyzing design hierarchy..
Top module:  \spiwrap
Used module:     \spiifc

2.3. Analyzing design hierarchy..
Top module:  \spiwrap
Used module:     \spiifc
Removing unused module `\spiloop'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:384$64 in module spiwrap.
Marked 7 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24 in module spiifc.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:146$19 in module spiifc.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 7 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:0$53'.
  Set init value: \ssSlowToggle = 1'0

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\spiwrap.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:384$64'.
     1/3: $0\initMemData[31:0]
     2/3: $0\initMemAddr[9:0]
     3/3: $0\initMem[0:0]
Creating decoders for process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:0$53'.
Creating decoders for process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
     1/18: $2$lookahead\rcByteReg$23[7:0]$34
     2/18: $2$bitselwrite$data$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:184$2[7:0]$33
     3/18: $2$bitselwrite$mask$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:184$1[7:0]$32
     4/18: $0\ssTurnOnHandled[0:0]
     5/18: $1$lookahead\rcByteReg$23[7:0]$30
     6/18: $1$bitselwrite$data$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:184$2[7:0]$29
     7/18: $1$bitselwrite$mask$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:184$1[7:0]$28
     8/18: $0\txBitAddr[2:0]
     9/18: $0\txMemAddrReg[11:0]
    10/18: $0\stateReg[7:0]
    11/18: $0\cmd[7:0]
    12/18: $0\rcMemWEReg[0:0]
    13/18: $0\rcMemDataReg[7:0]
    14/18: $0\rcMemAddrNext[11:0]
    15/18: $0\rcMemAddrReg[11:0]
    16/18: $0\rcBitIndexReg[2:0]
    17/18: $0\rcStarted[0:0]
    18/18: $0\debug_reg[7:0]
Creating decoders for process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:146$19'.
     1/2: $0\ssTurnOnReg[0:0]
     2/2: $0\ssFastToggleReg[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\spiwrap.\initMem' using process `\spiwrap.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:384$64'.
  created $dff cell `$procdff$269' with positive edge clock.
Creating register for signal `\spiwrap.\initMemAddr' using process `\spiwrap.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:384$64'.
  created $dff cell `$procdff$270' with positive edge clock.
Creating register for signal `\spiwrap.\initMemData' using process `\spiwrap.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:384$64'.
  created $dff cell `$procdff$271' with positive edge clock.
Creating register for signal `\spiifc.\debug_reg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$272' with positive edge clock.
Creating register for signal `\spiifc.\rcByteReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$273' with positive edge clock.
Creating register for signal `\spiifc.\rcStarted' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$274' with positive edge clock.
Creating register for signal `\spiifc.\rcBitIndexReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$275' with positive edge clock.
Creating register for signal `\spiifc.\rcMemAddrReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$276' with positive edge clock.
Creating register for signal `\spiifc.\rcMemAddrNext' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$277' with positive edge clock.
Creating register for signal `\spiifc.\rcMemDataReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$278' with positive edge clock.
Creating register for signal `\spiifc.\rcMemWEReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `\spiifc.\ssSlowToggle' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$280' with positive edge clock.
Creating register for signal `\spiifc.\ssTurnOnHandled' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$281' with positive edge clock.
Creating register for signal `\spiifc.\cmd' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$282' with positive edge clock.
Creating register for signal `\spiifc.\stateReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$283' with positive edge clock.
Creating register for signal `\spiifc.\txMemAddrReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$284' with positive edge clock.
Creating register for signal `\spiifc.\txBitAddr' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$285' with positive edge clock.
Creating register for signal `\spiifc.$bitselwrite$mask$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:184$1' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$286' with positive edge clock.
Creating register for signal `\spiifc.$bitselwrite$data$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:184$2' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$287' with positive edge clock.
Creating register for signal `\spiifc.$lookahead\rcByteReg$23' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
  created $dff cell `$procdff$288' with positive edge clock.
Creating register for signal `\spiifc.\ssPrev' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:146$19'.
  created $dff cell `$procdff$289' with positive edge clock.
Creating register for signal `\spiifc.\ssFastToggleReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:146$19'.
  created $dff cell `$procdff$290' with positive edge clock.
Creating register for signal `\spiifc.\ssTurnOnReg' using process `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:146$19'.
  created $dff cell `$procdff$291' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\spiwrap.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:384$64'.
Removing empty process `spiwrap.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:384$64'.
Removing empty process `spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:0$53'.
Found and cleaned up 11 empty switches in `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
Removing empty process `spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:165$24'.
Found and cleaned up 3 empty switches in `\spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:146$19'.
Removing empty process `spiifc.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:146$19'.
Cleaned up 17 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module spiwrap.
<suppressed ~1 debug messages>
Optimizing module spiifc.
<suppressed ~12 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module spiwrap.
Optimizing module spiifc.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spiwrap'.
Finding identical cells in module `\spiifc'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spiwrap..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$78: \initMem -> 1'0
      Replacing known input bits on port A of cell $procmux$76: \initMem -> 1'1
  Analyzing evaluation results.
Running muxtree optimizer on module \spiifc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$111.
    dead port 2/2 on $mux $procmux$111.
    dead port 1/2 on $mux $procmux$108.
    dead port 2/2 on $mux $procmux$108.
    dead port 1/2 on $mux $procmux$99.
    dead port 2/2 on $mux $procmux$99.
    dead port 1/2 on $mux $procmux$96.
    dead port 2/2 on $mux $procmux$96.
    dead port 1/2 on $mux $procmux$93.
    dead port 2/2 on $mux $procmux$93.
    dead port 1/2 on $mux $procmux$90.
    dead port 2/2 on $mux $procmux$90.
    dead port 1/2 on $mux $procmux$87.
Removed 13 multiplexer ports.
<suppressed ~25 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spiwrap.
  Optimizing cells in module \spiifc.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spiwrap'.
Finding identical cells in module `\spiifc'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$271 ($dff) from module spiwrap (D = 1517078181, Q = \initMemData).
Setting constant 1-bit at position 0 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 1 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 2 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 3 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 4 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 5 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 6 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 7 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 8 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 9 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 10 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 11 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 12 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 13 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 14 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 15 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 16 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 17 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 18 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 19 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 20 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 21 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 22 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 23 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 24 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 25 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 26 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 27 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 28 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 29 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 1-bit at position 30 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Setting constant 0-bit at position 31 on $auto$ff.cc:262:slice$292 ($dffe) from module spiwrap.
Adding SRST signal on $procdff$269 ($dff) from module spiwrap (D = $procmux$78_Y, Q = \initMem, rval = 1'1).
Adding SRST signal on $procdff$270 ($dff) from module spiwrap (D = $procmux$71_Y, Q = \initMemAddr, rval = 10'0000000000).
Adding EN signal on $auto$ff.cc:262:slice$294 ($sdff) from module spiwrap (D = $add$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:397$67_Y, Q = \initMemAddr).
Adding SRST signal on $procdff$291 ($dff) from module spiifc (D = $procmux$258_Y, Q = \ssTurnOnReg, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$296 ($sdff) from module spiifc (D = $procmux$258_Y, Q = \ssTurnOnReg).
Adding EN signal on $procdff$284 ($dff) from module spiifc (D = $procmux$159_Y, Q = \txMemAddrReg).
Adding EN signal on $procdff$285 ($dff) from module spiifc (D = $procmux$135_Y, Q = \txBitAddr).
Setting constant 1-bit at position 0 on $procdff$288 ($dff) from module spiifc.
Setting constant 1-bit at position 1 on $procdff$288 ($dff) from module spiifc.
Setting constant 1-bit at position 2 on $procdff$288 ($dff) from module spiifc.
Setting constant 1-bit at position 3 on $procdff$288 ($dff) from module spiifc.
Setting constant 1-bit at position 4 on $procdff$288 ($dff) from module spiifc.
Setting constant 1-bit at position 5 on $procdff$288 ($dff) from module spiifc.
Setting constant 1-bit at position 6 on $procdff$288 ($dff) from module spiifc.
Setting constant 1-bit at position 7 on $procdff$288 ($dff) from module spiifc.
Adding SRST signal on $procdff$290 ($dff) from module spiifc (D = $procmux$264_Y, Q = \ssFastToggleReg, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$302 ($sdff) from module spiifc (D = $not$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:156$22_Y, Q = \ssFastToggleReg).
Adding EN signal on $procdff$277 ($dff) from module spiifc (D = $procmux$227_Y, Q = \rcMemAddrNext).
Adding EN signal on $procdff$278 ($dff) from module spiifc (D = { \rcByteReg [7:1] \SPI_MOSI }, Q = \rcMemDataReg).
Adding EN signal on $procdff$279 ($dff) from module spiifc (D = $procmux$202_Y, Q = \rcMemWEReg).
Adding SRST signal on $auto$ff.cc:262:slice$320 ($dffe) from module spiifc (D = $procmux$200_Y, Q = \rcMemWEReg, rval = 1'0).
Adding SRST signal on $procdff$281 ($dff) from module spiifc (D = $xor$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:139$17_Y, Q = \ssTurnOnHandled, rval = 1'0).
Adding EN signal on $procdff$282 ($dff) from module spiifc (D = { \rcByteReg [7:1] \SPI_MOSI }, Q = \cmd).
Adding EN signal on $procdff$283 ($dff) from module spiifc (D = $procmux$181_Y, Q = \stateReg).
Adding SRST signal on $procdff$272 ($dff) from module spiifc (D = $procmux$250_Y, Q = \debug_reg, rval = 8'11111111).
Adding EN signal on $auto$ff.cc:262:slice$337 ($sdff) from module spiifc (D = { \rcByteReg [7:1] \SPI_MOSI }, Q = \debug_reg).
Adding SRST signal on $procdff$273 ($dff) from module spiifc (D = $2$lookahead\rcByteReg$23[7:0]$34, Q = \rcByteReg, rval = 8'00000000).
Adding SRST signal on $procdff$274 ($dff) from module spiifc (D = $procmux$244_Y, Q = \rcStarted, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$340 ($sdff) from module spiifc (D = 1'1, Q = \rcStarted).
Adding SRST signal on $procdff$275 ($dff) from module spiifc (D = $procmux$238_Y, Q = \rcBitIndexReg, rval = 3'111).
Adding EN signal on $auto$ff.cc:262:slice$342 ($sdff) from module spiifc (D = $sub$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:185$41_Y, Q = \rcBitIndexReg).
Adding EN signal on $procdff$276 ($dff) from module spiifc (D = \rcMemAddrNext, Q = \rcMemAddrReg).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spiwrap..
Finding unused cells or wires in module \spiifc..
Removed 38 unused cells and 163 unused wires.
<suppressed ~44 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module spiifc.
<suppressed ~1 debug messages>
Optimizing module spiwrap.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spiifc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spiwrap..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~14 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spiifc.
  Optimizing cells in module \spiwrap.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spiifc'.
<suppressed ~6 debug messages>
Finding identical cells in module `\spiwrap'.
Removed a total of 2 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$339 ($sdff) from module spiifc (D = $or$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/vspi.v:0$40_Y, Q = \rcByteReg).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spiifc..
Finding unused cells or wires in module \spiwrap..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module spiifc.
Optimizing module spiwrap.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \spiifc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \spiwrap..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \spiifc.
  Optimizing cells in module \spiwrap.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\spiifc'.
Finding identical cells in module `\spiwrap'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \spiifc..
Finding unused cells or wires in module \spiwrap..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module spiifc.
Optimizing module spiwrap.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== spiifc ===

   Number of wires:                 97
   Number of wire bits:            601
   Number of public wires:          34
   Number of public wire bits:     158
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 83
     $add                            2
     $and                            2
     $dff                            2
     $dffe                           6
     $eq                             7
     $logic_and                      3
     $logic_not                      2
     $mux                           34
     $ne                             3
     $not                            5
     $or                             1
     $reduce_and                     3
     $reduce_bool                    1
     $sdffce                         1
     $sdffe                          5
     $shiftx                         1
     $shl                            2
     $sub                            2
     $xor                            1

=== spiwrap ===

   Number of wires:                 23
   Number of wire bits:            191
   Number of public wires:          19
   Number of public wire bits:     178
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $add                            1
     $eq                             1
     $mux                            2
     $sdff                           1
     $sdffe                          1
     buffermem                       2
     spiifc                          1

=== design hierarchy ===

   spiwrap                           1
     spiifc                          1

   Number of wires:                120
   Number of wire bits:            792
   Number of public wires:          53
   Number of public wire bits:     336
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 91
     $add                            3
     $and                            2
     $dff                            2
     $dffe                           6
     $eq                             8
     $logic_and                      3
     $logic_not                      2
     $mux                           36
     $ne                             3
     $not                            5
     $or                             1
     $reduce_and                     3
     $reduce_bool                    1
     $sdff                           1
     $sdffce                         1
     $sdffe                          6
     $shiftx                         1
     $shl                            2
     $sub                            2
     $xor                            1
     buffermem                       2

End of script. Logfile hash: a1cebc084e, CPU: user 0.12s system 0.00s, MEM: 12.31 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 32% 5x opt_expr (0 sec), 16% 2x read_verilog (0 sec), ...
