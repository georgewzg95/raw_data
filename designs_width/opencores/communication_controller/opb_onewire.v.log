
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v' to AST representation.
Generating RTLIL representation for module `\user_logic'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:248.3-262.8 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: user_logic          
Automatically selected user_logic as design top module.

2.2. Analyzing design hierarchy..
Top module:  \user_logic

2.3. Analyzing design hierarchy..
Top module:  \user_logic
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 29 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79 in module user_logic.
Marked 12 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45 in module user_logic.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:264$39 in module user_logic.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:248$38 in module user_logic.
Marked 21 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17 in module user_logic.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 36 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:273$135'.
  Set init value: \primary_clock_div_by_two = 1'0
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:165$134'.
  Set init value: \onewire_presence_detected = 1'0
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:164$133'.
  Set init value: \read_shutdown_one = 1'0
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:144$132'.
  Set init value: \byte_counter = 5'00000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:141$131'.
  Set init value: \read_byte = 8'00000000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:140$130'.
  Set init value: \write_byte = 8'00000000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:139$129'.
  Set init value: \byte_inject_opcode = 3'000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:138$128'.
  Set init value: \byte_opcode = 3'000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:136$127'.
  Set init value: \onewire_received_bit = 1'0
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:135$126'.
  Set init value: \onewire_seq_state = 3'000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:134$125'.
  Set init value: \onewire_timer = 10'0000000000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:133$124'.
  Set init value: \onewire_inject_opcode = 3'000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:132$123'.
  Set init value: \onewire_opcode = 3'000
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:125$122'.
  Set init value: \DQ_Wire_HiZ = 1'0
Found init rule in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:124$121'.
  Set init value: \DQ_Wire_Out = 1'0

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:273$135'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:165$134'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:164$133'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:144$132'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:141$131'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:140$130'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:139$129'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:138$128'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:136$127'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:135$126'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:134$125'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:133$124'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:132$123'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:125$122'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:124$121'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
     1/97: $16\DQ_Wire_Out[0:0]
     2/97: $16\DQ_Wire_HiZ[0:0]
     3/97: $4\onewire_presence_detected[0:0]
     4/97: $21\onewire_seq_state[2:0]
     5/97: $24\onewire_timer[9:0]
     6/97: $15\DQ_Wire_Out[0:0]
     7/97: $15\DQ_Wire_HiZ[0:0]
     8/97: $20\onewire_seq_state[2:0]
     9/97: $23\onewire_timer[9:0]
    10/97: $19\onewire_seq_state[2:0]
    11/97: $22\onewire_timer[9:0]
    12/97: $14\DQ_Wire_HiZ[0:0]
    13/97: $14\DQ_Wire_Out[0:0]
    14/97: $3\onewire_presence_detected[0:0]
    15/97: $18\onewire_seq_state[2:0]
    16/97: $21\onewire_timer[9:0]
    17/97: $2\onewire_presence_detected[0:0]
    18/97: $17\onewire_seq_state[2:0]
    19/97: $20\onewire_timer[9:0]
    20/97: $13\onewire_opcode[2:0]
    21/97: $12\onewire_opcode[2:0]
    22/97: $19\onewire_timer[9:0]
    23/97: $1\onewire_presence_detected[0:0]
    24/97: $16\onewire_seq_state[2:0]
    25/97: $18\onewire_timer[9:0]
    26/97: $13\DQ_Wire_HiZ[0:0]
    27/97: $13\DQ_Wire_Out[0:0]
    28/97: $11\onewire_opcode[2:0]
    29/97: $12\DQ_Wire_Out[0:0]
    30/97: $12\DQ_Wire_HiZ[0:0]
    31/97: $15\onewire_seq_state[2:0]
    32/97: $17\onewire_timer[9:0]
    33/97: $11\DQ_Wire_Out[0:0]
    34/97: $11\DQ_Wire_HiZ[0:0]
    35/97: $14\onewire_seq_state[2:0]
    36/97: $16\onewire_timer[9:0]
    37/97: $13\onewire_seq_state[2:0]
    38/97: $15\onewire_timer[9:0]
    39/97: $10\DQ_Wire_HiZ[0:0]
    40/97: $10\DQ_Wire_Out[0:0]
    41/97: $3\onewire_received_bit[0:0]
    42/97: $12\onewire_seq_state[2:0]
    43/97: $14\onewire_timer[9:0]
    44/97: $2\onewire_received_bit[0:0]
    45/97: $11\onewire_seq_state[2:0]
    46/97: $13\onewire_timer[9:0]
    47/97: $10\onewire_opcode[2:0]
    48/97: $9\onewire_opcode[2:0]
    49/97: $12\onewire_timer[9:0]
    50/97: $10\onewire_seq_state[2:0]
    51/97: $11\onewire_timer[9:0]
    52/97: $9\DQ_Wire_HiZ[0:0]
    53/97: $9\DQ_Wire_Out[0:0]
    54/97: $1\onewire_received_bit[0:0]
    55/97: $8\onewire_opcode[2:0]
    56/97: $8\DQ_Wire_Out[0:0]
    57/97: $8\DQ_Wire_HiZ[0:0]
    58/97: $9\onewire_seq_state[2:0]
    59/97: $10\onewire_timer[9:0]
    60/97: $7\DQ_Wire_Out[0:0]
    61/97: $7\DQ_Wire_HiZ[0:0]
    62/97: $8\onewire_seq_state[2:0]
    63/97: $9\onewire_timer[9:0]
    64/97: $7\onewire_seq_state[2:0]
    65/97: $8\onewire_timer[9:0]
    66/97: $6\DQ_Wire_HiZ[0:0]
    67/97: $6\DQ_Wire_Out[0:0]
    68/97: $7\onewire_opcode[2:0]
    69/97: $6\onewire_opcode[2:0]
    70/97: $7\onewire_timer[9:0]
    71/97: $6\onewire_seq_state[2:0]
    72/97: $6\onewire_timer[9:0]
    73/97: $5\DQ_Wire_HiZ[0:0]
    74/97: $5\DQ_Wire_Out[0:0]
    75/97: $5\onewire_opcode[2:0]
    76/97: $4\DQ_Wire_Out[0:0]
    77/97: $4\DQ_Wire_HiZ[0:0]
    78/97: $5\onewire_seq_state[2:0]
    79/97: $5\onewire_timer[9:0]
    80/97: $3\DQ_Wire_Out[0:0]
    81/97: $3\DQ_Wire_HiZ[0:0]
    82/97: $4\onewire_seq_state[2:0]
    83/97: $4\onewire_timer[9:0]
    84/97: $3\onewire_seq_state[2:0]
    85/97: $3\onewire_timer[9:0]
    86/97: $2\DQ_Wire_HiZ[0:0]
    87/97: $2\DQ_Wire_Out[0:0]
    88/97: $4\onewire_opcode[2:0]
    89/97: $3\onewire_opcode[2:0]
    90/97: $2\onewire_timer[9:0]
    91/97: $2\onewire_seq_state[2:0]
    92/97: $1\onewire_timer[9:0]
    93/97: $1\DQ_Wire_HiZ[0:0]
    94/97: $1\DQ_Wire_Out[0:0]
    95/97: $2\onewire_opcode[2:0]
    96/97: $1\onewire_seq_state[2:0]
    97/97: $1\onewire_opcode[2:0]
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
     1/43: $9\byte_opcode[2:0]
     2/43: $10\onewire_inject_opcode[2:0]
     3/43: $8\byte_opcode[2:0]
     4/43: $9\onewire_inject_opcode[2:0]
     5/43: $4\read_byte[7:0]
     6/43: $4$bitselwrite$data$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$10[7:0]$67
     7/43: $4$bitselwrite$mask$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$9[7:0]$66
     8/43: $5\read_shutdown_one[0:0]
     9/43: $8\onewire_inject_opcode[2:0]
    10/43: $7\byte_counter[4:0]
    11/43: $3$bitselwrite$data$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$10[7:0]$63
    12/43: $3$bitselwrite$mask$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$9[7:0]$62
    13/43: $4\read_shutdown_one[0:0]
    14/43: $3\read_byte[7:0]
    15/43: $7\onewire_inject_opcode[2:0]
    16/43: $7\byte_opcode[2:0]
    17/43: $2$bitselwrite$data$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$10[7:0]$60
    18/43: $2$bitselwrite$mask$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$9[7:0]$59
    19/43: $3\read_shutdown_one[0:0]
    20/43: $6\byte_counter[4:0]
    21/43: $2\read_byte[7:0]
    22/43: $6\byte_opcode[2:0]
    23/43: $6\onewire_inject_opcode[2:0]
    24/43: $1$bitselwrite$data$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$10[7:0]$57
    25/43: $1$bitselwrite$mask$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$9[7:0]$56
    26/43: $2\read_shutdown_one[0:0]
    27/43: $5\byte_counter[4:0]
    28/43: $1\read_byte[7:0]
    29/43: $5\byte_opcode[2:0]
    30/43: $5\onewire_inject_opcode[2:0]
    31/43: $4\onewire_inject_opcode[2:0]
    32/43: $4\byte_counter[4:0]
    33/43: $3\onewire_inject_opcode[2:0]
    34/43: $4\byte_opcode[2:0]
    35/43: $3\byte_counter[4:0]
    36/43: $3\byte_opcode[2:0]
    37/43: $2\onewire_inject_opcode[2:0]
    38/43: $2\byte_counter[4:0]
    39/43: $2\byte_opcode[2:0]
    40/43: $1\onewire_inject_opcode[2:0]
    41/43: $1\byte_counter[4:0]
    42/43: $1\read_shutdown_one[0:0]
    43/43: $1\byte_opcode[2:0]
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:274$43'.
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:264$39'.
     1/2: $1\primary_clock[0:0]
     2/2: $1\primary_clock_divider[6:0]
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:248$38'.
     1/1: $0\slv_ip2bus_data[31:0]
Creating decoders for process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
     1/153: $0\slv_reg3[31:0] [31]
     2/153: $2\write_byte[7:0]
     3/153: $2\byte_inject_opcode[2:0]
     4/153: $1\byte_inject_opcode[2:0]
     5/153: $1\write_byte[7:0]
     6/153: $18\bit_index[31:0]
     7/153: $0\slv_reg3[31:0] [0]
     8/153: $3\byte_inject_opcode[2:0]
     9/153: $0\slv_reg3[31:0] [1]
    10/153: $0\slv_reg3[31:0] [2]
    11/153: $0\slv_reg3[31:0] [3]
    12/153: $0\slv_reg3[31:0] [4]
    13/153: $0\slv_reg3[31:0] [5]
    14/153: $0\slv_reg3[31:0] [6]
    15/153: $0\slv_reg3[31:0] [7]
    16/153: $17\bit_index[31:0]
    17/153: $0\slv_reg3[31:0] [8]
    18/153: $0\slv_reg3[31:0] [9]
    19/153: $0\slv_reg3[31:0] [10]
    20/153: $0\slv_reg3[31:0] [11]
    21/153: $0\slv_reg3[31:0] [12]
    22/153: $0\slv_reg3[31:0] [13]
    23/153: $0\slv_reg3[31:0] [14]
    24/153: $0\slv_reg3[31:0] [15]
    25/153: $16\bit_index[31:0]
    26/153: $0\slv_reg3[31:0] [16]
    27/153: $0\slv_reg3[31:0] [17]
    28/153: $0\slv_reg3[31:0] [18]
    29/153: $0\slv_reg3[31:0] [19]
    30/153: $0\slv_reg3[31:0] [20]
    31/153: $0\slv_reg3[31:0] [21]
    32/153: $0\slv_reg3[31:0] [22]
    33/153: $0\slv_reg3[31:0] [23]
    34/153: $15\bit_index[31:0]
    35/153: $0\slv_reg3[31:0] [24]
    36/153: $0\slv_reg3[31:0] [25]
    37/153: $0\slv_reg3[31:0] [26]
    38/153: $0\slv_reg3[31:0] [27]
    39/153: $0\slv_reg3[31:0] [28]
    40/153: $0\slv_reg3[31:0] [29]
    41/153: $0\slv_reg3[31:0] [30]
    42/153: $0\slv_reg2[31:0] [1]
    43/153: $0\slv_reg2[31:0] [0]
    44/153: $0\slv_reg2[31:0] [2]
    45/153: $0\slv_reg2[31:0] [3]
    46/153: $0\slv_reg2[31:0] [4]
    47/153: $0\slv_reg2[31:0] [5]
    48/153: $0\slv_reg2[31:0] [6]
    49/153: $0\slv_reg2[31:0] [7]
    50/153: $0\slv_reg2[31:0] [8]
    51/153: $13\bit_index[31:0]
    52/153: $0\slv_reg2[31:0] [9]
    53/153: $0\slv_reg2[31:0] [10]
    54/153: $0\slv_reg2[31:0] [11]
    55/153: $0\slv_reg2[31:0] [12]
    56/153: $0\slv_reg2[31:0] [13]
    57/153: $0\slv_reg2[31:0] [14]
    58/153: $0\slv_reg2[31:0] [15]
    59/153: $0\slv_reg2[31:0] [16]
    60/153: $12\bit_index[31:0]
    61/153: $0\slv_reg2[31:0] [17]
    62/153: $0\slv_reg2[31:0] [18]
    63/153: $0\slv_reg2[31:0] [19]
    64/153: $0\slv_reg2[31:0] [20]
    65/153: $0\slv_reg2[31:0] [21]
    66/153: $0\slv_reg2[31:0] [22]
    67/153: $0\slv_reg2[31:0] [23]
    68/153: $0\slv_reg2[31:0] [24]
    69/153: $11\bit_index[31:0]
    70/153: $0\slv_reg2[31:0] [25]
    71/153: $0\slv_reg2[31:0] [26]
    72/153: $0\slv_reg2[31:0] [27]
    73/153: $0\slv_reg2[31:0] [28]
    74/153: $0\slv_reg2[31:0] [29]
    75/153: $0\slv_reg2[31:0] [30]
    76/153: $0\slv_reg2[31:0] [31]
    77/153: $0\slv_reg1[31:0] [1]
    78/153: $0\slv_reg1[31:0] [0]
    79/153: $0\slv_reg1[31:0] [2]
    80/153: $0\slv_reg1[31:0] [3]
    81/153: $0\slv_reg1[31:0] [4]
    82/153: $0\slv_reg1[31:0] [5]
    83/153: $0\slv_reg1[31:0] [6]
    84/153: $0\slv_reg1[31:0] [7]
    85/153: $0\slv_reg1[31:0] [8]
    86/153: $9\bit_index[31:0]
    87/153: $0\slv_reg1[31:0] [9]
    88/153: $0\slv_reg1[31:0] [10]
    89/153: $0\slv_reg1[31:0] [11]
    90/153: $0\slv_reg1[31:0] [12]
    91/153: $0\slv_reg1[31:0] [13]
    92/153: $0\slv_reg1[31:0] [14]
    93/153: $0\slv_reg1[31:0] [15]
    94/153: $0\slv_reg1[31:0] [16]
    95/153: $8\bit_index[31:0]
    96/153: $0\slv_reg1[31:0] [17]
    97/153: $0\slv_reg1[31:0] [18]
    98/153: $0\slv_reg1[31:0] [19]
    99/153: $0\slv_reg1[31:0] [20]
   100/153: $0\slv_reg1[31:0] [21]
   101/153: $0\slv_reg1[31:0] [22]
   102/153: $0\slv_reg1[31:0] [23]
   103/153: $0\slv_reg1[31:0] [24]
   104/153: $7\bit_index[31:0]
   105/153: $0\slv_reg1[31:0] [25]
   106/153: $0\slv_reg1[31:0] [26]
   107/153: $0\slv_reg1[31:0] [27]
   108/153: $0\slv_reg1[31:0] [28]
   109/153: $0\slv_reg1[31:0] [29]
   110/153: $0\slv_reg1[31:0] [30]
   111/153: $0\slv_reg1[31:0] [31]
   112/153: $0\slv_reg0[31:0] [1]
   113/153: $0\slv_reg0[31:0] [0]
   114/153: $0\slv_reg0[31:0] [2]
   115/153: $0\slv_reg0[31:0] [3]
   116/153: $0\slv_reg0[31:0] [4]
   117/153: $0\slv_reg0[31:0] [5]
   118/153: $0\slv_reg0[31:0] [6]
   119/153: $0\slv_reg0[31:0] [7]
   120/153: $0\slv_reg0[31:0] [8]
   121/153: $5\bit_index[31:0]
   122/153: $0\slv_reg0[31:0] [9]
   123/153: $0\slv_reg0[31:0] [10]
   124/153: $0\slv_reg0[31:0] [11]
   125/153: $0\slv_reg0[31:0] [12]
   126/153: $0\slv_reg0[31:0] [13]
   127/153: $0\slv_reg0[31:0] [14]
   128/153: $0\slv_reg0[31:0] [15]
   129/153: $0\slv_reg0[31:0] [16]
   130/153: $4\bit_index[31:0]
   131/153: $0\slv_reg0[31:0] [17]
   132/153: $0\slv_reg0[31:0] [18]
   133/153: $0\slv_reg0[31:0] [19]
   134/153: $0\slv_reg0[31:0] [20]
   135/153: $0\slv_reg0[31:0] [21]
   136/153: $0\slv_reg0[31:0] [22]
   137/153: $0\slv_reg0[31:0] [23]
   138/153: $0\slv_reg0[31:0] [24]
   139/153: $3\bit_index[31:0]
   140/153: $0\slv_reg0[31:0] [25]
   141/153: $0\slv_reg0[31:0] [26]
   142/153: $0\slv_reg0[31:0] [27]
   143/153: $0\slv_reg0[31:0] [28]
   144/153: $0\slv_reg0[31:0] [29]
   145/153: $0\slv_reg0[31:0] [30]
   146/153: $0\slv_reg0[31:0] [31]
   147/153: $2\bit_index[31:0]
   148/153: $1\bit_index[31:0]
   149/153: $1\byte_index[31:0]
   150/153: $14\bit_index[31:0]
   151/153: $10\bit_index[31:0]
   152/153: $6\bit_index[31:0]
   153/153: $2\byte_index[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\user_logic.\slv_ip2bus_data' from process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:248$38'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\user_logic.\DQ_Wire_Out' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
  created $dff cell `$procdff$2767' with positive edge clock.
Creating register for signal `\user_logic.\DQ_Wire_HiZ' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
  created $dff cell `$procdff$2768' with positive edge clock.
Creating register for signal `\user_logic.\onewire_opcode' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
  created $dff cell `$procdff$2769' with positive edge clock.
Creating register for signal `\user_logic.\onewire_timer' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
  created $dff cell `$procdff$2770' with positive edge clock.
Creating register for signal `\user_logic.\onewire_seq_state' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
  created $dff cell `$procdff$2771' with positive edge clock.
Creating register for signal `\user_logic.\onewire_received_bit' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
  created $dff cell `$procdff$2772' with positive edge clock.
Creating register for signal `\user_logic.\onewire_presence_detected' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
  created $dff cell `$procdff$2773' with positive edge clock.
Creating register for signal `\user_logic.\onewire_inject_opcode' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
  created $dff cell `$procdff$2774' with positive edge clock.
Creating register for signal `\user_logic.\byte_opcode' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
  created $dff cell `$procdff$2775' with positive edge clock.
Creating register for signal `\user_logic.\read_byte' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
  created $dff cell `$procdff$2776' with positive edge clock.
Creating register for signal `\user_logic.\byte_counter' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
  created $dff cell `$procdff$2777' with positive edge clock.
Creating register for signal `\user_logic.\read_shutdown_one' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
  created $dff cell `$procdff$2778' with positive edge clock.
Creating register for signal `\user_logic.$bitselwrite$mask$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$9' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
  created $dff cell `$procdff$2779' with positive edge clock.
Creating register for signal `\user_logic.$bitselwrite$data$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:312$10' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
  created $dff cell `$procdff$2780' with positive edge clock.
Creating register for signal `\user_logic.\primary_clock_div_by_two' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:274$43'.
  created $dff cell `$procdff$2781' with positive edge clock.
Creating register for signal `\user_logic.\primary_clock' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:264$39'.
  created $dff cell `$procdff$2782' with positive edge clock.
Creating register for signal `\user_logic.\primary_clock_divider' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:264$39'.
  created $dff cell `$procdff$2783' with positive edge clock.
Creating register for signal `\user_logic.\slv_reg0' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
  created $dff cell `$procdff$2784' with positive edge clock.
Creating register for signal `\user_logic.\slv_reg1' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
  created $dff cell `$procdff$2785' with positive edge clock.
Creating register for signal `\user_logic.\slv_reg2' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
  created $dff cell `$procdff$2786' with positive edge clock.
Creating register for signal `\user_logic.\slv_reg3' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
  created $dff cell `$procdff$2787' with positive edge clock.
Creating register for signal `\user_logic.\byte_index' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
  created $dff cell `$procdff$2788' with positive edge clock.
Creating register for signal `\user_logic.\bit_index' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
  created $dff cell `$procdff$2789' with positive edge clock.
Creating register for signal `\user_logic.\byte_inject_opcode' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
  created $dff cell `$procdff$2790' with positive edge clock.
Creating register for signal `\user_logic.\write_byte' using process `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
  created $dff cell `$procdff$2791' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:273$135'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:165$134'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:164$133'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:144$132'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:141$131'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:140$130'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:139$129'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:138$128'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:136$127'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:135$126'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:134$125'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:133$124'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:132$123'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:125$122'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:124$121'.
Found and cleaned up 29 empty switches in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:332$79'.
Found and cleaned up 12 empty switches in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:278$45'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:274$43'.
Found and cleaned up 1 empty switch in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:264$39'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:264$39'.
Found and cleaned up 1 empty switch in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:248$38'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:248$38'.
Found and cleaned up 21 empty switches in `\user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
Removing empty process `user_logic.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:198$17'.
Cleaned up 64 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_logic.
<suppressed ~47 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_logic.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_logic'.
<suppressed ~462 debug messages>
Removed a total of 154 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $procmux$782: $1\read_shutdown_one[0:0] -> 1'0
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$2211.
    dead port 2/2 on $mux $procmux$2208.
    dead port 1/2 on $mux $procmux$2756.
    dead port 1/2 on $mux $procmux$2112.
    dead port 2/2 on $mux $procmux$2109.
    dead port 2/2 on $mux $procmux$2753.
    dead port 1/2 on $mux $procmux$2624.
    dead port 2/2 on $mux $procmux$2621.
    dead port 1/2 on $mux $procmux$2013.
    dead port 2/2 on $mux $procmux$2010.
    dead port 1/2 on $mux $procmux$2744.
    dead port 2/2 on $mux $procmux$2741.
    dead port 1/2 on $mux $procmux$1833.
    dead port 2/2 on $mux $procmux$1830.
    dead port 1/2 on $mux $procmux$2733.
    dead port 2/2 on $mux $procmux$2730.
    dead port 1/2 on $mux $procmux$1743.
    dead port 2/2 on $mux $procmux$1740.
    dead port 1/2 on $mux $procmux$2516.
    dead port 2/2 on $mux $procmux$2513.
    dead port 1/2 on $mux $procmux$1653.
    dead port 2/2 on $mux $procmux$1650.
    dead port 1/2 on $mux $procmux$2717.
    dead port 1/2 on $mux $procmux$1448.
    dead port 2/2 on $mux $procmux$1445.
    dead port 1/2 on $mux $procmux$1319.
    dead port 2/2 on $mux $procmux$1316.
    dead port 1/2 on $mux $procmux$2765.
    dead port 1/2 on $mux $procmux$2408.
    dead port 2/2 on $mux $procmux$2405.
    dead port 1/2 on $mux $procmux$1190.
    dead port 2/2 on $mux $procmux$1187.
    dead port 2/2 on $mux $procmux$1076.
    dead port 1/2 on $mux $procmux$1055.
    dead port 2/2 on $mux $procmux$1052.
    dead port 2/2 on $mux $procmux$1040.
    dead port 2/2 on $mux $procmux$1034.
    dead port 2/2 on $mux $procmux$983.
    dead port 2/2 on $mux $procmux$977.
    dead port 2/2 on $mux $procmux$971.
    dead port 2/2 on $mux $procmux$965.
    dead port 2/2 on $mux $procmux$963.
    dead port 2/2 on $mux $procmux$956.
    dead port 2/2 on $mux $procmux$954.
    dead port 2/2 on $mux $procmux$947.
    dead port 2/2 on $mux $procmux$945.
    dead port 2/2 on $mux $procmux$938.
    dead port 2/2 on $mux $procmux$936.
    dead port 2/2 on $mux $procmux$934.
    dead port 1/2 on $mux $procmux$911.
    dead port 2/2 on $mux $procmux$911.
    dead port 1/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$908.
    dead port 2/2 on $mux $procmux$905.
    dead port 2/2 on $mux $procmux$899.
    dead port 2/2 on $mux $procmux$893.
    dead port 2/2 on $mux $procmux$887.
    dead port 2/2 on $mux $procmux$881.
    dead port 1/2 on $mux $procmux$875.
    dead port 2/2 on $mux $procmux$875.
    dead port 1/2 on $mux $procmux$873.
    dead port 2/2 on $mux $procmux$873.
    dead port 1/2 on $mux $procmux$869.
    dead port 2/2 on $mux $procmux$869.
    dead port 1/2 on $mux $procmux$867.
    dead port 2/2 on $mux $procmux$867.
    dead port 2/2 on $mux $procmux$863.
    dead port 2/2 on $mux $procmux$861.
    dead port 2/2 on $mux $procmux$854.
    dead port 2/2 on $mux $procmux$852.
    dead port 2/2 on $mux $procmux$845.
    dead port 2/2 on $mux $procmux$843.
    dead port 2/2 on $mux $procmux$836.
    dead port 2/2 on $mux $procmux$834.
    dead port 1/2 on $mux $procmux$827.
    dead port 2/2 on $mux $procmux$827.
    dead port 1/2 on $mux $procmux$825.
    dead port 2/2 on $mux $procmux$825.
    dead port 1/2 on $mux $procmux$823.
    dead port 2/2 on $mux $procmux$823.
    dead port 1/2 on $mux $procmux$818.
    dead port 2/2 on $mux $procmux$818.
    dead port 1/2 on $mux $procmux$816.
    dead port 2/2 on $mux $procmux$816.
    dead port 1/2 on $mux $procmux$814.
    dead port 2/2 on $mux $procmux$814.
    dead port 2/2 on $mux $procmux$809.
    dead port 2/2 on $mux $procmux$807.
    dead port 2/2 on $mux $procmux$800.
    dead port 2/2 on $mux $procmux$798.
    dead port 2/2 on $mux $procmux$796.
    dead port 2/2 on $mux $procmux$788.
    dead port 2/2 on $mux $procmux$786.
    dead port 2/2 on $mux $procmux$784.
    dead port 1/2 on $mux $procmux$776.
    dead port 2/2 on $mux $procmux$776.
    dead port 1/2 on $mux $procmux$774.
    dead port 2/2 on $mux $procmux$774.
    dead port 1/2 on $mux $procmux$772.
    dead port 2/2 on $mux $procmux$772.
    dead port 1/2 on $mux $procmux$770.
    dead port 2/2 on $mux $procmux$770.
    dead port 1/2 on $mux $procmux$764.
    dead port 2/2 on $mux $procmux$764.
    dead port 1/2 on $mux $procmux$762.
    dead port 2/2 on $mux $procmux$762.
    dead port 1/2 on $mux $procmux$760.
    dead port 2/2 on $mux $procmux$760.
    dead port 1/2 on $mux $procmux$758.
    dead port 2/2 on $mux $procmux$758.
    dead port 2/2 on $mux $procmux$752.
    dead port 2/2 on $mux $procmux$750.
    dead port 2/2 on $mux $procmux$748.
    dead port 2/2 on $mux $procmux$734.
    dead port 2/2 on $mux $procmux$728.
    dead port 2/2 on $mux $procmux$695.
    dead port 2/2 on $mux $procmux$689.
    dead port 2/2 on $mux $procmux$687.
    dead port 2/2 on $mux $procmux$680.
    dead port 2/2 on $mux $procmux$674.
    dead port 2/2 on $mux $procmux$668.
    dead port 2/2 on $mux $procmux$656.
    dead port 2/2 on $mux $procmux$654.
    dead port 2/2 on $mux $procmux$647.
    dead port 2/2 on $mux $procmux$645.
    dead port 2/2 on $mux $procmux$638.
    dead port 2/2 on $mux $procmux$636.
    dead port 2/2 on $mux $procmux$629.
    dead port 2/2 on $mux $procmux$627.
    dead port 2/2 on $mux $procmux$620.
    dead port 2/2 on $mux $procmux$614.
    dead port 2/2 on $mux $procmux$608.
    dead port 2/2 on $mux $procmux$602.
    dead port 2/2 on $mux $procmux$575.
    dead port 2/2 on $mux $procmux$569.
    dead port 2/2 on $mux $procmux$567.
    dead port 2/2 on $mux $procmux$560.
    dead port 2/2 on $mux $procmux$554.
    dead port 2/2 on $mux $procmux$548.
    dead port 2/2 on $mux $procmux$536.
    dead port 2/2 on $mux $procmux$534.
    dead port 2/2 on $mux $procmux$527.
    dead port 2/2 on $mux $procmux$525.
    dead port 2/2 on $mux $procmux$518.
    dead port 2/2 on $mux $procmux$516.
    dead port 2/2 on $mux $procmux$509.
    dead port 2/2 on $mux $procmux$507.
    dead port 2/2 on $mux $procmux$500.
    dead port 2/2 on $mux $procmux$494.
    dead port 2/2 on $mux $procmux$488.
    dead port 2/2 on $mux $procmux$482.
    dead port 2/2 on $mux $procmux$452.
    dead port 2/2 on $mux $procmux$446.
    dead port 2/2 on $mux $procmux$444.
    dead port 2/2 on $mux $procmux$425.
    dead port 2/2 on $mux $procmux$419.
    dead port 2/2 on $mux $procmux$417.
    dead port 2/2 on $mux $procmux$410.
    dead port 2/2 on $mux $procmux$408.
    dead port 2/2 on $mux $procmux$401.
    dead port 2/2 on $mux $procmux$399.
    dead port 2/2 on $mux $procmux$392.
    dead port 2/2 on $mux $procmux$386.
    dead port 2/2 on $mux $procmux$380.
    dead port 2/2 on $mux $procmux$368.
    dead port 2/2 on $mux $procmux$366.
    dead port 2/2 on $mux $procmux$359.
    dead port 2/2 on $mux $procmux$357.
    dead port 2/2 on $mux $procmux$350.
    dead port 2/2 on $mux $procmux$348.
    dead port 2/2 on $mux $procmux$341.
    dead port 2/2 on $mux $procmux$339.
    dead port 2/2 on $mux $procmux$332.
    dead port 2/2 on $mux $procmux$326.
    dead port 2/2 on $mux $procmux$320.
    dead port 2/2 on $mux $procmux$314.
    dead port 2/2 on $mux $procmux$284.
    dead port 2/2 on $mux $procmux$278.
    dead port 2/2 on $mux $procmux$276.
    dead port 2/2 on $mux $procmux$257.
    dead port 2/2 on $mux $procmux$251.
    dead port 2/2 on $mux $procmux$249.
    dead port 2/2 on $mux $procmux$242.
    dead port 2/2 on $mux $procmux$240.
    dead port 2/2 on $mux $procmux$233.
    dead port 2/2 on $mux $procmux$231.
    dead port 2/2 on $mux $procmux$224.
    dead port 2/2 on $mux $procmux$218.
    dead port 2/2 on $mux $procmux$212.
    dead port 2/2 on $mux $procmux$200.
    dead port 2/2 on $mux $procmux$198.
    dead port 2/2 on $mux $procmux$191.
    dead port 2/2 on $mux $procmux$189.
    dead port 2/2 on $mux $procmux$182.
    dead port 2/2 on $mux $procmux$180.
    dead port 2/2 on $mux $procmux$173.
    dead port 2/2 on $mux $procmux$171.
    dead port 2/2 on $mux $procmux$164.
    dead port 2/2 on $mux $procmux$158.
    dead port 2/2 on $mux $procmux$152.
    dead port 2/2 on $mux $procmux$146.
    dead port 2/2 on $mux $procmux$140.
Removed 202 multiplexer ports.
<suppressed ~216 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_logic.
    New ctrl vector for $pmux cell $procmux$2759: $auto$opt_reduce.cc:134:opt_mux$2793
    New ctrl vector for $mux cell $procmux$782: { }
  Optimizing cells in module \user_logic.
Performed a total of 2 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_logic'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$2791 ($dff) from module user_logic (D = \slv_reg1 [7:0], Q = \write_byte).
Adding EN signal on $procdff$2790 ($dff) from module user_logic (D = $procmux$1074_Y, Q = \byte_inject_opcode).
Adding SRST signal on $auto$ff.cc:262:slice$2797 ($dffe) from module user_logic (D = $2\byte_inject_opcode[2:0], Q = \byte_inject_opcode, rval = 3'000).
Adding EN signal on $procdff$2789 ($dff) from module user_logic (D = $2\bit_index[31:0], Q = \bit_index).
Adding EN signal on $procdff$2788 ($dff) from module user_logic (D = $2\byte_index[31:0], Q = \byte_index).
Adding SRST signal on $procdff$2786 ($dff) from module user_logic (D = { $procmux$1900_Y $procmux$1890_Y $procmux$1880_Y $procmux$1870_Y $procmux$1860_Y $procmux$1850_Y $procmux$1840_Y $procmux$1820_Y $procmux$1810_Y $procmux$1800_Y $procmux$1790_Y $procmux$1780_Y $procmux$1770_Y $procmux$1760_Y $procmux$1750_Y $procmux$1730_Y $procmux$1720_Y $procmux$1710_Y $procmux$1700_Y $procmux$1690_Y $procmux$1680_Y $procmux$1670_Y $procmux$1660_Y $procmux$1640_Y $procmux$1630_Y $procmux$1620_Y $procmux$1610_Y $procmux$1600_Y $procmux$1590_Y $procmux$1580_Y $procmux$1560_Y $procmux$1570_Y }, Q = \slv_reg2, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2805 ($sdff) from module user_logic (D = \Bus2IP_Data [7:0], Q = \slv_reg2 [7:0]).
Adding EN signal on $auto$ff.cc:262:slice$2805 ($sdff) from module user_logic (D = \Bus2IP_Data [15:8], Q = \slv_reg2 [15:8]).
Adding EN signal on $auto$ff.cc:262:slice$2805 ($sdff) from module user_logic (D = \Bus2IP_Data [23:16], Q = \slv_reg2 [23:16]).
Adding EN signal on $auto$ff.cc:262:slice$2805 ($sdff) from module user_logic (D = \Bus2IP_Data [31:24], Q = \slv_reg2 [31:24]).
Adding SRST signal on $procdff$2785 ($dff) from module user_logic (D = { $procmux$2285_Y $procmux$2274_Y $procmux$2263_Y $procmux$2252_Y $procmux$2241_Y $procmux$2230_Y $procmux$2219_Y $procmux$2197_Y $procmux$2186_Y $procmux$2175_Y $procmux$2164_Y $procmux$2153_Y $procmux$2142_Y $procmux$2131_Y $procmux$2120_Y $procmux$2098_Y $procmux$2087_Y $procmux$2076_Y $procmux$2065_Y $procmux$2054_Y $procmux$2043_Y $procmux$2032_Y $procmux$2021_Y $procmux$1999_Y $procmux$1988_Y $procmux$1977_Y $procmux$1966_Y $procmux$1955_Y $procmux$1944_Y $procmux$1933_Y $procmux$1911_Y $procmux$1922_Y }, Q = \slv_reg1, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2818 ($sdff) from module user_logic (D = \Bus2IP_Data [7:0], Q = \slv_reg1 [7:0]).
Adding EN signal on $auto$ff.cc:262:slice$2818 ($sdff) from module user_logic (D = \Bus2IP_Data [15:8], Q = \slv_reg1 [15:8]).
Adding EN signal on $auto$ff.cc:262:slice$2818 ($sdff) from module user_logic (D = \Bus2IP_Data [23:16], Q = \slv_reg1 [23:16]).
Adding EN signal on $auto$ff.cc:262:slice$2818 ($sdff) from module user_logic (D = \Bus2IP_Data [31:24], Q = \slv_reg1 [31:24]).
Adding SRST signal on $procdff$2784 ($dff) from module user_logic (D = { $procmux$2705_Y $procmux$2693_Y $procmux$2681_Y $procmux$2669_Y $procmux$2657_Y $procmux$2645_Y $procmux$2633_Y $procmux$2609_Y $procmux$2597_Y $procmux$2585_Y $procmux$2573_Y $procmux$2561_Y $procmux$2549_Y $procmux$2537_Y $procmux$2525_Y $procmux$2501_Y $procmux$2489_Y $procmux$2477_Y $procmux$2465_Y $procmux$2453_Y $procmux$2441_Y $procmux$2429_Y $procmux$2417_Y $procmux$2393_Y $procmux$2381_Y $procmux$2369_Y $procmux$2357_Y $procmux$2345_Y $procmux$2333_Y $procmux$2321_Y $procmux$2297_Y $procmux$2309_Y }, Q = \slv_reg0, rval = 0).
Adding EN signal on $auto$ff.cc:262:slice$2831 ($sdff) from module user_logic (D = \Bus2IP_Data [7:0], Q = \slv_reg0 [7:0]).
Adding EN signal on $auto$ff.cc:262:slice$2831 ($sdff) from module user_logic (D = \Bus2IP_Data [15:8], Q = \slv_reg0 [15:8]).
Adding EN signal on $auto$ff.cc:262:slice$2831 ($sdff) from module user_logic (D = \Bus2IP_Data [23:16], Q = \slv_reg0 [23:16]).
Adding EN signal on $auto$ff.cc:262:slice$2831 ($sdff) from module user_logic (D = \Bus2IP_Data [31:24], Q = \slv_reg0 [31:24]).
Adding SRST signal on $procdff$2783 ($dff) from module user_logic (D = $add$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:266$40_Y [6:0], Q = \primary_clock_divider, rval = 7'0000000).
Adding EN signal on $procdff$2782 ($dff) from module user_logic (D = $logic_not$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:269$42_Y, Q = \primary_clock).
Setting constant 1-bit at position 0 on $procdff$2779 ($dff) from module user_logic.
Setting constant 1-bit at position 1 on $procdff$2779 ($dff) from module user_logic.
Setting constant 1-bit at position 2 on $procdff$2779 ($dff) from module user_logic.
Setting constant 1-bit at position 3 on $procdff$2779 ($dff) from module user_logic.
Setting constant 1-bit at position 4 on $procdff$2779 ($dff) from module user_logic.
Setting constant 1-bit at position 5 on $procdff$2779 ($dff) from module user_logic.
Setting constant 1-bit at position 6 on $procdff$2779 ($dff) from module user_logic.
Setting constant 1-bit at position 7 on $procdff$2779 ($dff) from module user_logic.
Adding EN signal on $procdff$2776 ($dff) from module user_logic (D = $or$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/opb_onewire.v:0$75_Y, Q = \read_byte).
Adding EN signal on $procdff$2773 ($dff) from module user_logic (D = $procmux$150_Y, Q = \onewire_presence_detected).
Adding SRST signal on $auto$ff.cc:262:slice$2851 ($dffe) from module user_logic (D = $2\onewire_presence_detected[0:0], Q = \onewire_presence_detected, rval = 1'0).
Adding EN signal on $procdff$2772 ($dff) from module user_logic (D = \DQ_Wire_I, Q = \onewire_received_bit).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_logic..
Removed 325 unused cells and 1589 unused wires.
<suppressed ~329 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_logic.
<suppressed ~2 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \user_logic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~113 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \user_logic.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\user_logic'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \user_logic..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module user_logic.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== user_logic ===

   Number of wires:                394
   Number of wire bits:           1587
   Number of public wires:          41
   Number of public wire bits:     316
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                414
     $add                            3
     $and                            1
     $dff                           11
     $dffe                           4
     $eq                            24
     $ge                             1
     $logic_not                     19
     $logic_or                       7
     $lt                             3
     $mux                          295
     $ne                             1
     $not                            2
     $or                             1
     $pmux                           1
     $reduce_and                    13
     $reduce_bool                    3
     $sdff                           1
     $sdffce                         2
     $sdffe                          8
     $shiftx                         1
     $shl                            2
     $sub                           11

End of script. Logfile hash: 329dd1b979, CPU: user 0.31s system 0.01s, MEM: 19.02 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 35% 4x opt_expr (0 sec), 12% 1x proc_mux (0 sec), ...
