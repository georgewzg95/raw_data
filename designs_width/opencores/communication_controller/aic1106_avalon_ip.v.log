
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v' to AST representation.
Generating RTLIL representation for module `\AIC1106_PCM'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: AIC1106_PCM         
Automatically selected AIC1106_PCM as design top module.

2.2. Analyzing design hierarchy..
Top module:  \AIC1106_PCM

2.3. Analyzing design hierarchy..
Top module:  \AIC1106_PCM
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31 in module AIC1106_PCM.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:149$30 in module AIC1106_PCM.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:134$28 in module AIC1106_PCM.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11 in module AIC1106_PCM.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset_req_r in `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
Found async reset \reset_req_r in `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:149$30'.
Found async reset \reset_req_r in `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:134$28'.
Found async reset \csi_reset in `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:234$33'.
Creating decoders for process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
     1/6: $0\main_cnt[8:0]
     2/6: $0\asi_ready_r[0:0]
     3/6: $0\tx_shft_r[15:0]
     4/6: $0\tx_latch_r[31:0]
     5/6: $0\underflow_r[0:0]
     6/6: $0\pcmsyn_r[0:0]
Creating decoders for process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:149$30'.
     1/3: $0\rx_latch_r[31:0] [31:16]
     2/3: $0\rx_latch_r[31:0] [15:0]
     3/3: $0\aso_valid_r[0:0]
Creating decoders for process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:134$28'.
     1/1: $0\rx_shft_r[15:0]
Creating decoders for process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.
     1/5: $0\volume_r[2:0]
     2/5: $0\mute_r[0:0]
     3/5: $0\reset_req_r[0:0]
     4/5: $0\loopback_r[0:0]
     5/5: $0\enable_r[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\AIC1106_PCM.\reset_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:234$33'.
  created $dff cell `$procdff$145' with positive edge clock.
Creating register for signal `\AIC1106_PCM.\pcmsyn_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
  created $adff cell `$procdff$146' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\underflow_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
  created $adff cell `$procdff$147' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\tx_latch_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
  created $dff cell `$procdff$150' with positive edge clock.
Creating register for signal `\AIC1106_PCM.\tx_shft_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
  created $dff cell `$procdff$153' with positive edge clock.
Creating register for signal `\AIC1106_PCM.\asi_ready_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
  created $adff cell `$procdff$154' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\main_cnt' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
  created $adff cell `$procdff$155' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\rx_latch_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:149$30'.
  created $adff cell `$procdff$156' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\aso_valid_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:149$30'.
  created $adff cell `$procdff$157' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\rx_shft_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:134$28'.
  created $adff cell `$procdff$158' with negative edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\enable_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.
  created $adff cell `$procdff$159' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\loopback_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.
  created $adff cell `$procdff$160' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\reset_req_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.
  created $adff cell `$procdff$161' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\mute_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.
  created $adff cell `$procdff$162' with positive edge clock and positive level reset.
Creating register for signal `\AIC1106_PCM.\volume_r' using process `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.
  created $adff cell `$procdff$163' with positive edge clock and positive level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:234$33'.
Found and cleaned up 10 empty switches in `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
Removing empty process `AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:174$31'.
Found and cleaned up 3 empty switches in `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:149$30'.
Removing empty process `AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:149$30'.
Found and cleaned up 1 empty switch in `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:134$28'.
Removing empty process `AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:134$28'.
Found and cleaned up 1 empty switch in `\AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.
Removing empty process `AIC1106_PCM.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:98$11'.
Cleaned up 15 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module AIC1106_PCM.
<suppressed ~3 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module AIC1106_PCM.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AIC1106_PCM'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AIC1106_PCM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AIC1106_PCM.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AIC1106_PCM'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$163 ($adff) from module AIC1106_PCM (D = \avs_creg_writedata [2:0], Q = \volume_r).
Adding EN signal on $procdff$146 ($adff) from module AIC1106_PCM (D = $procmux$105_Y, Q = \pcmsyn_r).
Adding EN signal on $procdff$147 ($adff) from module AIC1106_PCM (D = 1'1, Q = \underflow_r).
Adding EN signal on $procdff$150 ($dff) from module AIC1106_PCM (D = $procmux$70_Y, Q = \tx_latch_r).
Adding SRST signal on $auto$ff.cc:262:slice$187 ($dffe) from module AIC1106_PCM (D = \asi_data, Q = \tx_latch_r, rval = 0).
Adding EN signal on $procdff$153 ($dff) from module AIC1106_PCM (D = $procmux$57_Y, Q = \tx_shft_r).
Adding EN signal on $procdff$154 ($adff) from module AIC1106_PCM (D = $procmux$40_Y, Q = \asi_ready_r).
Adding EN signal on $procdff$156 ($adff) from module AIC1106_PCM (D = \rx_shft_r, Q = \rx_latch_r [31:16]).
Adding EN signal on $procdff$156 ($adff) from module AIC1106_PCM (D = \rx_shft_r, Q = \rx_latch_r [15:0]).
Adding EN signal on $procdff$157 ($adff) from module AIC1106_PCM (D = $procmux$128_Y, Q = \aso_valid_r).
Adding EN signal on $procdff$158 ($adff) from module AIC1106_PCM (D = { \rx_shft_r [14:0] $ternary$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/aic1106_avalon_ip.v:91$4_Y }, Q = \rx_shft_r).
Adding EN signal on $procdff$159 ($adff) from module AIC1106_PCM (D = \avs_creg_writedata [4], Q = \enable_r).
Adding EN signal on $procdff$160 ($adff) from module AIC1106_PCM (D = \avs_creg_writedata [5], Q = \loopback_r).
Adding EN signal on $procdff$161 ($adff) from module AIC1106_PCM (D = \avs_creg_writedata [6], Q = \reset_req_r).
Adding EN signal on $procdff$162 ($adff) from module AIC1106_PCM (D = \avs_creg_writedata [3], Q = \mute_r).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AIC1106_PCM..
Removed 26 unused cells and 100 unused wires.
<suppressed ~27 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module AIC1106_PCM.
<suppressed ~4 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AIC1106_PCM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AIC1106_PCM.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AIC1106_PCM'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AIC1106_PCM..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module AIC1106_PCM.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \AIC1106_PCM..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \AIC1106_PCM.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\AIC1106_PCM'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \AIC1106_PCM..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module AIC1106_PCM.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== AIC1106_PCM ===

   Number of wires:                 95
   Number of wire bits:            451
   Number of public wires:          51
   Number of public wire bits:     309
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 79
     $add                            1
     $adff                           1
     $adffe                         12
     $and                            5
     $dff                            1
     $dffe                           1
     $eq                             9
     $gt                             2
     $le                             2
     $logic_and                      2
     $logic_not                      2
     $logic_or                       1
     $mux                           17
     $ne                             3
     $not                            8
     $or                             1
     $reduce_and                     6
     $reduce_bool                    4
     $sdffce                         1

End of script. Logfile hash: c3dddf251d, CPU: user 0.06s system 0.00s, MEM: 12.17 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 5x opt_expr (0 sec), 26% 3x opt_clean (0 sec), ...
