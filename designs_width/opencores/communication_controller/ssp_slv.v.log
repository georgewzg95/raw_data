
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v' to AST representation.
Generating RTLIL representation for module `\SSPx_Slv'.
/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:145: Warning: Identifier `\Rst_SSP' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:211: Warning: Identifier `\CE_RA' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:221: Warning: Identifier `\CE_WnR' is implicitly declared.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: SSPx_Slv            
Automatically selected SSPx_Slv as design top module.

2.2. Analyzing design hierarchy..
Top module:  \SSPx_Slv

2.3. Analyzing design hierarchy..
Top module:  \SSPx_Slv
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:245$17 in module SSPx_Slv.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:235$15 in module SSPx_Slv.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:223$13 in module SSPx_Slv.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:213$11 in module SSPx_Slv.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:184$9 in module SSPx_Slv.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:169$6 in module SSPx_Slv.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:158$4 in module SSPx_Slv.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:147$3 in module SSPx_Slv.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 4 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \Rst in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:235$15'.
Found async reset \Rst_SSP in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:223$13'.
Found async reset \Rst_SSP in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:213$11'.
Found async reset \Rst_SSP in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:184$9'.
Found async reset \SSP_Rst in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:169$6'.
Found async reset \SSP_Rst in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:158$4'.
Found async reset \Rst_SSP in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:147$3'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:245$17'.
     1/1: $0\MISO[0:0]
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:235$15'.
     1/1: $0\rDO[11:0]
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:233$14'.
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:223$13'.
     1/1: $0\WnR[0:0]
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:213$11'.
     1/1: $0\RA[2:0]
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:184$9'.
     1/15: $0\RDI[14:0] [14]
     2/15: $0\RDI[14:0] [0]
     3/15: $0\RDI[14:0] [1]
     4/15: $0\RDI[14:0] [2]
     5/15: $0\RDI[14:0] [3]
     6/15: $0\RDI[14:0] [4]
     7/15: $0\RDI[14:0] [5]
     8/15: $0\RDI[14:0] [6]
     9/15: $0\RDI[14:0] [7]
    10/15: $0\RDI[14:0] [8]
    11/15: $0\RDI[14:0] [9]
    12/15: $0\RDI[14:0] [10]
    13/15: $0\RDI[14:0] [11]
    14/15: $0\RDI[14:0] [12]
    15/15: $0\RDI[14:0] [13]
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:169$6'.
     1/1: $0\EOC[0:0]
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:158$4'.
     1/1: $0\BC[3:0]
Creating decoders for process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:147$3'.
     1/1: $0\SSP_Rst[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\SSPx_Slv.\MISO' from process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:245$17'.
No latch inferred for signal `\SSPx_Slv.\DI' from process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:233$14'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SSPx_Slv.\rDO' using process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:235$15'.
  created $adff cell `$procdff$194' with negative edge clock and positive level reset.
Creating register for signal `\SSPx_Slv.\WnR' using process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:223$13'.
  created $adff cell `$procdff$195' with negative edge clock and positive level reset.
Creating register for signal `\SSPx_Slv.\RA' using process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:213$11'.
  created $adff cell `$procdff$196' with negative edge clock and positive level reset.
Creating register for signal `\SSPx_Slv.\RDI' using process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:184$9'.
  created $adff cell `$procdff$197' with positive edge clock and positive level reset.
Creating register for signal `\SSPx_Slv.\EOC' using process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:169$6'.
  created $adff cell `$procdff$198' with negative edge clock and positive level reset.
Creating register for signal `\SSPx_Slv.\BC' using process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:158$4'.
  created $adff cell `$procdff$199' with negative edge clock and positive level reset.
Creating register for signal `\SSPx_Slv.\SSP_Rst' using process `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:147$3'.
  created $adff cell `$procdff$200' with positive edge clock and positive level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:245$17'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:245$17'.
Found and cleaned up 1 empty switch in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:235$15'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:235$15'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:233$14'.
Found and cleaned up 2 empty switches in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:223$13'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:223$13'.
Found and cleaned up 1 empty switch in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:213$11'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:213$11'.
Found and cleaned up 1 empty switch in `\SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:184$9'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:184$9'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:169$6'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:158$4'.
Removing empty process `SSPx_Slv.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ssp_slv.v:147$3'.
Cleaned up 6 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module SSPx_Slv.
<suppressed ~2 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module SSPx_Slv.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SSPx_Slv'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SSPx_Slv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SSPx_Slv.
    New ctrl vector for $pmux cell $procmux$18: { $auto$opt_reduce.cc:134:opt_mux$202 $procmux$148_CMP $procmux$135_CMP $procmux$123_CMP $procmux$112_CMP $procmux$102_CMP $procmux$93_CMP $procmux$85_CMP $procmux$78_CMP $procmux$72_CMP $procmux$67_CMP $procmux$63_CMP $procmux$19_CMP }
  Optimizing cells in module \SSPx_Slv.
Performed a total of 1 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SSPx_Slv'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$194 ($adff) from module SSPx_Slv (D = \DO, Q = \rDO).
Adding EN signal on $procdff$195 ($adff) from module SSPx_Slv (D = $procmux$40_Y, Q = \WnR).
Adding EN signal on $procdff$196 ($adff) from module SSPx_Slv (D = \RDI [14:12], Q = \RA).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [14]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [0]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [1]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [2]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [3]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [4]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [5]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [6]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [7]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [8]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [9]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [10]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [11]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [12]).
Adding EN signal on $procdff$197 ($adff) from module SSPx_Slv (D = \MOSI, Q = \RDI [13]).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SSPx_Slv..
Removed 17 unused cells and 53 unused wires.
<suppressed ~18 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module SSPx_Slv.
<suppressed ~1 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \SSPx_Slv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \SSPx_Slv.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\SSPx_Slv'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \SSPx_Slv..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module SSPx_Slv.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== SSPx_Slv ===

   Number of wires:                 39
   Number of wire bits:            125
   Number of public wires:          18
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     $add                            1
     $adff                           3
     $adffe                         18
     $eq                            15
     $logic_not                      1
     $mux                            2
     $not                            1
     $or                             2
     $pmux                           1
     $reduce_bool                    1
     $reduce_or                      1

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 23e6fbf1ef, CPU: user 0.04s system 0.00s, MEM: 11.63 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 24% 4x opt_expr (0 sec), 24% 2x read_verilog (0 sec), ...
