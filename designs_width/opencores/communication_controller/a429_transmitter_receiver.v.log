
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v' to AST representation.
Generating RTLIL representation for module `\a429_rx_iface'.
Generating RTLIL representation for module `\a429_tx_iface'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: a429_tx_iface       
root of   0 design levels: a429_rx_iface       
Automatically selected a429_tx_iface as design top module.

2.2. Analyzing design hierarchy..
Top module:  \a429_tx_iface

2.3. Analyzing design hierarchy..
Top module:  \a429_tx_iface
Removing unused module `\a429_rx_iface'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 7 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43 in module a429_tx_iface.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:217$32 in module a429_tx_iface.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:211$29 in module a429_tx_iface.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 2 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:207$55'.
  Set init value: \clk429_counter = 8'00000000
Found init rule in `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:206$54'.
  Set init value: \clk429 = 1'0

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43'.
Found async reset \reset in `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:217$32'.
Found async reset \reset in `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:211$29'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:207$55'.
Creating decoders for process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:206$54'.
Creating decoders for process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43'.
     1/4: $0\gap_counter[6:0]
     2/4: $0\shift_counter[4:0]
     3/4: $0\shift_reg[31:0]
     4/4: $0\state[1:0]
Creating decoders for process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:217$32'.
     1/1: $0\clk429_counter[7:0]
Creating decoders for process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:211$29'.
     1/1: $0\clk429[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\a429_tx_iface.\state' using process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43'.
  created $adff cell `$procdff$117' with positive edge clock and positive level reset.
Creating register for signal `\a429_tx_iface.\shift_reg' using process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43'.
  created $adff cell `$procdff$118' with positive edge clock and positive level reset.
Creating register for signal `\a429_tx_iface.\shift_counter' using process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43'.
  created $adff cell `$procdff$119' with positive edge clock and positive level reset.
Creating register for signal `\a429_tx_iface.\gap_counter' using process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43'.
  created $adff cell `$procdff$120' with positive edge clock and positive level reset.
Creating register for signal `\a429_tx_iface.\clk429_counter' using process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:217$32'.
  created $adff cell `$procdff$121' with positive edge clock and positive level reset.
Creating register for signal `\a429_tx_iface.\clk429' using process `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:211$29'.
  created $adff cell `$procdff$122' with positive edge clock and positive level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:207$55'.
Removing empty process `a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:206$54'.
Found and cleaned up 7 empty switches in `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43'.
Removing empty process `a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:260$43'.
Found and cleaned up 1 empty switch in `\a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:217$32'.
Removing empty process `a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:217$32'.
Removing empty process `a429_tx_iface.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/a429_transmitter_receiver.v:211$29'.
Cleaned up 8 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module a429_tx_iface.
<suppressed ~10 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module a429_tx_iface.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a429_tx_iface'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a429_tx_iface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a429_tx_iface.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a429_tx_iface'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$117 ($adff) from module a429_tx_iface (D = $procmux$112_Y, Q = \state).
Adding EN signal on $procdff$118 ($adff) from module a429_tx_iface (D = $procmux$96_Y, Q = \shift_reg).
Adding EN signal on $procdff$119 ($adff) from module a429_tx_iface (D = $procmux$86_Y, Q = \shift_counter).
Adding EN signal on $procdff$120 ($adff) from module a429_tx_iface (D = $procmux$73_Y, Q = \gap_counter).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a429_tx_iface..
Removed 2 unused cells and 42 unused wires.
<suppressed ~3 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module a429_tx_iface.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a429_tx_iface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a429_tx_iface.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a429_tx_iface'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a429_tx_iface..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module a429_tx_iface.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \a429_tx_iface..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \a429_tx_iface.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\a429_tx_iface'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \a429_tx_iface..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module a429_tx_iface.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== a429_tx_iface ===

   Number of wires:                 66
   Number of wire bits:            378
   Number of public wires:          22
   Number of public wire bits:     154
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 56
     $add                            1
     $adff                           2
     $adffe                          4
     $and                            1
     $eq                             2
     $ge                             1
     $gt                             1
     $logic_not                      1
     $lt                             2
     $mux                           20
     $ne                             7
     $not                            1
     $pmux                           4
     $reduce_and                     4
     $reduce_or                      2
     $sub                            3

End of script. Logfile hash: 62b4e0ab54, CPU: user 0.05s system 0.00s, MEM: 11.78 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 23% 5x opt_expr (0 sec), 23% 3x opt_dff (0 sec), ...
