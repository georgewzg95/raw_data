
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v' to AST representation.
Generating RTLIL representation for module `\APB_SLAVE'.
/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:125: Warning: Identifier `\write_en' is implicitly declared.
/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:126: Warning: Identifier `\read_en' is implicitly declared.
Generating RTLIL representation for module `\APB_SPI_top'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: APB_SPI_top         
root of   0 design levels: APB_SLAVE           
Automatically selected APB_SPI_top as design top module.

2.2. Analyzing design hierarchy..
Top module:  \APB_SPI_top
Used module:     \APB_SLAVE

2.3. Analyzing design hierarchy..
Top module:  \APB_SPI_top
Used module:     \APB_SLAVE
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 2 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8 in module APB_SLAVE.
Marked 5 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8 in module APB_SLAVE.
Marked 4 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:89$1 in module APB_SLAVE.
Removed a total of 2 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \PRESETn in `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
Found async reset \PRESETn in `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:89$1'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
     1/9: $0\SPI_DATA_Reg_4[7:0]
     2/9: $0\SPI_DATA_Reg_3[7:0]
     3/9: $0\SPI_DATA_Reg_2[7:0]
     4/9: $0\SPI_DATA_Reg_1[7:0]
     5/9: $0\SPI_ST_R[7:0]
     6/9: $0\SPI_BR_R[7:0]
     7/9: $0\SPI_CR_2[7:0]
     8/9: $0\SPI_CR_1[7:0]
     9/9: $0\PRDATA[7:0]
Creating decoders for process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:89$1'.
     1/2: $0\PREADY[0:0]
     2/2: $0\STATE[1:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\APB_SLAVE.\PRDATA' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$127' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\SPI_CR_1' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$128' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\SPI_CR_2' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$129' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\SPI_BR_R' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$130' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\SPI_ST_R' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$131' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\SPI_DATA_Reg_1' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$132' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\SPI_DATA_Reg_2' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$133' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\SPI_DATA_Reg_3' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$134' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\SPI_DATA_Reg_4' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
  created $adff cell `$procdff$135' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\PREADY' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:89$1'.
  created $adff cell `$procdff$136' with positive edge clock and negative level reset.
Creating register for signal `\APB_SLAVE.\STATE' using process `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:89$1'.
  created $adff cell `$procdff$137' with positive edge clock and negative level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
Removing empty process `APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:129$8'.
Found and cleaned up 4 empty switches in `\APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:89$1'.
Removing empty process `APB_SLAVE.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/apb2spi.v:89$1'.
Cleaned up 8 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module APB_SPI_top.
Optimizing module APB_SLAVE.
<suppressed ~4 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module APB_SPI_top.
Optimizing module APB_SLAVE.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APB_SPI_top'.
Finding identical cells in module `\APB_SLAVE'.
<suppressed ~36 debug messages>
Removed a total of 12 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \APB_SPI_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \APB_SLAVE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \APB_SPI_top.
  Optimizing cells in module \APB_SLAVE.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APB_SPI_top'.
Finding identical cells in module `\APB_SLAVE'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$127 ($adff) from module APB_SLAVE (D = $procmux$96_Y, Q = \PRDATA).
Adding EN signal on $procdff$128 ($adff) from module APB_SLAVE (D = \PWDATA, Q = \SPI_CR_1).
Adding EN signal on $procdff$129 ($adff) from module APB_SLAVE (D = \PWDATA, Q = \SPI_CR_2).
Adding EN signal on $procdff$130 ($adff) from module APB_SLAVE (D = \PWDATA, Q = \SPI_BR_R).
Adding EN signal on $procdff$131 ($adff) from module APB_SLAVE (D = \PWDATA, Q = \SPI_ST_R).
Adding EN signal on $procdff$132 ($adff) from module APB_SLAVE (D = \PWDATA, Q = \SPI_DATA_Reg_1).
Adding EN signal on $procdff$133 ($adff) from module APB_SLAVE (D = \PWDATA, Q = \SPI_DATA_Reg_2).
Adding EN signal on $procdff$134 ($adff) from module APB_SLAVE (D = \PWDATA, Q = \SPI_DATA_Reg_3).
Adding EN signal on $procdff$135 ($adff) from module APB_SLAVE (D = \PWDATA, Q = \SPI_DATA_Reg_4).
Adding EN signal on $procdff$137 ($adff) from module APB_SLAVE (D = $procmux$117_Y, Q = \STATE).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APB_SPI_top..
Finding unused cells or wires in module \APB_SLAVE..
Removed 19 unused cells and 57 unused wires.
<suppressed ~20 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module APB_SLAVE.
<suppressed ~1 debug messages>
Optimizing module APB_SPI_top.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \APB_SLAVE..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \APB_SPI_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \APB_SLAVE.
  Optimizing cells in module \APB_SPI_top.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\APB_SLAVE'.
Finding identical cells in module `\APB_SPI_top'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \APB_SLAVE..
Finding unused cells or wires in module \APB_SPI_top..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module APB_SLAVE.
Optimizing module APB_SPI_top.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== APB_SLAVE ===

   Number of wires:                 51
   Number of wire bits:            135
   Number of public wires:          21
   Number of public wire bits:      94
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $adff                           1
     $adffe                         10
     $eq                             9
     $logic_and                      3
     $logic_not                      3
     $mux                            4
     $not                            1
     $pmux                           2
     $reduce_and                     9
     $reduce_bool                    1

=== APB_SPI_top ===

   Number of wires:                 14
   Number of wire bits:             30
   Number of public wires:          14
   Number of public wire bits:      30
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     APB_SLAVE                       1

=== design hierarchy ===

   APB_SPI_top                       1
     APB_SLAVE                       1

   Number of wires:                 65
   Number of wire bits:            165
   Number of public wires:          35
   Number of public wire bits:     124
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 43
     $adff                           1
     $adffe                         10
     $eq                             9
     $logic_and                      3
     $logic_not                      3
     $mux                            4
     $not                            1
     $pmux                           2
     $reduce_and                     9
     $reduce_bool                    1

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 83875f2212, CPU: user 0.04s system 0.00s, MEM: 11.61 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 29% 4x opt_expr (0 sec), 19% 3x opt_merge (0 sec), ...
