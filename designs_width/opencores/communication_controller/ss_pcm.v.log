
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v' to AST representation.
Generating RTLIL representation for module `\pcm_slv_top'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: pcm_slv_top         
Automatically selected pcm_slv_top as design top module.

2.2. Analyzing design hierarchy..
Top module:  \pcm_slv_top

2.3. Analyzing design hierarchy..
Top module:  \pcm_slv_top
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:211$36 in module pcm_slv_top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:206$34 in module pcm_slv_top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:179$23 in module pcm_slv_top.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:170$21 in module pcm_slv_top.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:163$19 in module pcm_slv_top.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 7 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:211$36'.
     1/1: $0\rx_reg[15:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:206$34'.
     1/1: $0\rx_hold_reg[15:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:201$31'.
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:198$30'.
     1/1: $0\rxd_t[0:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:194$29'.
     1/1: $0\tx_go_r2[0:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:191$28'.
     1/1: $0\tx_go_r1[0:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:179$23'.
     1/1: $0\tx_cnt[3:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:170$21'.
     1/1: $0\tx_hold_reg[15:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:163$19'.
     1/1: $0\tx_go[0:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:160$18'.
     1/1: $0\tx_hold_byte_l[7:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:157$17'.
     1/1: $0\tx_hold_byte_h[7:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:147$13'.
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:144$12'.
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:141$10'.
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:138$9'.
     1/1: $0\psa[7:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:135$8'.
     1/1: $0\pcm_sync_r1[0:0]
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:124$3'.
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:121$2'.
Creating decoders for process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:118$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pcm_slv_top.\rx_reg' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:211$36'.
  created $dff cell `$procdff$87' with positive edge clock.
Creating register for signal `\pcm_slv_top.\rx_hold_reg' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:206$34'.
  created $dff cell `$procdff$88' with positive edge clock.
Creating register for signal `\pcm_slv_top.\rxd' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:201$31'.
  created $dff cell `$procdff$89' with positive edge clock.
Creating register for signal `\pcm_slv_top.\rxd_t' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:198$30'.
  created $dff cell `$procdff$90' with positive edge clock.
Creating register for signal `\pcm_slv_top.\tx_go_r2' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:194$29'.
  created $dff cell `$procdff$91' with positive edge clock.
Creating register for signal `\pcm_slv_top.\tx_go_r1' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:191$28'.
  created $dff cell `$procdff$92' with positive edge clock.
Creating register for signal `\pcm_slv_top.\tx_cnt' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:179$23'.
  created $dff cell `$procdff$93' with positive edge clock.
Creating register for signal `\pcm_slv_top.\tx_hold_reg' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:170$21'.
  created $dff cell `$procdff$94' with positive edge clock.
Creating register for signal `\pcm_slv_top.\tx_go' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:163$19'.
  created $dff cell `$procdff$95' with positive edge clock.
Creating register for signal `\pcm_slv_top.\tx_hold_byte_l' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:160$18'.
  created $dff cell `$procdff$96' with positive edge clock.
Creating register for signal `\pcm_slv_top.\tx_hold_byte_h' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:157$17'.
  created $dff cell `$procdff$97' with positive edge clock.
Creating register for signal `\pcm_slv_top.\psync' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:147$13'.
  created $dff cell `$procdff$98' with positive edge clock.
Creating register for signal `\pcm_slv_top.\pcm_sync_r3' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:144$12'.
  created $dff cell `$procdff$99' with positive edge clock.
Creating register for signal `\pcm_slv_top.\pcm_sync_r2' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:141$10'.
  created $dff cell `$procdff$100' with positive edge clock.
Creating register for signal `\pcm_slv_top.\psa' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:138$9'.
  created $dff cell `$procdff$101' with positive edge clock.
Creating register for signal `\pcm_slv_top.\pcm_sync_r1' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:135$8'.
  created $dff cell `$procdff$102' with positive edge clock.
Creating register for signal `\pcm_slv_top.\pclk_r' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:124$3'.
  created $dff cell `$procdff$103' with positive edge clock.
Creating register for signal `\pcm_slv_top.\pclk_s' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:121$2'.
  created $dff cell `$procdff$104' with positive edge clock.
Creating register for signal `\pcm_slv_top.\pclk_t' using process `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:118$1'.
  created $dff cell `$procdff$105' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:211$36'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:211$36'.
Found and cleaned up 2 empty switches in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:206$34'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:206$34'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:201$31'.
Found and cleaned up 1 empty switch in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:198$30'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:198$30'.
Found and cleaned up 1 empty switch in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:194$29'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:194$29'.
Found and cleaned up 1 empty switch in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:191$28'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:191$28'.
Found and cleaned up 2 empty switches in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:179$23'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:179$23'.
Found and cleaned up 3 empty switches in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:170$21'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:170$21'.
Found and cleaned up 3 empty switches in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:163$19'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:163$19'.
Found and cleaned up 1 empty switch in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:160$18'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:160$18'.
Found and cleaned up 1 empty switch in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:157$17'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:157$17'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:147$13'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:144$12'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:141$10'.
Found and cleaned up 1 empty switch in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:138$9'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:138$9'.
Found and cleaned up 1 empty switch in `\pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:135$8'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:135$8'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:124$3'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:121$2'.
Removing empty process `pcm_slv_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:118$1'.
Cleaned up 19 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pcm_slv_top.
<suppressed ~5 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pcm_slv_top.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pcm_slv_top'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pcm_slv_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pcm_slv_top.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pcm_slv_top'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$102 ($dff) from module pcm_slv_top (D = \pcm_sync_i, Q = \pcm_sync_r1).
Adding SRST signal on $procdff$87 ($dff) from module pcm_slv_top (D = $procmux$42_Y, Q = \rx_reg, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$107 ($sdff) from module pcm_slv_top (D = \rx_hold_reg, Q = \rx_reg).
Adding SRST signal on $procdff$88 ($dff) from module pcm_slv_top (D = $procmux$47_Y, Q = \rx_hold_reg, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$109 ($sdff) from module pcm_slv_top (D = { \rx_hold_reg [14:0] \rxd }, Q = \rx_hold_reg).
Adding EN signal on $procdff$90 ($dff) from module pcm_slv_top (D = \pcm_din_i, Q = \rxd_t).
Adding EN signal on $procdff$91 ($dff) from module pcm_slv_top (D = \tx_go_r1, Q = \tx_go_r2).
Adding EN signal on $procdff$92 ($dff) from module pcm_slv_top (D = \tx_go, Q = \tx_go_r1).
Adding SRST signal on $procdff$93 ($dff) from module pcm_slv_top (D = $procmux$58_Y, Q = \tx_cnt, rval = 4'0000).
Adding EN signal on $auto$ff.cc:262:slice$114 ($sdff) from module pcm_slv_top (D = $add$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/ss_pcm.v:182$25_Y, Q = \tx_cnt).
Adding SRST signal on $procdff$94 ($dff) from module pcm_slv_top (D = $procmux$66_Y, Q = \tx_hold_reg, rval = 16'0000000000000000).
Adding EN signal on $auto$ff.cc:262:slice$116 ($sdff) from module pcm_slv_top (D = $procmux$66_Y, Q = \tx_hold_reg).
Adding SRST signal on $procdff$95 ($dff) from module pcm_slv_top (D = $procmux$74_Y, Q = \tx_go, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$120 ($sdff) from module pcm_slv_top (D = $procmux$74_Y, Q = \tx_go).
Adding EN signal on $procdff$96 ($dff) from module pcm_slv_top (D = \din_i, Q = \tx_hold_byte_l).
Adding EN signal on $procdff$97 ($dff) from module pcm_slv_top (D = \din_i, Q = \tx_hold_byte_h).
Adding EN signal on $procdff$101 ($dff) from module pcm_slv_top (D = { \psa [6:0] \pcm_sync_r1 }, Q = \psa).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pcm_slv_top..
Removed 17 unused cells and 65 unused wires.
<suppressed ~19 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pcm_slv_top.
<suppressed ~2 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pcm_slv_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pcm_slv_top.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pcm_slv_top'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pcm_slv_top..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pcm_slv_top.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== pcm_slv_top ===

   Number of wires:                 51
   Number of wire bits:            170
   Number of public wires:          34
   Number of public wire bits:     120
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $add                            1
     $and                            8
     $dff                            7
     $dffe                           6
     $eq                             1
     $logic_not                      4
     $mux                            5
     $or                             1
     $reduce_bool                    2
     $sdffe                          5
     $shiftx                         1

End of script. Logfile hash: 329a6830ca, CPU: user 0.06s system 0.00s, MEM: 11.66 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 35% 4x opt_expr (0 sec), 21% 2x read_verilog (0 sec), ...
