
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/spigpio.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/spigpio.v' to AST representation.
Generating RTLIL representation for module `\spigpio'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: spigpio             
Automatically selected spigpio as design top module.

2.2. Analyzing design hierarchy..
Top module:  \spigpio

2.3. Analyzing design hierarchy..
Top module:  \spigpio
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\spigpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/spigpio.v:92$1'.
     1/15: $0\sr[15:0] [7:1]
     2/15: $0\sr[15:0] [0]
     3/15: $0\gpioout[9:0] [6]
     4/15: $0\gpioout[9:0] [5]
     5/15: $0\gpioout[9:0] [4]
     6/15: $0\gpioout[9:0] [3]
     7/15: $0\gpioout[9:0] [2]
     8/15: $0\gpioout[9:0] [1]
     9/15: $0\gpioout[9:0] [0]
    10/15: $0\gpioout[9:0] [8]
    11/15: $0\gpioout[9:0] [7]
    12/15: $0\gpioout[9:0] [9]
    13/15: $0\ram[7:0]
    14/15: $0\sr[15:0] [15:8]
    15/15: $0\sr_out[0:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\spigpio.\sr_out' using process `\spigpio.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/spigpio.v:92$1'.
ERROR: Multiple edge sensitive events found for this signal!
