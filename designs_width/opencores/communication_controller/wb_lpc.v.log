
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v' to AST representation.
Warning: Encountered `full_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `full_case' attribute or the SystemVerilog `unique' or `unique0' keywords is recommended!
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\serirq_host'.
Generating RTLIL representation for module `\serirq_slave'.
Generating RTLIL representation for module `\wb_dreq_host'.
Generating RTLIL representation for module `\wb_dreq_periph'.
Generating RTLIL representation for module `\wb_lpc_host'.
Generating RTLIL representation for module `\wb_lpc_periph'.
Generating RTLIL representation for module `\wb_regfile'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: wb_regfile          
root of   0 design levels: wb_lpc_periph       
root of   0 design levels: wb_lpc_host         
root of   0 design levels: wb_dreq_periph      
root of   0 design levels: wb_dreq_host        
root of   0 design levels: serirq_slave        
root of   0 design levels: serirq_host         
Automatically selected wb_regfile as design top module.

2.2. Analyzing design hierarchy..
Top module:  \wb_regfile

2.3. Analyzing design hierarchy..
Top module:  \wb_regfile
Removing unused module `\wb_lpc_periph'.
Removing unused module `\wb_lpc_host'.
Removing unused module `\wb_dreq_periph'.
Removing unused module `\wb_dreq_host'.
Removing unused module `\serirq_slave'.
Removing unused module `\serirq_host'.
Removed 6 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1668$179 in module wb_regfile.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176 in module wb_regfile.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \nrst_i in `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1668$179'.
Found async reset \nrst_i in `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1668$179'.
     1/2: $1\waitstate[7:0]
     2/2: $1\wb_ack_o[0:0]
Creating decoders for process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1637$178'.
     1/3: $1\wb_dat_o[31:0] [31:16]
     2/3: $1\wb_dat_o[31:0] [7:0]
     3/3: $1\wb_dat_o[31:0] [15:8]
Creating decoders for process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
     1/11: $0\datareg0_3[7:0]
     2/11: $0\datareg1_2[7:0]
     3/11: $0\datareg1_1[7:0]
     4/11: $0\datareg1_0[7:0]
     5/11: $0\datareg0_2[7:0]
     6/11: $0\datareg0_1[7:0]
     7/11: $0\datareg0_0[7:0]
     8/11: $0\datareg1_3[7:0]
     9/11: $0\waitstate[7:0]
    10/11: $0\wb_ack_o[0:0]
    11/11: $0\wb_dat_o[31:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\wb_regfile.\wb_ack_o' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1668$179'.
  created $dff cell `$procdff$402' with positive edge clock.
Creating register for signal `\wb_regfile.\waitstate' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1668$179'.
  created $dff cell `$procdff$405' with positive edge clock.
Creating register for signal `\wb_regfile.\wb_dat_o' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1637$178'.
  created $dff cell `$procdff$406' with positive edge clock.
Creating register for signal `\wb_regfile.\wb_dat_o' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$407' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\wb_ack_o' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$408' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\waitstate' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$409' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\datareg0_0' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$410' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\datareg0_1' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$411' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\datareg0_2' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$412' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\datareg0_3' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$413' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\datareg1_0' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$414' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\datareg1_1' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$415' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\datareg1_2' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$416' with positive edge clock and negative level reset.
Creating register for signal `\wb_regfile.\datareg1_3' using process `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
  created $adff cell `$procdff$417' with positive edge clock and negative level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 6 empty switches in `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1668$179'.
Removing empty process `wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1668$179'.
Found and cleaned up 3 empty switches in `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1637$178'.
Removing empty process `wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1637$178'.
Found and cleaned up 4 empty switches in `\wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
Removing empty process `wb_regfile.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/wb_lpc.v:1585$176'.
Cleaned up 13 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module wb_regfile.
<suppressed ~16 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module wb_regfile.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wb_regfile'.
<suppressed ~150 debug messages>
Removed a total of 50 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wb_regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wb_regfile.
    New ctrl vector for $pmux cell $procmux$239: $auto$opt_reduce.cc:134:opt_mux$419
    New ctrl vector for $pmux cell $procmux$360: { $procmux$397_CMP $procmux$393_CMP $auto$opt_reduce.cc:134:opt_mux$421 }
    New ctrl vector for $pmux cell $procmux$335: { $procmux$397_CMP $procmux$393_CMP $auto$opt_reduce.cc:134:opt_mux$423 }
    New ctrl vector for $pmux cell $procmux$214: { $procmux$397_CMP $procmux$393_CMP $auto$opt_reduce.cc:134:opt_mux$425 }
  Optimizing cells in module \wb_regfile.
Performed a total of 4 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wb_regfile'.
<suppressed ~39 debug messages>
Removed a total of 13 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$402 ($dff) from module wb_regfile (D = $procmux$210_Y, Q = \wb_ack_o).
Handling D = Q on $procdff$407 ($adff) from module wb_regfile (removing D path).
Setting constant 0-bit at position 0 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 1 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 2 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 3 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 4 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 5 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 6 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 7 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 8 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 9 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 10 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 11 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 12 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 13 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 14 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 15 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 16 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 17 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 18 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 19 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 20 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 21 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 22 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 23 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 24 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 25 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 26 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 27 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 28 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 29 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 30 on $procdff$407 ($adff) from module wb_regfile.
Setting constant 0-bit at position 31 on $procdff$407 ($adff) from module wb_regfile.
Handling D = Q on $procdff$408 ($adff) from module wb_regfile (removing D path).
Setting constant 0-bit at position 0 on $procdff$408 ($adff) from module wb_regfile.
Handling D = Q on $procdff$409 ($adff) from module wb_regfile (removing D path).
Setting constant 0-bit at position 0 on $procdff$409 ($adff) from module wb_regfile.
Setting constant 0-bit at position 1 on $procdff$409 ($adff) from module wb_regfile.
Setting constant 0-bit at position 2 on $procdff$409 ($adff) from module wb_regfile.
Setting constant 0-bit at position 3 on $procdff$409 ($adff) from module wb_regfile.
Setting constant 0-bit at position 4 on $procdff$409 ($adff) from module wb_regfile.
Setting constant 0-bit at position 5 on $procdff$409 ($adff) from module wb_regfile.
Setting constant 0-bit at position 6 on $procdff$409 ($adff) from module wb_regfile.
Setting constant 0-bit at position 7 on $procdff$409 ($adff) from module wb_regfile.
Adding EN signal on $procdff$410 ($adff) from module wb_regfile (D = $procmux$360_Y, Q = \datareg0_0).
Adding EN signal on $procdff$411 ($adff) from module wb_regfile (D = $procmux$335_Y, Q = \datareg0_1).
Adding EN signal on $procdff$412 ($adff) from module wb_regfile (D = $procmux$313_Y, Q = \datareg0_2).
Adding EN signal on $procdff$413 ($adff) from module wb_regfile (D = $procmux$242_Y, Q = \datareg0_3).
Adding EN signal on $procdff$414 ($adff) from module wb_regfile (D = $procmux$302_Y, Q = \datareg1_0).
Adding EN signal on $procdff$415 ($adff) from module wb_regfile (D = $procmux$284_Y, Q = \datareg1_1).
Adding EN signal on $procdff$416 ($adff) from module wb_regfile (D = $procmux$268_Y, Q = \datareg1_2).
Adding EN signal on $procdff$417 ($adff) from module wb_regfile (D = $procmux$392_Y, Q = \datareg1_3).
Adding EN signal on $procdff$405 ($dff) from module wb_regfile (D = $procmux$197_Y, Q = \waitstate).
Adding EN signal on $procdff$406 ($dff) from module wb_regfile (D = \datareg0_1, Q = \wb_dat_o [15:8]).
Adding EN signal on $procdff$406 ($dff) from module wb_regfile (D = { \datareg0_3 \datareg0_2 }, Q = \wb_dat_o [31:16]).
Adding EN signal on $procdff$406 ($dff) from module wb_regfile (D = $procmux$214_Y, Q = \wb_dat_o [7:0]).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wb_regfile..
Warning: Driver-driver conflict for \wb_ack_o between cell $auto$ff.cc:262:slice$426.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [7] between cell $auto$ff.cc:262:slice$480.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [6] between cell $auto$ff.cc:262:slice$480.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [5] between cell $auto$ff.cc:262:slice$480.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [4] between cell $auto$ff.cc:262:slice$480.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [3] between cell $auto$ff.cc:262:slice$480.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [2] between cell $auto$ff.cc:262:slice$480.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [1] between cell $auto$ff.cc:262:slice$480.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [0] between cell $auto$ff.cc:262:slice$480.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [15] between cell $auto$ff.cc:262:slice$478.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [14] between cell $auto$ff.cc:262:slice$478.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [13] between cell $auto$ff.cc:262:slice$478.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [12] between cell $auto$ff.cc:262:slice$478.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [11] between cell $auto$ff.cc:262:slice$478.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [10] between cell $auto$ff.cc:262:slice$478.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [9] between cell $auto$ff.cc:262:slice$478.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [8] between cell $auto$ff.cc:262:slice$478.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [31] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [30] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [29] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [28] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [27] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [26] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [25] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [24] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [23] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [22] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [21] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [20] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [19] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [18] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [17] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Warning: Driver-driver conflict for \wb_dat_o [16] between cell $auto$ff.cc:262:slice$479.Q and constant 1'0 in wb_regfile: Resolved using constant.
Removed 42 unused cells and 134 unused wires.
<suppressed ~43 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module wb_regfile.
<suppressed ~9 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wb_regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wb_regfile.
    New ctrl vector for $pmux cell $procmux$242: { $auto$opt_reduce.cc:134:opt_mux$484 $procmux$213_CMP }
    New ctrl vector for $pmux cell $procmux$268: $auto$opt_reduce.cc:134:opt_mux$486
    New ctrl vector for $pmux cell $procmux$284: $auto$opt_reduce.cc:134:opt_mux$488
    New ctrl vector for $pmux cell $procmux$302: $auto$opt_reduce.cc:134:opt_mux$490
    New ctrl vector for $pmux cell $procmux$313: { $auto$opt_reduce.cc:134:opt_mux$492 $procmux$213_CMP }
    New ctrl vector for $pmux cell $procmux$335: { $auto$opt_reduce.cc:134:opt_mux$494 $auto$opt_reduce.cc:134:opt_mux$419 }
    New ctrl vector for $pmux cell $procmux$360: { $auto$opt_reduce.cc:134:opt_mux$496 $auto$opt_reduce.cc:134:opt_mux$419 }
    New ctrl vector for $pmux cell $procmux$392: $auto$opt_reduce.cc:134:opt_mux$498
  Optimizing cells in module \wb_regfile.
Performed a total of 8 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wb_regfile'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $auto$ff.cc:262:slice$463 ($adffe) from module wb_regfile (D = $procmux$268_Y, Q = \datareg1_2).
Adding EN signal on $auto$ff.cc:262:slice$458 ($adffe) from module wb_regfile (D = $procmux$284_Y, Q = \datareg1_1).
Adding EN signal on $auto$ff.cc:262:slice$453 ($adffe) from module wb_regfile (D = $procmux$302_Y, Q = \datareg1_0).
Adding EN signal on $auto$ff.cc:262:slice$448 ($adffe) from module wb_regfile (D = $procmux$242_Y, Q = \datareg0_3).
Adding EN signal on $auto$ff.cc:262:slice$443 ($adffe) from module wb_regfile (D = $procmux$313_Y, Q = \datareg0_2).
Adding EN signal on $auto$ff.cc:262:slice$438 ($adffe) from module wb_regfile (D = $procmux$335_Y, Q = \datareg0_1).
Adding EN signal on $auto$ff.cc:262:slice$433 ($adffe) from module wb_regfile (D = $procmux$360_Y, Q = \datareg0_0).
Adding EN signal on $auto$ff.cc:262:slice$468 ($adffe) from module wb_regfile (D = $procmux$392_Y, Q = \datareg1_3).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wb_regfile..
Removed 0 unused cells and 17 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module wb_regfile.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wb_regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wb_regfile.
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$538: { \wb_wr $auto$opt_dff.cc:197:make_patterns_logic$535 $auto$opt_dff.cc:197:make_patterns_logic$454 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$528: { \wb_wr $auto$opt_dff.cc:197:make_patterns_logic$525 $auto$opt_dff.cc:197:make_patterns_logic$434 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$518: { \wb_wr $auto$opt_dff.cc:197:make_patterns_logic$515 $auto$opt_dff.cc:197:make_patterns_logic$444 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$508: { \wb_wr $auto$opt_dff.cc:197:make_patterns_logic$505 $auto$opt_dff.cc:197:make_patterns_logic$454 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$503: { \wb_wr $auto$opt_dff.cc:197:make_patterns_logic$500 $auto$opt_dff.cc:197:make_patterns_logic$454 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$533: { \wb_wr $auto$opt_dff.cc:197:make_patterns_logic$530 $auto$opt_dff.cc:197:make_patterns_logic$434 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$513: { \wb_wr $auto$opt_dff.cc:197:make_patterns_logic$510 $auto$opt_dff.cc:197:make_patterns_logic$454 }
    New input vector for $reduce_and cell $auto$opt_dff.cc:223:make_patterns_logic$523: { \wb_wr $auto$opt_dff.cc:197:make_patterns_logic$520 $auto$opt_dff.cc:197:make_patterns_logic$444 }
  Optimizing cells in module \wb_regfile.
Performed a total of 8 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wb_regfile'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wb_regfile..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module wb_regfile.

4.23. Rerunning OPT passes. (Maybe there is more to do..)

4.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \wb_regfile..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~8 debug messages>

4.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \wb_regfile.
Performed a total of 0 changes.

4.26. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\wb_regfile'.
Removed a total of 0 cells.

4.27. Executing OPT_DFF pass (perform DFF optimizations).

4.28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \wb_regfile..

4.29. Executing OPT_EXPR pass (perform const folding).
Optimizing module wb_regfile.

4.30. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== wb_regfile ===

   Number of wires:                 74
   Number of wire bits:            386
   Number of public wires:          25
   Number of public wire bits:     225
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 59
     $adffe                          8
     $and                            2
     $eq                            10
     $logic_not                      2
     $mux                           12
     $ne                             8
     $pmux                           4
     $reduce_and                     8
     $reduce_bool                    3
     $reduce_or                      2

Warnings: 35 unique messages, 35 total
End of script. Logfile hash: 27aecd434b, CPU: user 0.11s system 0.00s, MEM: 15.58 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 41% 2x read_verilog (0 sec), 20% 6x opt_expr (0 sec), ...
