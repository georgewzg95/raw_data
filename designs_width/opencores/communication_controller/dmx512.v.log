
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Generating RTLIL representation for module `\dmx_dpram'.
Generating RTLIL representation for module `\dmx_rx'.
/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:0: Warning: System task `$display' outside initial block is unsupported.
Generating RTLIL representation for module `\dmx_tx'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: dmx_tx              
root of   1 design levels: dmx_rx              
root of   0 design levels: dmx_dpram           
Automatically selected dmx_tx as design top module.

2.2. Analyzing design hierarchy..
Top module:  \dmx_tx
Used module:     \dmx_dpram

2.3. Analyzing design hierarchy..
Top module:  \dmx_tx
Used module:     \dmx_dpram
Removing unused module `\dmx_rx'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74 in module dmx_tx.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:530$73 in module dmx_tx.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:486$70 in module dmx_tx.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:470$67 in module dmx_tx.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:450$66 in module dmx_tx.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:416$62 in module dmx_tx.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:386$58 in module dmx_tx.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3 in module dmx_dpram.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 5 redundant assignments.
Promoted 14 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.
     1/8: $3\next_state[4:0]
     2/8: $2\next_state[4:0]
     3/8: $1\next_state[4:0]
     4/8: $1\break_counter_reset[0:0]
     5/8: $1\acounter_ce[0:0]
     6/8: $1\acounter_reset[0:0]
     7/8: $1\tx_sel[3:0]
     8/8: $1\channel_d_ce[0:0]
Creating decoders for process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:530$73'.
     1/1: $0\state[4:0]
Creating decoders for process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:486$70'.
     1/2: $0\break_done[0:0]
     2/2: $0\break_counter[4:0]
Creating decoders for process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:470$67'.
     1/2: $0\acounter[8:0]
     2/2: $0\frame_done[0:0]
Creating decoders for process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:450$66'.
     1/1: $0\tx_gen[0:0]
Creating decoders for process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:433$65'.
     1/1: $0\channel_d_r[7:0]
Creating decoders for process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:416$62'.
     1/2: $0\ce_counter[8:0]
     2/2: $0\ce[0:0]
Creating decoders for process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:386$58'.
     1/3: $0\csr_do_sel[0:0]
     2/3: $0\csr_do_reg[31:0]
     3/3: $0\thru_en[0:0]
Creating decoders for process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
     1/6: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:43$2_EN[7:0]$16
     2/6: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:43$2_DATA[7:0]$15
     3/6: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:43$2_ADDR[8:0]$14
     4/6: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:40$1_EN[7:0]$12
     5/6: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:40$1_DATA[7:0]$11
     6/6: $1$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:40$1_ADDR[8:0]$10

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\dmx_tx.\next_state' from process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.
No latch inferred for signal `\dmx_tx.\channel_d_ce' from process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.
No latch inferred for signal `\dmx_tx.\tx_sel' from process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.
No latch inferred for signal `\dmx_tx.\acounter_reset' from process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.
No latch inferred for signal `\dmx_tx.\acounter_ce' from process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.
No latch inferred for signal `\dmx_tx.\break_counter_reset' from process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dmx_tx.\state' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:530$73'.
  created $dff cell `$procdff$317' with positive edge clock.
Creating register for signal `\dmx_tx.\break_counter' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:486$70'.
  created $dff cell `$procdff$318' with positive edge clock.
Creating register for signal `\dmx_tx.\break_done' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:486$70'.
  created $dff cell `$procdff$319' with positive edge clock.
Creating register for signal `\dmx_tx.\frame_done' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:470$67'.
  created $dff cell `$procdff$320' with positive edge clock.
Creating register for signal `\dmx_tx.\acounter' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:470$67'.
  created $dff cell `$procdff$321' with positive edge clock.
Creating register for signal `\dmx_tx.\tx_gen' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:450$66'.
  created $dff cell `$procdff$322' with positive edge clock.
Creating register for signal `\dmx_tx.\channel_d_r' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:433$65'.
  created $dff cell `$procdff$323' with positive edge clock.
Creating register for signal `\dmx_tx.\ce' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:416$62'.
  created $dff cell `$procdff$324' with positive edge clock.
Creating register for signal `\dmx_tx.\ce_counter' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:416$62'.
  created $dff cell `$procdff$325' with positive edge clock.
Creating register for signal `\dmx_tx.\thru_en' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:386$58'.
  created $dff cell `$procdff$326' with positive edge clock.
Creating register for signal `\dmx_tx.\csr_do_reg' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:386$58'.
  created $dff cell `$procdff$327' with positive edge clock.
Creating register for signal `\dmx_tx.\csr_do_sel' using process `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:386$58'.
  created $dff cell `$procdff$328' with positive edge clock.
Creating register for signal `\dmx_dpram.\do' using process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
  created $dff cell `$procdff$329' with positive edge clock.
Creating register for signal `\dmx_dpram.\do2' using process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
  created $dff cell `$procdff$330' with positive edge clock.
Creating register for signal `\dmx_dpram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:40$1_ADDR' using process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
  created $dff cell `$procdff$331' with positive edge clock.
Creating register for signal `\dmx_dpram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:40$1_DATA' using process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
  created $dff cell `$procdff$332' with positive edge clock.
Creating register for signal `\dmx_dpram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:40$1_EN' using process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
  created $dff cell `$procdff$333' with positive edge clock.
Creating register for signal `\dmx_dpram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:43$2_ADDR' using process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
  created $dff cell `$procdff$334' with positive edge clock.
Creating register for signal `\dmx_dpram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:43$2_DATA' using process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
  created $dff cell `$procdff$335' with positive edge clock.
Creating register for signal `\dmx_dpram.$memwr$\ram$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:43$2_EN' using process `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
  created $dff cell `$procdff$336' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.
Removing empty process `dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:537$74'.
Found and cleaned up 2 empty switches in `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:530$73'.
Removing empty process `dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:530$73'.
Found and cleaned up 3 empty switches in `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:486$70'.
Removing empty process `dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:486$70'.
Found and cleaned up 3 empty switches in `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:470$67'.
Removing empty process `dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:470$67'.
Found and cleaned up 1 empty switch in `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:450$66'.
Removing empty process `dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:450$66'.
Found and cleaned up 1 empty switch in `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:433$65'.
Removing empty process `dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:433$65'.
Found and cleaned up 2 empty switches in `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:416$62'.
Removing empty process `dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:416$62'.
Found and cleaned up 4 empty switches in `\dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:386$58'.
Removing empty process `dmx_tx.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:386$58'.
Found and cleaned up 2 empty switches in `\dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
Removing empty process `dmx_dpram.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:38$3'.
Cleaned up 21 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module dmx_tx.
<suppressed ~6 debug messages>
Optimizing module dmx_dpram.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dmx_tx.
Optimizing module dmx_dpram.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dmx_tx'.
<suppressed ~108 debug messages>
Finding identical cells in module `\dmx_dpram'.
Removed a total of 36 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dmx_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$164.
    dead port 2/2 on $mux $procmux$164.
    dead port 2/2 on $mux $procmux$109.
    dead port 2/2 on $mux $procmux$79.
Running muxtree optimizer on module \dmx_dpram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 4 multiplexer ports.
<suppressed ~24 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dmx_tx.
    New ctrl vector for $pmux cell $procmux$186: { $auto$opt_reduce.cc:134:opt_mux$340 $procmux$194_CMP $procmux$193_CMP $procmux$192_CMP $procmux$191_CMP $procmux$190_CMP $procmux$189_CMP $procmux$188_CMP $procmux$187_CMP }
    New ctrl vector for $pmux cell $procmux$171: $auto$opt_reduce.cc:134:opt_mux$342
  Optimizing cells in module \dmx_tx.
  Optimizing cells in module \dmx_dpram.
    Consolidated identical input bits for $mux cell $procmux$309:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$309_Y
      New ports: A=1'0, B=1'1, Y=$procmux$309_Y [0]
      New connections: $procmux$309_Y [7:1] = { $procmux$309_Y [0] $procmux$309_Y [0] $procmux$309_Y [0] $procmux$309_Y [0] $procmux$309_Y [0] $procmux$309_Y [0] $procmux$309_Y [0] }
    Consolidated identical input bits for $mux cell $procmux$300:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$300_Y
      New ports: A=1'0, B=1'1, Y=$procmux$300_Y [0]
      New connections: $procmux$300_Y [7:1] = { $procmux$300_Y [0] $procmux$300_Y [0] $procmux$300_Y [0] $procmux$300_Y [0] $procmux$300_Y [0] $procmux$300_Y [0] $procmux$300_Y [0] }
  Optimizing cells in module \dmx_dpram.
Performed a total of 4 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dmx_tx'.
Finding identical cells in module `\dmx_dpram'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$317 ($dff) from module dmx_tx (D = $procmux$219_Y, Q = \state, rval = 5'00000).
Adding EN signal on $auto$ff.cc:262:slice$343 ($sdff) from module dmx_tx (D = $procmux$112_Y, Q = \state).
Adding EN signal on $procdff$318 ($dff) from module dmx_tx (D = $procmux$236_Y, Q = \break_counter).
Adding SRST signal on $auto$ff.cc:262:slice$351 ($dffe) from module dmx_tx (D = $procmux$233_Y, Q = \break_counter, rval = 5'00000).
Adding EN signal on $procdff$319 ($dff) from module dmx_tx (D = $procmux$228_Y, Q = \break_done).
Adding SRST signal on $auto$ff.cc:262:slice$357 ($dffe) from module dmx_tx (D = $procmux$225_Y, Q = \break_done, rval = 1'0).
Adding EN signal on $procdff$320 ($dff) from module dmx_tx (D = $procmux$250_Y, Q = \frame_done).
Adding SRST signal on $auto$ff.cc:262:slice$363 ($dffe) from module dmx_tx (D = $procmux$247_Y, Q = \frame_done, rval = 1'0).
Adding EN signal on $procdff$321 ($dff) from module dmx_tx (D = $procmux$243_Y, Q = \acounter).
Adding SRST signal on $auto$ff.cc:262:slice$369 ($dffe) from module dmx_tx (D = $procmux$240_Y, Q = \acounter, rval = 9'000000000).
Adding EN signal on $procdff$323 ($dff) from module dmx_tx (D = \channel_d, Q = \channel_d_r).
Adding SRST signal on $procdff$324 ($dff) from module dmx_tx (D = $procmux$275_Y, Q = \ce, rval = 1'0).
Adding SRST signal on $procdff$325 ($dff) from module dmx_tx (D = $sub$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:426$64_Y, Q = \ce_counter, rval = 9'110001111).
Adding SRST signal on $procdff$326 ($dff) from module dmx_tx (D = $procmux$294_Y, Q = \thru_en, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$380 ($sdff) from module dmx_tx (D = \csr_di [0], Q = \thru_en).
Adding SRST signal on $procdff$327 ($dff) from module dmx_tx (D = $procmux$285_Y [31:1], Q = \csr_do_reg [31:1], rval = 31'0000000000000000000000000000000).
Adding SRST signal on $procdff$327 ($dff) from module dmx_tx (D = \thru_en, Q = \csr_do_reg [0], rval = 1'0).
Adding SRST signal on $procdff$328 ($dff) from module dmx_tx (D = $not$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/dmx512.v:395$59_Y, Q = \csr_do_sel, rval = 1'0).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dmx_tx..
Finding unused cells or wires in module \dmx_dpram..
Removed 27 unused cells and 151 unused wires.
<suppressed ~30 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dmx_dpram.
Optimizing module dmx_tx.
<suppressed ~5 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dmx_dpram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmx_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dmx_dpram.
  Optimizing cells in module \dmx_tx.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dmx_dpram'.
Finding identical cells in module `\dmx_tx'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dmx_dpram..
Finding unused cells or wires in module \dmx_tx..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dmx_dpram.
Optimizing module dmx_tx.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dmx_dpram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \dmx_tx..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dmx_dpram.
  Optimizing cells in module \dmx_tx.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dmx_dpram'.
Finding identical cells in module `\dmx_tx'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dmx_dpram..
Finding unused cells or wires in module \dmx_tx..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module dmx_dpram.
Optimizing module dmx_tx.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== dmx_dpram ===

   Number of wires:                 17
   Number of wire bits:            119
   Number of public wires:           9
   Number of public wire bits:      53
   Number of memories:               1
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                 12
     $dff                            2
     $memrd                          2
     $memwr_v2                       2
     $mux                            6

=== dmx_tx ===

   Number of wires:                 98
   Number of wire bits:            359
   Number of public wires:          30
   Number of public wire bits:     220
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 91
     $add                            2
     $and                            2
     $dff                            1
     $dffe                           1
     $eq                            36
     $logic_not                      4
     $mux                           13
     $ne                             3
     $not                            2
     $pmux                           3
     $reduce_and                     5
     $reduce_bool                    2
     $reduce_or                      4
     $sdff                           5
     $sdffce                         4
     $sdffe                          2
     $sub                            1
     dmx_dpram                       1

=== design hierarchy ===

   dmx_tx                            1
     dmx_dpram                       1

   Number of wires:                115
   Number of wire bits:            478
   Number of public wires:          39
   Number of public wire bits:     273
   Number of memories:               1
   Number of memory bits:         4096
   Number of processes:              0
   Number of cells:                102
     $add                            2
     $and                            2
     $dff                            3
     $dffe                           1
     $eq                            36
     $logic_not                      4
     $memrd                          2
     $memwr_v2                       2
     $mux                           19
     $ne                             3
     $not                            2
     $pmux                           3
     $reduce_and                     5
     $reduce_bool                    2
     $reduce_or                      4
     $sdff                           5
     $sdffce                         4
     $sdffe                          2
     $sub                            1

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 164fe1e15f, CPU: user 0.09s system 0.00s, MEM: 12.96 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 22% 5x opt_expr (0 sec), 22% 2x read_verilog (0 sec), ...
