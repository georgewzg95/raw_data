
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v' to AST representation.
Warning: Encountered `translate_off' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using a portable and standards-compliant construct such as `ifdef is recommended!
Warning: Encountered `full_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `full_case' attribute or the SystemVerilog `unique' or `unique0' keywords is recommended!
Warning: Encountered `parallel_case' comment! Such legacy hot comments are supported by Yosys, but are not part of any formal language specification. Using the Verilog `parallel_case' attribute or the SystemVerilog `unique' or `priority' keywords is recommended!
Generating RTLIL representation for module `\fifo4'.
Generating RTLIL representation for module `\simple_spi_top'.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   1 design levels: simple_spi_top      
root of   0 design levels: fifo4               
Automatically selected simple_spi_top as design top module.

2.2. Analyzing design hierarchy..
Top module:  \simple_spi_top
Used module:     \fifo4
Parameter 1 (\dw) = 8

2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\fifo4'.
Parameter 1 (\dw) = 8
Generating RTLIL representation for module `$paramod\fifo4\dw=s32'00000000000000000000000000001000'.
Parameter 1 (\dw) = 8
Found cached RTLIL representation for module `$paramod\fifo4\dw=s32'00000000000000000000000000001000'.

2.4. Analyzing design hierarchy..
Top module:  \simple_spi_top
Used module:     $paramod\fifo4\dw=s32'00000000000000000000000000001000

2.5. Analyzing design hierarchy..
Top module:  \simple_spi_top
Used module:     $paramod\fifo4\dw=s32'00000000000000000000000000001000
Removing unused module `\fifo4'.
Removed 1 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:443$83 in module simple_spi_top.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74 in module simple_spi_top.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:361$66 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:313$56 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:306$50 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:281$44 in module simple_spi_top.
Removed 1 dead cases from process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:269$38 in module simple_spi_top.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:249$28 in module simple_spi_top.
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:122$111 in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:114$99 in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:101$95 in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Marked 2 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:91$91 in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Removed a total of 2 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 6 redundant assignments.
Promoted 4 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_i in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:281$44'.
Found async reset \rst_i in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:249$28'.
Found async reset \rst in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:101$95'.
Found async reset \rst in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:91$91'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:443$83'.
     1/1: $0\tcnt[1:0]
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
     1/6: $0\rfwe[0:0]
     2/6: $0\wfre[0:0]
     3/6: $0\bcnt[2:0]
     4/6: $0\state[1:0]
     5/6: $0\treg[7:0]
     6/6: $0\sck_o[0:0]
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:361$66'.
     1/1: $0\clkcnt[11:0]
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:329$62'.
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:313$56'.
     1/1: $0\wcol[0:0]
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:306$50'.
     1/1: $0\spif[0:0]
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:281$44'.
     1/1: $0\ack_o[0:0]
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:269$38'.
     1/1: $0\dat_o[7:0]
Creating decoders for process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:249$28'.
     1/2: $0\sper[7:0]
     2/2: $0\spcr[7:0]
Creating decoders for process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:122$111'.
     1/1: $0\gb[0:0]
Creating decoders for process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:114$99'.
     1/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:115$90_EN[7:0]$105
     2/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:115$90_DATA[7:0]$104
     3/3: $1$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:115$90_ADDR[1:0]$103
Creating decoders for process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:101$95'.
     1/1: $0\rp[1:0]
Creating decoders for process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:91$91'.
     1/1: $0\wp[1:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\simple_spi_top.\tcnt' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:443$83'.
  created $dff cell `$procdff$264' with positive edge clock.
Creating register for signal `\simple_spi_top.\sck_o' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
  created $dff cell `$procdff$265' with positive edge clock.
Creating register for signal `\simple_spi_top.\treg' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
  created $dff cell `$procdff$266' with positive edge clock.
Creating register for signal `\simple_spi_top.\wfre' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
  created $dff cell `$procdff$267' with positive edge clock.
Creating register for signal `\simple_spi_top.\rfwe' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
  created $dff cell `$procdff$268' with positive edge clock.
Creating register for signal `\simple_spi_top.\state' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
  created $dff cell `$procdff$269' with positive edge clock.
Creating register for signal `\simple_spi_top.\bcnt' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
  created $dff cell `$procdff$270' with positive edge clock.
Creating register for signal `\simple_spi_top.\clkcnt' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:361$66'.
  created $dff cell `$procdff$271' with positive edge clock.
Creating register for signal `\simple_spi_top.\inta_o' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:329$62'.
  created $dff cell `$procdff$272' with positive edge clock.
Creating register for signal `\simple_spi_top.\wcol' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:313$56'.
  created $dff cell `$procdff$273' with positive edge clock.
Creating register for signal `\simple_spi_top.\spif' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:306$50'.
  created $dff cell `$procdff$274' with positive edge clock.
Creating register for signal `\simple_spi_top.\ack_o' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:281$44'.
  created $adff cell `$procdff$275' with positive edge clock and negative level reset.
Creating register for signal `\simple_spi_top.\dat_o' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:269$38'.
  created $dff cell `$procdff$276' with positive edge clock.
Creating register for signal `\simple_spi_top.\spcr' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:249$28'.
  created $adff cell `$procdff$277' with positive edge clock and negative level reset.
Creating register for signal `\simple_spi_top.\sper' using process `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:249$28'.
  created $adff cell `$procdff$278' with positive edge clock and negative level reset.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.\gb' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:122$111'.
  created $dff cell `$procdff$279' with positive edge clock.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:115$90_ADDR' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:114$99'.
  created $dff cell `$procdff$280' with positive edge clock.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:115$90_DATA' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:114$99'.
  created $dff cell `$procdff$281' with positive edge clock.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$memwr$\mem$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:115$90_EN' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:114$99'.
  created $dff cell `$procdff$282' with positive edge clock.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.\rp' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:101$95'.
  created $adff cell `$procdff$283' with positive edge clock and negative level reset.
Creating register for signal `$paramod\fifo4\dw=s32'00000000000000000000000000001000.\wp' using process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:91$91'.
  created $adff cell `$procdff$284' with positive edge clock and negative level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:443$83'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:443$83'.
Found and cleaned up 7 empty switches in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:384$74'.
Found and cleaned up 2 empty switches in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:361$66'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:361$66'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:329$62'.
Found and cleaned up 1 empty switch in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:313$56'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:313$56'.
Found and cleaned up 1 empty switch in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:306$50'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:306$50'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:281$44'.
Found and cleaned up 1 empty switch in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:269$38'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:269$38'.
Found and cleaned up 3 empty switches in `\simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:249$28'.
Removing empty process `simple_spi_top.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:249$28'.
Found and cleaned up 4 empty switches in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:122$111'.
Removing empty process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:122$111'.
Found and cleaned up 1 empty switch in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:114$99'.
Removing empty process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:114$99'.
Found and cleaned up 2 empty switches in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:101$95'.
Removing empty process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:101$95'.
Found and cleaned up 2 empty switches in `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:91$91'.
Removing empty process `$paramod\fifo4\dw=s32'00000000000000000000000000001000.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:91$91'.
Cleaned up 27 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.
<suppressed ~30 debug messages>
Optimizing module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
<suppressed ~1 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module simple_spi_top.
Optimizing module $paramod\fifo4\dw=s32'00000000000000000000000000001000.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
<suppressed ~78 debug messages>
Finding identical cells in module `$paramod\fifo4\dw=s32'00000000000000000000000000001000'.
<suppressed ~9 debug messages>
Removed a total of 29 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\fifo4\dw=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~19 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \simple_spi_top.
  Optimizing cells in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
    Consolidated identical input bits for $mux cell $procmux$246:
      Old ports: A=8'00000000, B=8'11111111, Y=$procmux$246_Y
      New ports: A=1'0, B=1'1, Y=$procmux$246_Y [0]
      New connections: $procmux$246_Y [7:1] = { $procmux$246_Y [0] $procmux$246_Y [0] $procmux$246_Y [0] $procmux$246_Y [0] $procmux$246_Y [0] $procmux$246_Y [0] $procmux$246_Y [0] }
  Optimizing cells in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Performed a total of 1 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\simple_spi_top'.
Finding identical cells in module `$paramod\fifo4\dw=s32'00000000000000000000000000001000'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$264 ($dff) from module simple_spi_top (D = $procmux$121_Y, Q = \tcnt).
Adding SRST signal on $procdff$265 ($dff) from module simple_spi_top (D = $procmux$185_Y, Q = \sck_o, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$289 ($sdff) from module simple_spi_top (D = $procmux$185_Y, Q = \sck_o).
Adding SRST signal on $procdff$266 ($dff) from module simple_spi_top (D = $procmux$173_Y, Q = \treg, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:262:slice$299 ($sdff) from module simple_spi_top (D = $procmux$173_Y, Q = \treg).
Adding SRST signal on $procdff$267 ($dff) from module simple_spi_top (D = $procmux$137_Y, Q = \wfre, rval = 1'0).
Adding SRST signal on $procdff$268 ($dff) from module simple_spi_top (D = $procmux$125_Y, Q = \rfwe, rval = 1'0).
Adding SRST signal on $procdff$269 ($dff) from module simple_spi_top (D = $procmux$153_Y, Q = \state, rval = 2'00).
Adding EN signal on $auto$ff.cc:262:slice$317 ($sdff) from module simple_spi_top (D = $procmux$153_Y, Q = \state).
Adding SRST signal on $procdff$270 ($dff) from module simple_spi_top (D = $procmux$147_Y, Q = \bcnt, rval = 3'000).
Adding EN signal on $auto$ff.cc:262:slice$329 ($sdff) from module simple_spi_top (D = $procmux$147_Y, Q = \bcnt).
Adding EN signal on $procdff$271 ($dff) from module simple_spi_top (D = $procmux$213_Y, Q = \clkcnt).
Adding SRST signal on $procdff$273 ($dff) from module simple_spi_top (D = $and$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:317$61_Y, Q = \wcol, rval = 1'0).
Adding SRST signal on $procdff$274 ($dff) from module simple_spi_top (D = $and$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:310$55_Y, Q = \spif, rval = 1'0).
Adding EN signal on $procdff$277 ($adff) from module simple_spi_top (D = $or$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/simple_spi.v:258$31_Y, Q = \spcr).
Adding EN signal on $procdff$278 ($adff) from module simple_spi_top (D = \dat_i, Q = \sper).
Adding EN signal on $procdff$283 ($adff) from module $paramod\fifo4\dw=s32'00000000000000000000000000001000 (D = $procmux$257_Y, Q = \rp).
Adding EN signal on $procdff$284 ($adff) from module $paramod\fifo4\dw=s32'00000000000000000000000000001000 (D = $procmux$262_Y, Q = \wp).
Adding SRST signal on $procdff$279 ($dff) from module $paramod\fifo4\dw=s32'00000000000000000000000000001000 (D = $procmux$237_Y, Q = \gb, rval = 1'0).
Adding EN signal on $auto$ff.cc:262:slice$354 ($sdff) from module $paramod\fifo4\dw=s32'00000000000000000000000000001000 (D = $procmux$237_Y, Q = \gb).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \simple_spi_top..
Finding unused cells or wires in module $paramod\fifo4\dw=s32'00000000000000000000000000001000..
Removed 26 unused cells and 135 unused wires.
<suppressed ~31 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
<suppressed ~3 debug messages>
Optimizing module simple_spi_top.
<suppressed ~5 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\fifo4\dw=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
  Optimizing cells in module \simple_spi_top.
    New input vector for $reduce_or cell $auto$opt_dff.cc:257:combine_resets$316: { \clkcnt $auto$rtlil.cc:2312:Not$312 $auto$rtlil.cc:2312:Not$314 }
  Optimizing cells in module \simple_spi_top.
Performed a total of 1 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\fifo4\dw=s32'00000000000000000000000000001000'.
Finding identical cells in module `\simple_spi_top'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\fifo4\dw=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \simple_spi_top..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Optimizing module simple_spi_top.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\fifo4\dw=s32'00000000000000000000000000001000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \simple_spi_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
  Optimizing cells in module \simple_spi_top.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\fifo4\dw=s32'00000000000000000000000000001000'.
Finding identical cells in module `\simple_spi_top'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\fifo4\dw=s32'00000000000000000000000000001000..
Finding unused cells or wires in module \simple_spi_top..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\fifo4\dw=s32'00000000000000000000000000001000.
Optimizing module simple_spi_top.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== $paramod\fifo4\dw=s32'00000000000000000000000000001000 ===

   Number of wires:                 32
   Number of wire bits:             69
   Number of public wires:          14
   Number of public wire bits:      32
   Number of memories:               1
   Number of memory bits:           32
   Number of processes:              0
   Number of cells:                 27
     $add                            2
     $adffe                          2
     $and                            3
     $eq                             2
     $logic_not                      1
     $memrd                          1
     $memwr_v2                       1
     $mux                            9
     $not                            1
     $reduce_bool                    3
     $reduce_or                      1
     $sdffe                          1

=== simple_spi_top ===

   Number of wires:                134
   Number of wire bits:            288
   Number of public wires:          48
   Number of public wire bits:     126
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                110
     $adff                           1
     $adffe                          2
     $and                           17
     $dff                            2
     $dffe                           2
     $eq                            17
     $logic_not                      5
     $mux                           17
     $ne                             4
     $not                            6
     $or                             3
     $paramod\fifo4\dw=s32'00000000000000000000000000001000      2
     $pmux                           6
     $reduce_and                     6
     $reduce_bool                    4
     $reduce_or                      5
     $sdff                           4
     $sdffe                          4
     $sub                            3

=== design hierarchy ===

   simple_spi_top                    1
     $paramod\fifo4\dw=s32'00000000000000000000000000001000      2

   Number of wires:                198
   Number of wire bits:            426
   Number of public wires:          76
   Number of public wire bits:     190
   Number of memories:               2
   Number of memory bits:           64
   Number of processes:              0
   Number of cells:                162
     $add                            4
     $adff                           1
     $adffe                          6
     $and                           23
     $dff                            2
     $dffe                           2
     $eq                            21
     $logic_not                      7
     $memrd                          2
     $memwr_v2                       2
     $mux                           35
     $ne                             4
     $not                            8
     $or                             3
     $pmux                           6
     $reduce_and                     6
     $reduce_bool                   10
     $reduce_or                      7
     $sdff                           4
     $sdffe                          6
     $sub                            3

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 3b163bc32b, CPU: user 0.09s system 0.00s, MEM: 12.12 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 26% 5x opt_expr (0 sec), 21% 4x opt_merge (0 sec), ...
