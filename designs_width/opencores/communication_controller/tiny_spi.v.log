
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Executing script file `out.ys' --

1. Executing Verilog-2005 frontend: /home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v
Parsing SystemVerilog input from `/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v' to AST representation.
Generating RTLIL representation for module `\tiny_spi'.
Note: Assuming pure combinatorial block at /home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119.4-178.9 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing HIERARCHY pass (managing design hierarchy).

2.1. Finding top of design hierarchy..
root of   0 design levels: tiny_spi            
Automatically selected tiny_spi as design top module.

2.2. Analyzing design hierarchy..
Top module:  \tiny_spi

2.3. Analyzing design hierarchy..
Top module:  \tiny_spi
Removed 0 unused modules.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:212$36 in module tiny_spi.
Marked 7 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33 in module tiny_spi.
Marked 6 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23 in module tiny_spi.
Marked 1 switch rules as full_case in process $proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:107$21 in module tiny_spi.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 9 redundant assignments.
Promoted 8 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst_i in `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:212$36'.
Found async reset \rst_i in `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:107$21'.

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:212$36'.
     1/1: $0\bba[0:0]
Creating decoders for process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
     1/5: $0\bb8[7:0]
     2/5: $0\sr8[7:0]
     3/5: $0\ccr[7:0]
     4/5: { $0\txren[0:0] $0\txeen[0:0] }
     5/5: { $0\cpolr[0:0] $0\cphar[0:0] }
Creating decoders for process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23'.
     1/22: $6\spi_seq_next[1:0]
     2/22: $5\ld[0:0]
     3/22: $5\bc_next[2:0]
     4/22: $5\spi_seq_next[1:0]
     5/22: $4\ld[0:0]
     6/22: $4\bc_next[2:0]
     7/22: $4\spi_seq_next[1:0]
     8/22: $3\ld[0:0]
     9/22: $3\bc_next[2:0]
    10/22: $2\sf[0:0]
    11/22: $3\cc_next[7:0]
    12/22: $3\spi_seq_next[1:0]
    13/22: $2\cc_next[7:0]
    14/22: $2\spi_seq_next[1:0]
    15/22: $2\ld[0:0]
    16/22: $2\bc_next[2:0]
    17/22: $1\spi_seq_next[1:0]
    18/22: $1\ld[0:0]
    19/22: $1\bc_next[2:0]
    20/22: $1\sf[0:0]
    21/22: $1\sck[0:0]
    22/22: $1\cc_next[7:0]
Creating decoders for process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:113$22'.
Creating decoders for process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:107$21'.
     1/1: $0\spi_seq[1:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\tiny_spi.\bc_next' from process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23'.
No latch inferred for signal `\tiny_spi.\cc_next' from process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23'.
No latch inferred for signal `\tiny_spi.\sck' from process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23'.
No latch inferred for signal `\tiny_spi.\sf' from process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23'.
No latch inferred for signal `\tiny_spi.\ld' from process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23'.
Latch inferred for signal `\tiny_spi.\spi_seq_next' from process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23': $auto$proc_dlatch.cc:427:proc_dlatch$246

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\tiny_spi.\bba' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:212$36'.
  created $adff cell `$procdff$247' with positive edge clock and positive level reset.
Creating register for signal `\tiny_spi.\sr8' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
  created $dff cell `$procdff$248' with positive edge clock.
Creating register for signal `\tiny_spi.\bb8' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
  created $dff cell `$procdff$249' with positive edge clock.
Creating register for signal `\tiny_spi.\ccr' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
  created $dff cell `$procdff$250' with positive edge clock.
Creating register for signal `\tiny_spi.\txren' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
  created $dff cell `$procdff$251' with positive edge clock.
Creating register for signal `\tiny_spi.\txeen' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
  created $dff cell `$procdff$252' with positive edge clock.
Creating register for signal `\tiny_spi.\cpolr' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
  created $dff cell `$procdff$253' with positive edge clock.
Creating register for signal `\tiny_spi.\cphar' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
  created $dff cell `$procdff$254' with positive edge clock.
Creating register for signal `\tiny_spi.\bc' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:113$22'.
  created $dff cell `$procdff$255' with positive edge clock.
Creating register for signal `\tiny_spi.\cc' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:113$22'.
  created $dff cell `$procdff$256' with positive edge clock.
Creating register for signal `\tiny_spi.\spi_seq' using process `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:107$21'.
  created $adff cell `$procdff$257' with positive edge clock and positive level reset.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:212$36'.
Removing empty process `tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:212$36'.
Found and cleaned up 7 empty switches in `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
Removing empty process `tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:180$33'.
Found and cleaned up 6 empty switches in `\tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23'.
Removing empty process `tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:119$23'.
Removing empty process `tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:113$22'.
Removing empty process `tiny_spi.$proc$/home/zhigang/raw_data/raw_designs/opencores/communication_controller/tiny_spi.v:107$21'.
Cleaned up 15 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module tiny_spi.
<suppressed ~29 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module tiny_spi.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tiny_spi'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tiny_spi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$174.
    dead port 2/2 on $mux $procmux$160.
    dead port 2/2 on $mux $procmux$154.
    dead port 2/2 on $mux $procmux$148.
    dead port 2/2 on $mux $procmux$142.
    dead port 2/2 on $mux $procmux$130.
    dead port 2/2 on $mux $procmux$128.
    dead port 2/2 on $mux $procmux$121.
    dead port 2/2 on $mux $procmux$119.
    dead port 2/2 on $mux $procmux$103.
    dead port 2/2 on $mux $procmux$101.
    dead port 2/2 on $mux $procmux$99.
    dead port 2/2 on $mux $procmux$91.
    dead port 2/2 on $mux $procmux$89.
    dead port 2/2 on $mux $procmux$87.
    dead port 2/2 on $mux $procmux$198.
    dead port 2/2 on $mux $procmux$190.
Removed 17 multiplexer ports.
<suppressed ~12 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tiny_spi.
    New ctrl vector for $pmux cell $procmux$217: $procmux$222_CMP
    New ctrl vector for $pmux cell $procmux$201: { $procmux$223_CMP $procmux$222_CMP }
  Optimizing cells in module \tiny_spi.
Performed a total of 2 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tiny_spi'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$247 ($adff) from module tiny_spi (D = $procmux$46_Y, Q = \bba).
Adding EN signal on $procdff$255 ($dff) from module tiny_spi (D = $procmux$210_Y, Q = \bc).
Adding EN signal on $procdff$254 ($dff) from module tiny_spi (D = \dat_i [0], Q = \cphar).
Adding EN signal on $procdff$253 ($dff) from module tiny_spi (D = \dat_i [1], Q = \cpolr).
Adding EN signal on $procdff$252 ($dff) from module tiny_spi (D = \dat_i [0], Q = \txeen).
Adding EN signal on $procdff$251 ($dff) from module tiny_spi (D = \dat_i [1], Q = \txren).
Adding EN signal on $procdff$250 ($dff) from module tiny_spi (D = \dat_i [7:0], Q = \ccr).
Adding EN signal on $procdff$248 ($dff) from module tiny_spi (D = $procmux$58_Y, Q = \sr8).
Adding EN signal on $procdff$249 ($dff) from module tiny_spi (D = $procmux$52_Y, Q = \bb8).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tiny_spi..
Removed 8 unused cells and 164 unused wires.
<suppressed ~12 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module tiny_spi.
<suppressed ~4 debug messages>

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tiny_spi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tiny_spi.
    New ctrl vector for $pmux cell $procmux$221: $auto$opt_reduce.cc:134:opt_mux$282
  Optimizing cells in module \tiny_spi.
Performed a total of 1 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tiny_spi'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tiny_spi..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module tiny_spi.

4.16. Rerunning OPT passes. (Maybe there is more to do..)

4.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \tiny_spi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

4.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \tiny_spi.
Performed a total of 0 changes.

4.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\tiny_spi'.
Removed a total of 0 cells.

4.20. Executing OPT_DFF pass (perform DFF optimizations).

4.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \tiny_spi..

4.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module tiny_spi.

4.23. Finished OPT passes. (There is nothing left to do.)

5. Printing statistics.

=== tiny_spi ===

   Number of wires:                 88
   Number of wire bits:            441
   Number of public wires:          38
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 74
     $adff                           1
     $adffe                          1
     $and                           13
     $dff                            1
     $dffe                           6
     $dlatch                         1
     $eq                             5
     $logic_not                      4
     $mux                           23
     $ne                             2
     $not                            4
     $or                             3
     $pmux                           3
     $reduce_and                     1
     $reduce_bool                    3
     $reduce_or                      1
     $sub                            2

End of script. Logfile hash: 12ed86ca17, CPU: user 0.10s system 0.00s, MEM: 12.02 MB peak
Yosys 0.10+12 (git sha1 72fac04, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 31% 5x opt_expr (0 sec), 15% 2x read_verilog (0 sec), ...
