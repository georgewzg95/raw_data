+ body
+ cd constmuldivmod.out
++ basename constmuldivmod.v
+ fn=constmuldivmod.v
++ basename constmuldivmod
+ bn=constmuldivmod
+ refext=v
+ rm -f constmuldivmod_ref.fir
+ [[ v == \v ]]
+ egrep -v '^\s*`timescale' ../constmuldivmod.v
+ '[' '!' -f ../constmuldivmod_tb.v ']'
+ /home/zhigang/FeatEx/tests/tools/../../yosys -f 'verilog -noblackbox  -D_AUTOTB' -b 'test_autotb ' -o constmuldivmod_tb.v constmuldivmod_ref.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Parsing `constmuldivmod_ref.v' using frontend `verilog -noblackbox  -D_AUTOTB' --

1. Executing Verilog-2005 frontend: constmuldivmod_ref.v
Parsing Verilog input from `constmuldivmod_ref.v' to AST representation.
Generating RTLIL representation for module `\constmuldivmod'.
Successfully finished Verilog frontend.

-- Writing to `constmuldivmod_tb.v' using backend `test_autotb ' --

2. Executing TEST_AUTOTB backend (auto-generate pseudo-random test benches).
Generating test bench for module `\constmuldivmod'.

End of script. Logfile hash: bde5e31e6d, CPU: user 0.01s system 0.00s, MEM: 11.03 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 99% 1x read_verilog (0 sec), 0% 1x test_autotb (0 sec)
+ false
+ compile_and_run constmuldivmod_tb_ref constmuldivmod_out_ref constmuldivmod_tb.v constmuldivmod_ref.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ exe=constmuldivmod_tb_ref
+ output=constmuldivmod_out_ref
+ shift 2
+ '[' v == sv ']'
+ language_gen=-g2005
+ false
+ false
+ iverilog -g2005 '-Doutfile="constmuldivmod_out_ref"' -s testbench -o constmuldivmod_tb_ref constmuldivmod_tb.v constmuldivmod_ref.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ vvp -n constmuldivmod_tb_ref
+ false
+ test_count=0
+ '[' 'verilog -noblackbox' = verific -o 'verilog -noblackbox' = verific_gates ']'
+ '[' -n '' ']'
+ '[' -n '' ']'
+ '[' 'verilog -noblackbox' = verific ']'
+ '[' 'verilog -noblackbox' = verific_gates ']'
+ test_passes -f 'verilog -noblackbox ' -p 'hierarchy; proc; opt -nodffe -nosdff; fsm; opt; memory; opt -full -fine' constmuldivmod_ref.v
+ /home/zhigang/FeatEx/tests/tools/../../yosys -b 'verilog -noattr -noexpr -siminit' -o constmuldivmod_syn0.v -f 'verilog -noblackbox ' -p 'hierarchy; proc; opt -nodffe -nosdff; fsm; opt; memory; opt -full -fine' constmuldivmod_ref.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Parsing `constmuldivmod_ref.v' using frontend `verilog -noblackbox ' --

1. Executing Verilog-2005 frontend: constmuldivmod_ref.v
Parsing Verilog input from `constmuldivmod_ref.v' to AST representation.
Generating RTLIL representation for module `\constmuldivmod'.
Successfully finished Verilog frontend.

-- Running command `hierarchy; proc; opt -nodffe -nosdff; fsm; opt; memory; opt -full -fine' --

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$constmuldivmod_ref.v:2$1 in module constmuldivmod.
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.4. Executing PROC_INIT pass (extract init attributes).

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\constmuldivmod.$proc$constmuldivmod_ref.v:2$1'.
     1/1: $1\Y[7:0]

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\constmuldivmod.\Y' from process `\constmuldivmod.$proc$constmuldivmod_ref.v:2$1'.

3.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\constmuldivmod.$proc$constmuldivmod_ref.v:2$1'.
Removing empty process `constmuldivmod.$proc$constmuldivmod_ref.v:2$1'.
Cleaned up 1 empty switch.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.
<suppressed ~7 debug messages>

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.
<suppressed ~54 debug messages>

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
    New ctrl vector for $pmux cell $procmux$49: { $procmux$90_CMP $procmux$88_CMP $procmux$87_CMP $procmux$85_CMP $procmux$84_CMP $procmux$82_CMP $procmux$81_CMP $procmux$75_CMP $auto$opt_reduce.cc:134:opt_mux$139 $procmux$73_CMP $procmux$72_CMP $auto$opt_reduce.cc:134:opt_mux$137 $procmux$70_CMP $procmux$69_CMP $auto$opt_reduce.cc:134:opt_mux$135 $procmux$67_CMP $procmux$66_CMP $auto$opt_reduce.cc:134:opt_mux$133 $auto$opt_reduce.cc:134:opt_mux$131 $auto$opt_reduce.cc:134:opt_mux$129 $procmux$61_CMP $procmux$60_CMP $procmux$59_CMP $procmux$58_CMP $procmux$57_CMP $procmux$56_CMP $procmux$55_CMP $procmux$54_CMP $procmux$53_CMP $procmux$52_CMP $procmux$51_CMP $procmux$50_CMP }
  Optimizing cells in module \constmuldivmod.
Performed a total of 1 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..
Removed 0 unused cells and 39 unused wires.
<suppressed ~4 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

7.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

7.9. Executing MEMORY_COLLECT pass (generating $mem cells).

7.10. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.
<suppressed ~29 debug messages>

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
    New ctrl vector for $pmux cell $procmux$49: { $procmux$88_CMP $procmux$87_CMP $procmux$85_CMP $procmux$84_CMP $procmux$82_CMP $procmux$81_CMP $auto$opt_reduce.cc:134:opt_mux$139 $procmux$73_CMP $procmux$72_CMP $auto$opt_reduce.cc:134:opt_mux$137 $procmux$70_CMP $procmux$69_CMP $auto$opt_reduce.cc:134:opt_mux$135 $procmux$67_CMP $procmux$66_CMP $auto$opt_reduce.cc:134:opt_mux$133 $auto$opt_reduce.cc:134:opt_mux$154 $procmux$61_CMP $procmux$60_CMP $procmux$59_CMP $procmux$58_CMP $procmux$57_CMP $procmux$56_CMP $procmux$55_CMP $procmux$54_CMP $procmux$53_CMP $procmux$52_CMP $procmux$51_CMP $procmux$50_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$153: { $procmux$92_CMP $procmux$90_CMP $procmux$77_CMP $procmux$75_CMP $procmux$62_CMP }
  Optimizing cells in module \constmuldivmod.
Performed a total of 2 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

8.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $procmux$49 in front of them:
        $mod$constmuldivmod_ref.v:61$45
        $mod$constmuldivmod_ref.v:57$42
        $mod$constmuldivmod_ref.v:53$39
        $mod$constmuldivmod_ref.v:49$36

    Found cells that share an operand and can be merged by moving the $pmux $procmux$49 in front of them:
        $div$constmuldivmod_ref.v:60$44
        $div$constmuldivmod_ref.v:56$41
        $div$constmuldivmod_ref.v:52$38
        $div$constmuldivmod_ref.v:48$35

8.7. Executing OPT_DFF pass (perform DFF optimizations).

8.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..
Removed 8 unused cells and 29 unused wires.
<suppressed ~9 debug messages>

8.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.
<suppressed ~2 debug messages>

8.10. Rerunning OPT passes. (Maybe there is more to do..)

8.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

8.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
    Consolidated identical input bits for $pmux cell $auto$opt_share.cc:243:merge_operators$156:
      Old ports: A=8'11111111, B=24'111111101111110011111000, Y=$auto$rtlil.cc:2410:Pmux$157
      New ports: A=3'111, B=9'110100000, Y=$auto$rtlil.cc:2410:Pmux$157 [2:0]
      New connections: $auto$rtlil.cc:2410:Pmux$157 [7:3] = 5'11111
    Consolidated identical input bits for $pmux cell $auto$opt_share.cc:243:merge_operators$159:
      Old ports: A=8'11111111, B=24'111111101111110011111000, Y=$auto$rtlil.cc:2410:Pmux$160
      New ports: A=3'111, B=9'110100000, Y=$auto$rtlil.cc:2410:Pmux$160 [2:0]
      New connections: $auto$rtlil.cc:2410:Pmux$160 [7:3] = 5'11111
    New ctrl vector for $pmux cell $procmux$49: { $procmux$88_CMP $procmux$87_CMP $procmux$85_CMP $procmux$84_CMP $procmux$82_CMP $procmux$81_CMP $auto$opt_reduce.cc:134:opt_mux$139 $procmux$73_CMP $procmux$72_CMP $auto$opt_reduce.cc:134:opt_mux$137 $procmux$70_CMP $procmux$69_CMP $auto$opt_reduce.cc:134:opt_mux$135 $procmux$67_CMP $procmux$66_CMP $auto$opt_reduce.cc:134:opt_mux$133 $auto$opt_reduce.cc:134:opt_mux$154 $procmux$59_CMP $procmux$56_CMP $procmux$53_CMP $auto$opt_reduce.cc:134:opt_mux$164 $auto$opt_reduce.cc:134:opt_mux$162 $procmux$50_CMP }
  Optimizing cells in module \constmuldivmod.
Performed a total of 3 changes.

8.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

8.14. Executing OPT_SHARE pass.

8.15. Executing OPT_DFF pass (perform DFF optimizations).

8.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

8.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

8.18. Rerunning OPT passes. (Maybe there is more to do..)

8.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

8.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
Performed a total of 0 changes.

8.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

8.22. Executing OPT_SHARE pass.

8.23. Executing OPT_DFF pass (perform DFF optimizations).

8.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

8.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

8.26. Finished OPT passes. (There is nothing left to do.)

-- Writing to `constmuldivmod_syn0.v' using backend `verilog -noattr -noexpr -siminit' --

9. Executing Verilog backend.
Dumping module `\constmuldivmod'.

End of script. Logfile hash: 0b2d8bed62, CPU: user 0.17s system 0.00s, MEM: 12.01 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 33% 10x opt_expr (0 sec), 19% 9x opt_clean (0 sec), ...
+ compile_and_run constmuldivmod_tb_syn0 constmuldivmod_out_syn0 constmuldivmod_tb.v constmuldivmod_syn0.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ exe=constmuldivmod_tb_syn0
+ output=constmuldivmod_out_syn0
+ shift 2
+ '[' v == sv ']'
+ language_gen=-g2005
+ false
+ false
+ iverilog -g2005 '-Doutfile="constmuldivmod_out_syn0"' -s testbench -o constmuldivmod_tb_syn0 constmuldivmod_tb.v constmuldivmod_syn0.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ vvp -n constmuldivmod_tb_syn0
+ false
+ /home/zhigang/FeatEx/tests/tools/cmp_tbdata constmuldivmod_out_ref constmuldivmod_out_syn0
+ test_count=1
+ test_passes -f 'verilog -noblackbox ' -p 'hierarchy; synth -run coarse; techmap; opt; abc -dff' constmuldivmod_ref.v
+ /home/zhigang/FeatEx/tests/tools/../../yosys -b 'verilog -noattr -noexpr -siminit' -o constmuldivmod_syn1.v -f 'verilog -noblackbox ' -p 'hierarchy; synth -run coarse; techmap; opt; abc -dff' constmuldivmod_ref.v

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Parsing `constmuldivmod_ref.v' using frontend `verilog -noblackbox ' --

1. Executing Verilog-2005 frontend: constmuldivmod_ref.v
Parsing Verilog input from `constmuldivmod_ref.v' to AST representation.
Generating RTLIL representation for module `\constmuldivmod'.
Successfully finished Verilog frontend.

-- Running command `hierarchy; synth -run coarse; techmap; opt; abc -dff' --

2. Executing HIERARCHY pass (managing design hierarchy).

3. Executing SYNTH pass.

3.1. Executing PROC pass (convert processes to netlists).

3.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$constmuldivmod_ref.v:2$1 in module constmuldivmod.
Removed a total of 0 dead cases.

3.1.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

3.1.4. Executing PROC_INIT pass (extract init attributes).

3.1.5. Executing PROC_ARST pass (detect async resets in processes).

3.1.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\constmuldivmod.$proc$constmuldivmod_ref.v:2$1'.
     1/1: $1\Y[7:0]

3.1.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\constmuldivmod.\Y' from process `\constmuldivmod.$proc$constmuldivmod_ref.v:2$1'.

3.1.8. Executing PROC_DFF pass (convert process syncs to FFs).

3.1.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.1.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\constmuldivmod.$proc$constmuldivmod_ref.v:2$1'.
Removing empty process `constmuldivmod.$proc$constmuldivmod_ref.v:2$1'.
Cleaned up 1 empty switch.

3.1.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.
<suppressed ~7 debug messages>

3.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.
<suppressed ~54 debug messages>

3.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..
Removed 0 unused cells and 34 unused wires.
<suppressed ~4 debug messages>

3.4. Executing CHECK pass (checking for obvious problems).
Checking module constmuldivmod...
Found and reported 0 problems.

3.5. Executing OPT pass (performing simple optimizations).

3.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

3.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

3.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
    New ctrl vector for $pmux cell $procmux$49: { $procmux$90_CMP $procmux$88_CMP $procmux$87_CMP $procmux$85_CMP $procmux$84_CMP $procmux$82_CMP $procmux$81_CMP $procmux$75_CMP $auto$opt_reduce.cc:134:opt_mux$139 $procmux$73_CMP $procmux$72_CMP $auto$opt_reduce.cc:134:opt_mux$137 $procmux$70_CMP $procmux$69_CMP $auto$opt_reduce.cc:134:opt_mux$135 $procmux$67_CMP $procmux$66_CMP $auto$opt_reduce.cc:134:opt_mux$133 $auto$opt_reduce.cc:134:opt_mux$131 $auto$opt_reduce.cc:134:opt_mux$129 $procmux$61_CMP $procmux$60_CMP $procmux$59_CMP $procmux$58_CMP $procmux$57_CMP $procmux$56_CMP $procmux$55_CMP $procmux$54_CMP $procmux$53_CMP $procmux$52_CMP $procmux$51_CMP $procmux$50_CMP }
  Optimizing cells in module \constmuldivmod.
Performed a total of 1 changes.

3.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

3.5.6. Executing OPT_DFF pass (perform DFF optimizations).

3.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

3.5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

3.5.9. Rerunning OPT passes. (Maybe there is more to do..)

3.5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
Performed a total of 0 changes.

3.5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

3.5.13. Executing OPT_DFF pass (perform DFF optimizations).

3.5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

3.5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

3.5.16. Finished OPT passes. (There is nothing left to do.)

3.6. Executing FSM pass (extract and optimize FSM).

3.6.1. Executing FSM_DETECT pass (finding FSMs in design).

3.6.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.6.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

3.6.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.6.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.6.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.6.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
Performed a total of 0 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

3.7.6. Executing OPT_DFF pass (perform DFF optimizations).

3.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

3.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

3.7.9. Finished OPT passes. (There is nothing left to do.)

3.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 8) from port A of cell constmuldivmod.$mul$constmuldivmod_ref.v:54$40 ($neg).
Removed top 2 bits (of 8) from port A of cell constmuldivmod.$mul$constmuldivmod_ref.v:58$43 ($neg).
Removed top 3 bits (of 8) from port A of cell constmuldivmod.$mul$constmuldivmod_ref.v:62$46 ($neg).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$63_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$64_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$65_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$66_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$67_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$68_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$69_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$70_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$71_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$72_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$73_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$74_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$75_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$76_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$77_CMP0 ($eq).
Removed top 1 bits (of 6) from port B of cell constmuldivmod.$procmux$78_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell constmuldivmod.$procmux$79_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell constmuldivmod.$procmux$80_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell constmuldivmod.$procmux$81_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell constmuldivmod.$procmux$82_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell constmuldivmod.$procmux$83_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell constmuldivmod.$procmux$84_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell constmuldivmod.$procmux$85_CMP0 ($eq).
Removed top 2 bits (of 6) from port B of cell constmuldivmod.$procmux$86_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell constmuldivmod.$procmux$87_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell constmuldivmod.$procmux$88_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell constmuldivmod.$procmux$89_CMP0 ($eq).
Removed top 3 bits (of 6) from port B of cell constmuldivmod.$procmux$90_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell constmuldivmod.$procmux$91_CMP0 ($eq).
Removed top 4 bits (of 6) from port B of cell constmuldivmod.$procmux$92_CMP0 ($eq).
Removed top 5 bits (of 6) from port B of cell constmuldivmod.$procmux$93_CMP0 ($eq).

3.9. Executing PEEPOPT pass (run peephole optimizers).

3.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module constmuldivmod:
  creating $macc model for $auto$opt_expr.cc:1656:replace_const_cells$100 ($add).
  creating $macc model for $auto$opt_expr.cc:1656:replace_const_cells$111 ($add).
  creating $macc model for $auto$opt_expr.cc:1656:replace_const_cells$122 ($add).
  creating $macc model for $mul$constmuldivmod_ref.v:50$37 ($neg).
  creating $macc model for $mul$constmuldivmod_ref.v:54$40 ($neg).
  creating $macc model for $mul$constmuldivmod_ref.v:58$43 ($neg).
  creating $macc model for $mul$constmuldivmod_ref.v:62$46 ($neg).
  creating $alu model for $macc $mul$constmuldivmod_ref.v:62$46.
  creating $alu model for $macc $mul$constmuldivmod_ref.v:58$43.
  creating $alu model for $macc $mul$constmuldivmod_ref.v:54$40.
  creating $alu model for $macc $mul$constmuldivmod_ref.v:50$37.
  creating $alu model for $macc $auto$opt_expr.cc:1656:replace_const_cells$122.
  creating $alu model for $macc $auto$opt_expr.cc:1656:replace_const_cells$111.
  creating $alu model for $macc $auto$opt_expr.cc:1656:replace_const_cells$100.
  creating $alu cell for $auto$opt_expr.cc:1656:replace_const_cells$100: $auto$alumacc.cc:485:replace_alu$140
  creating $alu cell for $auto$opt_expr.cc:1656:replace_const_cells$111: $auto$alumacc.cc:485:replace_alu$143
  creating $alu cell for $auto$opt_expr.cc:1656:replace_const_cells$122: $auto$alumacc.cc:485:replace_alu$146
  creating $alu cell for $mul$constmuldivmod_ref.v:50$37: $auto$alumacc.cc:485:replace_alu$149
  creating $alu cell for $mul$constmuldivmod_ref.v:54$40: $auto$alumacc.cc:485:replace_alu$152
  creating $alu cell for $mul$constmuldivmod_ref.v:58$43: $auto$alumacc.cc:485:replace_alu$155
  creating $alu cell for $mul$constmuldivmod_ref.v:62$46: $auto$alumacc.cc:485:replace_alu$158
  created 7 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).
Found 8 cells in module constmuldivmod that may be considered for resource sharing.
  Analyzing resource sharing options for $mod$constmuldivmod_ref.v:61$45 ($mod):
    Found 1 activation_patterns using ctrl signal $procmux$51_CMP.
    Found 3 candidates: $mod$constmuldivmod_ref.v:57$42 $mod$constmuldivmod_ref.v:53$39 $mod$constmuldivmod_ref.v:49$36
    Analyzing resource sharing with $mod$constmuldivmod_ref.v:57$42 ($mod):
      Found 1 activation_patterns using ctrl signal $procmux$54_CMP.
      Activation pattern for cell $mod$constmuldivmod_ref.v:61$45: $procmux$51_CMP = 1'1
      Activation pattern for cell $mod$constmuldivmod_ref.v:57$42: $procmux$54_CMP = 1'1
      Size of SAT problem: 0 cells, 39 variables, 101 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $mod$constmuldivmod_ref.v:61$45: $auto$share.cc:977:make_cell_activation_logic$161
      New cell: $auto$share.cc:667:make_supercell$168 ($mod)
  Analyzing resource sharing options for $auto$share.cc:667:make_supercell$168 ($mod):
    Found 2 activation_patterns using ctrl signal { $procmux$54_CMP $procmux$51_CMP }.
    Found 2 candidates: $mod$constmuldivmod_ref.v:53$39 $mod$constmuldivmod_ref.v:49$36
    Analyzing resource sharing with $mod$constmuldivmod_ref.v:53$39 ($mod):
      Found 1 activation_patterns using ctrl signal $procmux$57_CMP.
      Activation pattern for cell $auto$share.cc:667:make_supercell$168: $procmux$51_CMP = 1'1
      Activation pattern for cell $auto$share.cc:667:make_supercell$168: $procmux$54_CMP = 1'1
      Activation pattern for cell $mod$constmuldivmod_ref.v:53$39: $procmux$57_CMP = 1'1
      Size of SAT problem: 0 cells, 53 variables, 145 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $mod$constmuldivmod_ref.v:53$39: $auto$share.cc:977:make_cell_activation_logic$171
      New cell: $auto$share.cc:667:make_supercell$178 ($mod)
  Analyzing resource sharing options for $auto$share.cc:667:make_supercell$178 ($mod):
    Found 3 activation_patterns using ctrl signal { $procmux$57_CMP $procmux$54_CMP $procmux$51_CMP }.
    Found 1 candidates: $mod$constmuldivmod_ref.v:49$36
    Analyzing resource sharing with $mod$constmuldivmod_ref.v:49$36 ($mod):
      Found 1 activation_patterns using ctrl signal $procmux$60_CMP.
      Activation pattern for cell $auto$share.cc:667:make_supercell$178: $procmux$51_CMP = 1'1
      Activation pattern for cell $auto$share.cc:667:make_supercell$178: $procmux$54_CMP = 1'1
      Activation pattern for cell $auto$share.cc:667:make_supercell$178: $procmux$57_CMP = 1'1
      Activation pattern for cell $mod$constmuldivmod_ref.v:49$36: $procmux$60_CMP = 1'1
      Size of SAT problem: 0 cells, 61 variables, 173 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $mod$constmuldivmod_ref.v:49$36: $auto$share.cc:977:make_cell_activation_logic$181
      New cell: $auto$share.cc:667:make_supercell$188 ($mod)
  Analyzing resource sharing options for $auto$share.cc:667:make_supercell$188 ($mod):
    Found 4 activation_patterns using ctrl signal { $procmux$60_CMP $procmux$57_CMP $procmux$54_CMP $procmux$51_CMP }.
    No candidates found.
  Analyzing resource sharing options for $div$constmuldivmod_ref.v:60$44 ($div):
    Found 1 activation_patterns using ctrl signal $procmux$52_CMP.
    Found 3 candidates: $div$constmuldivmod_ref.v:56$41 $div$constmuldivmod_ref.v:52$38 $div$constmuldivmod_ref.v:48$35
    Analyzing resource sharing with $div$constmuldivmod_ref.v:56$41 ($div):
      Found 1 activation_patterns using ctrl signal $procmux$55_CMP.
      Activation pattern for cell $div$constmuldivmod_ref.v:60$44: $procmux$52_CMP = 1'1
      Activation pattern for cell $div$constmuldivmod_ref.v:56$41: $procmux$55_CMP = 1'1
      Size of SAT problem: 0 cells, 41 variables, 107 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $div$constmuldivmod_ref.v:60$44: $auto$share.cc:977:make_cell_activation_logic$191
      New cell: $auto$share.cc:667:make_supercell$198 ($div)
  Analyzing resource sharing options for $auto$share.cc:667:make_supercell$198 ($div):
    Found 2 activation_patterns using ctrl signal { $procmux$55_CMP $procmux$52_CMP }.
    Found 2 candidates: $div$constmuldivmod_ref.v:52$38 $div$constmuldivmod_ref.v:48$35
    Analyzing resource sharing with $div$constmuldivmod_ref.v:52$38 ($div):
      Found 1 activation_patterns using ctrl signal $procmux$58_CMP.
      Activation pattern for cell $auto$share.cc:667:make_supercell$198: $procmux$52_CMP = 1'1
      Activation pattern for cell $auto$share.cc:667:make_supercell$198: $procmux$55_CMP = 1'1
      Activation pattern for cell $div$constmuldivmod_ref.v:52$38: $procmux$58_CMP = 1'1
      Size of SAT problem: 0 cells, 53 variables, 145 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $div$constmuldivmod_ref.v:52$38: $auto$share.cc:977:make_cell_activation_logic$201
      New cell: $auto$share.cc:667:make_supercell$208 ($div)
  Analyzing resource sharing options for $auto$share.cc:667:make_supercell$208 ($div):
    Found 3 activation_patterns using ctrl signal { $procmux$58_CMP $procmux$55_CMP $procmux$52_CMP }.
    Found 1 candidates: $div$constmuldivmod_ref.v:48$35
    Analyzing resource sharing with $div$constmuldivmod_ref.v:48$35 ($div):
      Found 1 activation_patterns using ctrl signal $procmux$61_CMP.
      Activation pattern for cell $auto$share.cc:667:make_supercell$208: $procmux$52_CMP = 1'1
      Activation pattern for cell $auto$share.cc:667:make_supercell$208: $procmux$55_CMP = 1'1
      Activation pattern for cell $auto$share.cc:667:make_supercell$208: $procmux$58_CMP = 1'1
      Activation pattern for cell $div$constmuldivmod_ref.v:48$35: $procmux$61_CMP = 1'1
      Size of SAT problem: 0 cells, 61 variables, 173 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $div$constmuldivmod_ref.v:48$35: $auto$share.cc:977:make_cell_activation_logic$211
      New cell: $auto$share.cc:667:make_supercell$218 ($div)
  Analyzing resource sharing options for $auto$share.cc:667:make_supercell$218 ($div):
    Found 4 activation_patterns using ctrl signal { $procmux$61_CMP $procmux$58_CMP $procmux$55_CMP $procmux$52_CMP }.
    No candidates found.
Removing 12 cells in module constmuldivmod:
  Removing cell $div$constmuldivmod_ref.v:48$35 ($div).
  Removing cell $auto$share.cc:667:make_supercell$208 ($div).
  Removing cell $div$constmuldivmod_ref.v:52$38 ($div).
  Removing cell $auto$share.cc:667:make_supercell$198 ($div).
  Removing cell $div$constmuldivmod_ref.v:56$41 ($div).
  Removing cell $div$constmuldivmod_ref.v:60$44 ($div).
  Removing cell $mod$constmuldivmod_ref.v:49$36 ($mod).
  Removing cell $auto$share.cc:667:make_supercell$178 ($mod).
  Removing cell $mod$constmuldivmod_ref.v:53$39 ($mod).
  Removing cell $auto$share.cc:667:make_supercell$168 ($mod).
  Removing cell $mod$constmuldivmod_ref.v:57$42 ($mod).
  Removing cell $mod$constmuldivmod_ref.v:61$45 ($mod).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.
<suppressed ~12 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
<suppressed ~18 debug messages>
Removed a total of 6 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
    New ctrl vector for $pmux cell $procmux$49: { $procmux$90_CMP $procmux$88_CMP $procmux$87_CMP $procmux$85_CMP $procmux$84_CMP $procmux$82_CMP $procmux$81_CMP $procmux$75_CMP $auto$opt_reduce.cc:134:opt_mux$139 $procmux$73_CMP $procmux$72_CMP $auto$opt_reduce.cc:134:opt_mux$137 $procmux$70_CMP $procmux$69_CMP $auto$opt_reduce.cc:134:opt_mux$135 $procmux$67_CMP $procmux$66_CMP $auto$opt_reduce.cc:134:opt_mux$133 $auto$opt_reduce.cc:134:opt_mux$131 $auto$opt_reduce.cc:134:opt_mux$129 $procmux$61_CMP $procmux$60_CMP $procmux$59_CMP $procmux$58_CMP $procmux$57_CMP $procmux$56_CMP $procmux$53_CMP $auto$opt_reduce.cc:134:opt_mux$224 $auto$opt_reduce.cc:134:opt_mux$222 $procmux$50_CMP }
  Optimizing cells in module \constmuldivmod.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..
Removed 0 unused cells and 24 unused wires.
<suppressed ~7 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
    New ctrl vector for $pmux cell $procmux$49: { $procmux$90_CMP $procmux$88_CMP $procmux$87_CMP $procmux$85_CMP $procmux$84_CMP $procmux$82_CMP $procmux$81_CMP $procmux$75_CMP $auto$opt_reduce.cc:134:opt_mux$139 $procmux$73_CMP $procmux$72_CMP $auto$opt_reduce.cc:134:opt_mux$137 $procmux$70_CMP $procmux$69_CMP $auto$opt_reduce.cc:134:opt_mux$135 $procmux$67_CMP $procmux$66_CMP $auto$opt_reduce.cc:134:opt_mux$133 $auto$opt_reduce.cc:134:opt_mux$131 $auto$opt_reduce.cc:134:opt_mux$129 $procmux$59_CMP $procmux$56_CMP $procmux$53_CMP $auto$opt_reduce.cc:134:opt_mux$228 $auto$opt_reduce.cc:134:opt_mux$226 $procmux$50_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$225: { $auto$share.cc:977:make_cell_activation_logic$181 $procmux$54_CMP $auto$share.cc:977:make_cell_activation_logic$161 $auto$share.cc:977:make_cell_activation_logic$171 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:128:opt_mux$227: { $auto$share.cc:977:make_cell_activation_logic$211 $procmux$55_CMP $auto$share.cc:977:make_cell_activation_logic$201 $auto$share.cc:977:make_cell_activation_logic$191 }
  Optimizing cells in module \constmuldivmod.
Performed a total of 3 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

3.13.13. Executing OPT_DFF pass (perform DFF optimizations).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

3.13.16. Rerunning OPT passes. (Maybe there is more to do..)

3.13.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.13.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
Performed a total of 0 changes.

3.13.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

3.13.20. Executing OPT_DFF pass (perform DFF optimizations).

3.13.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

3.13.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

3.13.23. Finished OPT passes. (There is nothing left to do.)

3.14. Executing MEMORY pass.

3.14.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.14.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.14.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.14.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.14.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

3.14.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.14.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.14.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

3.14.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend: /home/zhigang/FeatEx/share/techmap.v
Parsing Verilog input from `/home/zhigang/FeatEx/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using template $paramod$08c2d337fba0d8fba53e35b89be96dd105931d9e\_90_mod for cells of type $mod.
Using template $paramod$38e8498ccdc425801fe5312e427e3cf0d9089c58\_90_alu for cells of type $alu.
Using template $paramod$821d2886e47353e724eaca46af4992e9c3e6ac1d\_90_alu for cells of type $alu.
Using template $paramod$3e96e356bb68fcbd4f9c12f6d97ec8513d1af8c6\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$fd7bfb1a4f3a7c2ac1a35670d0fa64ccc7b91841\_90_alu for cells of type $alu.
Using template $paramod$08c2d337fba0d8fba53e35b89be96dd105931d9e\_90_div for cells of type $div.
Using template $paramod$fe1a107e653bb51493b30c94d3d7f717e654795e\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$08c2d337fba0d8fba53e35b89be96dd105931d9e\$__div_mod_trunc for cells of type $__div_mod_trunc.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000111 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Running "alumacc" on wrapper $extern:wrap:$neg:Y_WIDTH=8:A_WIDTH=8:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:Y_WIDTH=8:A_WIDTH=8:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:Y_WIDTH=8:A_WIDTH=8:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $ne.
Using template $paramod\$__div_mod_u\WIDTH=32'00000000000000000000000000001000 for cells of type $__div_mod_u.
Using extmapper simplemap for cells of type $or.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=8:B_WIDTH=8:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=8:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=9:B_WIDTH=9:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=9:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=10:B_WIDTH=10:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=10:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=11:B_WIDTH=11:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=11:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=12:B_WIDTH=12:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=12:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=13:B_WIDTH=13:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=13:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=14:B_WIDTH=14:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=14:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$sub:Y_WIDTH=15:B_WIDTH=15:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Running "alumacc" on wrapper $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$ge:Y_WIDTH=1:B_WIDTH=15:A_WIDTH=8:B_SIGNED=0:A_SIGNED=0:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$78464f9f65d57061f7490f3fe5dd257e4a61e2b7\_90_alu for cells of type $alu.
Using template $paramod$78648aff6d035ceca1e51be5292d8e9748cdc2be\_90_alu for cells of type $alu.
Using template $paramod$5ece6c5f43fb71f6d288804e401c83703363913e\_90_alu for cells of type $alu.
Using template $paramod$faa58573f9d1592ccf4bfc12206a71a8d2733e33\_90_alu for cells of type $alu.
Using template $paramod$7fb440a4f56077cf55596eac05c516869c752d23\_90_alu for cells of type $alu.
Using template $paramod$33acca59acb78d0be1d2963f30b104550f2b2c75\_90_alu for cells of type $alu.
Using template $paramod$f7417944f96f261f97a49c7e5ba603b32499b5a9\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001001 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001011 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001100 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001101 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001111 for cells of type $lcu.
No more expansions possible.
<suppressed ~4283 debug messages>

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.
<suppressed ~3466 debug messages>

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
<suppressed ~4401 debug messages>
Removed a total of 1467 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..
Removed 153 unused cells and 3295 unused wires.
<suppressed ~154 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \constmuldivmod..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \constmuldivmod.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\constmuldivmod'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \constmuldivmod..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module constmuldivmod.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Summary of detected clock domains:
  1307 cells in clk={ }, en={ }

6.2. Extracting gate netlist of module `\constmuldivmod' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 1307 gates and 1323 wires to a netlist network with 14 inputs and 8 outputs.

6.2.1. Executing ABC.
