+ body
+ cd defvalue.out
++ basename defvalue.sv
+ fn=defvalue.sv
++ basename defvalue
+ bn=defvalue
+ refext=v
+ rm -f defvalue_ref.fir
+ [[ sv == \v ]]
+ [[ sv == \a\i\g ]]
+ [[ sv == \a\a\g ]]
+ refext=sv
+ cp ../defvalue.sv defvalue_ref.sv
+ '[' '!' -f ../defvalue_tb.v ']'
+ /home/zhigang/FeatEx/tests/tools/../../yosys -f 'verilog -noblackbox -sv  -D_AUTOTB' -b 'test_autotb ' -o defvalue_tb.v defvalue_ref.sv

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Parsing `defvalue_ref.sv' using frontend `verilog -noblackbox -sv  -D_AUTOTB' --

1. Executing Verilog-2005 frontend: defvalue_ref.sv
Parsing SystemVerilog input from `defvalue_ref.sv' to AST representation.
Generating RTLIL representation for module `\defvalue_top'.
Generating RTLIL representation for module `\cnt'.
Successfully finished Verilog frontend.

-- Writing to `defvalue_tb.v' using backend `test_autotb ' --

2. Executing TEST_AUTOTB backend (auto-generate pseudo-random test benches).
Generating test bench for module `\cnt'.
Generating test bench for module `\defvalue_top'.

End of script. Logfile hash: 91bcba3549, CPU: user 0.00s system 0.00s, MEM: 10.28 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 50% 1x test_autotb (0 sec), 50% 1x read_verilog (0 sec)
+ false
+ compile_and_run defvalue_tb_ref defvalue_out_ref defvalue_tb.v defvalue_ref.sv /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ exe=defvalue_tb_ref
+ output=defvalue_out_ref
+ shift 2
+ '[' sv == sv ']'
+ language_gen=-g2012
+ false
+ false
+ iverilog -g2012 '-Doutfile="defvalue_out_ref"' -s testbench -o defvalue_tb_ref defvalue_tb.v defvalue_ref.sv /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
defvalue_ref.sv:1: warning: input port delta is coerced to inout.
+ vvp -n defvalue_tb_ref
+ false
+ test_count=0
+ '[' 'verilog -noblackbox -sv' = verific -o 'verilog -noblackbox -sv' = verific_gates ']'
+ '[' -n '' ']'
+ '[' -n '' ']'
+ '[' 'verilog -noblackbox -sv' = verific ']'
+ '[' 'verilog -noblackbox -sv' = verific_gates ']'
+ test_passes -f 'verilog -noblackbox -sv ' -p 'hierarchy; proc; opt -nodffe -nosdff; fsm; opt; memory; opt -full -fine' defvalue_ref.sv
+ /home/zhigang/FeatEx/tests/tools/../../yosys -b 'verilog -noattr -noexpr -siminit' -o defvalue_syn0.v -f 'verilog -noblackbox -sv ' -p 'hierarchy; proc; opt -nodffe -nosdff; fsm; opt; memory; opt -full -fine' defvalue_ref.sv

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Parsing `defvalue_ref.sv' using frontend `verilog -noblackbox -sv ' --

1. Executing Verilog-2005 frontend: defvalue_ref.sv
Parsing SystemVerilog input from `defvalue_ref.sv' to AST representation.
Generating RTLIL representation for module `\defvalue_top'.
Generating RTLIL representation for module `\cnt'.
Successfully finished Verilog frontend.

-- Running command `hierarchy; proc; opt -nodffe -nosdff; fsm; opt; memory; opt -full -fine' --

2. Executing HIERARCHY pass (managing design hierarchy).
Parameter 1 (\initval) = 2

2.1. Executing AST frontend in derive mode using pre-parsed AST for module `\cnt'.
Parameter 1 (\initval) = 2
Generating RTLIL representation for module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Parameter 1 (\initval) = 1

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\cnt'.
Parameter 1 (\initval) = 1
Generating RTLIL representation for module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.

3. Executing PROC pass (convert processes to netlists).

3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:0$9'.
  Set init value: \cnt = 4'0001
Found init rule in `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:0$6'.
  Set init value: \cnt = 4'0010
Found init rule in `\cnt.$proc$defvalue_ref.sv:0$3'.
  Set init value: \cnt = 4'0000

3.5. Executing PROC_ARST pass (detect async resets in processes).

3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:0$9'.
Creating decoders for process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:20$7'.
Creating decoders for process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:0$6'.
Creating decoders for process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:20$4'.
Creating decoders for process `\cnt.$proc$defvalue_ref.sv:0$3'.
Creating decoders for process `\cnt.$proc$defvalue_ref.sv:20$1'.

3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\cnt\initval=s32'00000000000000000000000000000001.\cnt' using process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:20$7'.
  created $dff cell `$procdff$10' with positive edge clock.
Creating register for signal `$paramod\cnt\initval=s32'00000000000000000000000000000010.\cnt' using process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:20$4'.
  created $dff cell `$procdff$11' with positive edge clock.
Creating register for signal `\cnt.\cnt' using process `\cnt.$proc$defvalue_ref.sv:20$1'.
  created $dff cell `$procdff$12' with positive edge clock.

3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:0$9'.
Removing empty process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:20$7'.
Removing empty process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:0$6'.
Removing empty process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:20$4'.
Removing empty process `cnt.$proc$defvalue_ref.sv:0$3'.
Removing empty process `cnt.$proc$defvalue_ref.sv:20$1'.
Cleaned up 0 empty switches.

3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

4. Executing OPT pass (performing simple optimizations).

4.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

4.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

4.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

4.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

4.6. Executing OPT_DFF pass (perform DFF optimizations).

4.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~3 debug messages>

4.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

4.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

4.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

4.13. Executing OPT_DFF pass (perform DFF optimizations).

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

4.16. Finished OPT passes. (There is nothing left to do.)

5. Executing FSM pass (extract and optimize FSM).

5.1. Executing FSM_DETECT pass (finding FSMs in design).

5.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

5.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6. Executing OPT pass (performing simple optimizations).

6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

6.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

6.9. Finished OPT passes. (There is nothing left to do.)

7. Executing MEMORY pass.

7.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

7.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

7.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

7.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

7.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

7.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

7.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

7.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

7.9. Executing MEMORY_COLLECT pass (generating $mem cells).

7.10. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

8.6. Executing OPT_SHARE pass.

8.7. Executing OPT_DFF pass (perform DFF optimizations).

8.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

8.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

8.10. Finished OPT passes. (There is nothing left to do.)

-- Writing to `defvalue_syn0.v' using backend `verilog -noattr -noexpr -siminit' --

9. Executing Verilog backend.
Dumping module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Dumping module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Dumping module `\cnt'.
Dumping module `\defvalue_top'.

End of script. Logfile hash: 5eea481b5b, CPU: user 0.06s system 0.00s, MEM: 11.18 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 30% 4x opt_dff (0 sec), 23% 7x opt_merge (0 sec), ...
+ compile_and_run defvalue_tb_syn0 defvalue_out_syn0 defvalue_tb.v defvalue_syn0.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ exe=defvalue_tb_syn0
+ output=defvalue_out_syn0
+ shift 2
+ '[' v == sv ']'
+ language_gen=-g2005
+ false
+ false
+ iverilog -g2005 '-Doutfile="defvalue_out_syn0"' -s testbench -o defvalue_tb_syn0 defvalue_tb.v defvalue_syn0.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ vvp -n defvalue_tb_syn0
+ false
+ /home/zhigang/FeatEx/tests/tools/cmp_tbdata defvalue_out_ref defvalue_out_syn0
+ test_count=1
+ test_passes -f 'verilog -noblackbox -sv ' -p 'hierarchy; synth -run coarse; techmap; opt; abc -dff' defvalue_ref.sv
+ /home/zhigang/FeatEx/tests/tools/../../yosys -b 'verilog -noattr -noexpr -siminit' -o defvalue_syn1.v -f 'verilog -noblackbox -sv ' -p 'hierarchy; synth -run coarse; techmap; opt; abc -dff' defvalue_ref.sv

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)


-- Parsing `defvalue_ref.sv' using frontend `verilog -noblackbox -sv ' --

1. Executing Verilog-2005 frontend: defvalue_ref.sv
Parsing SystemVerilog input from `defvalue_ref.sv' to AST representation.
Generating RTLIL representation for module `\defvalue_top'.
Generating RTLIL representation for module `\cnt'.
Successfully finished Verilog frontend.

-- Running command `hierarchy; synth -run coarse; techmap; opt; abc -dff' --

2. Executing HIERARCHY pass (managing design hierarchy).
Parameter 1 (\initval) = 2

2.1. Executing AST frontend in derive mode using pre-parsed AST for module `\cnt'.
Parameter 1 (\initval) = 2
Generating RTLIL representation for module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Parameter 1 (\initval) = 1

2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\cnt'.
Parameter 1 (\initval) = 1
Generating RTLIL representation for module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.

3. Executing SYNTH pass.

3.1. Executing PROC pass (convert processes to netlists).

3.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.1.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 6 assignments to connections.

3.1.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:0$9'.
  Set init value: \cnt = 4'0001
Found init rule in `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:0$6'.
  Set init value: \cnt = 4'0010
Found init rule in `\cnt.$proc$defvalue_ref.sv:0$3'.
  Set init value: \cnt = 4'0000

3.1.5. Executing PROC_ARST pass (detect async resets in processes).

3.1.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:0$9'.
Creating decoders for process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:20$7'.
Creating decoders for process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:0$6'.
Creating decoders for process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:20$4'.
Creating decoders for process `\cnt.$proc$defvalue_ref.sv:0$3'.
Creating decoders for process `\cnt.$proc$defvalue_ref.sv:20$1'.

3.1.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.1.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\cnt\initval=s32'00000000000000000000000000000001.\cnt' using process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:20$7'.
  created $dff cell `$procdff$10' with positive edge clock.
Creating register for signal `$paramod\cnt\initval=s32'00000000000000000000000000000010.\cnt' using process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:20$4'.
  created $dff cell `$procdff$11' with positive edge clock.
Creating register for signal `\cnt.\cnt' using process `\cnt.$proc$defvalue_ref.sv:20$1'.
  created $dff cell `$procdff$12' with positive edge clock.

3.1.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.1.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:0$9'.
Removing empty process `$paramod\cnt\initval=s32'00000000000000000000000000000001.$proc$defvalue_ref.sv:20$7'.
Removing empty process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:0$6'.
Removing empty process `$paramod\cnt\initval=s32'00000000000000000000000000000010.$proc$defvalue_ref.sv:20$4'.
Removing empty process `cnt.$proc$defvalue_ref.sv:0$3'.
Removing empty process `cnt.$proc$defvalue_ref.sv:20$1'.
Cleaned up 0 empty switches.

3.1.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

3.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

3.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..
Removed 0 unused cells and 6 unused wires.
<suppressed ~3 debug messages>

3.4. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\cnt\initval=s32'00000000000000000000000000000001...
Checking module $paramod\cnt\initval=s32'00000000000000000000000000000010...
Checking module cnt...
Checking module defvalue_top...
Found and reported 0 problems.

3.5. Executing OPT pass (performing simple optimizations).

3.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

3.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

3.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

3.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

3.5.6. Executing OPT_DFF pass (perform DFF optimizations).

3.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

3.5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

3.5.9. Finished OPT passes. (There is nothing left to do.)

3.6. Executing FSM pass (extract and optimize FSM).

3.6.1. Executing FSM_DETECT pass (finding FSMs in design).

3.6.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.6.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

3.6.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.6.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.6.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.6.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.7. Executing OPT pass (performing simple optimizations).

3.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

3.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

3.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

3.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

3.7.6. Executing OPT_DFF pass (perform DFF optimizations).

3.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

3.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

3.7.9. Finished OPT passes. (There is nothing left to do.)

3.8. Executing WREDUCE pass (reducing word size of cells).

3.9. Executing PEEPOPT pass (run peephole optimizers).

3.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001:
  creating $macc model for $add$defvalue_ref.sv:21$8 ($add).
  creating $alu model for $macc $add$defvalue_ref.sv:21$8.
  creating $alu cell for $add$defvalue_ref.sv:21$8: $auto$alumacc.cc:485:replace_alu$13
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010:
  creating $macc model for $add$defvalue_ref.sv:21$5 ($add).
  creating $alu model for $macc $add$defvalue_ref.sv:21$5.
  creating $alu cell for $add$defvalue_ref.sv:21$5: $auto$alumacc.cc:485:replace_alu$16
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module cnt:
  creating $macc model for $add$defvalue_ref.sv:21$2 ($add).
  creating $alu model for $macc $add$defvalue_ref.sv:21$2.
  creating $alu cell for $add$defvalue_ref.sv:21$2: $auto$alumacc.cc:485:replace_alu$19
  created 1 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module defvalue_top:
  created 0 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

3.13.6. Executing OPT_DFF pass (perform DFF optimizations).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing MEMORY pass.

3.14.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.14.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.14.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.14.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.14.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

3.14.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.14.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.14.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

3.14.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

4. Executing TECHMAP pass (map to technology primitives).

4.1. Executing Verilog-2005 frontend: /home/zhigang/FeatEx/share/techmap.v
Parsing Verilog input from `/home/zhigang/FeatEx/share/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.2. Continuing TECHMAP pass.
Using template $paramod$740b056ede97228d3eae64ea2fdc81f0a33e0fe7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~255 debug messages>

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
<suppressed ~8 debug messages>
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
<suppressed ~8 debug messages>
Optimizing module cnt.
<suppressed ~8 debug messages>
Optimizing module defvalue_top.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..
Removed 30 unused cells and 87 unused wires.
<suppressed ~33 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000001..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module $paramod\cnt\initval=s32'00000000000000000000000000000010..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \cnt..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \defvalue_top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000001.
  Optimizing cells in module $paramod\cnt\initval=s32'00000000000000000000000000000010.
  Optimizing cells in module \cnt.
  Optimizing cells in module \defvalue_top.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Finding identical cells in module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Finding identical cells in module `\cnt'.
Finding identical cells in module `\defvalue_top'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000001..
Finding unused cells or wires in module $paramod\cnt\initval=s32'00000000000000000000000000000010..
Finding unused cells or wires in module \cnt..
Finding unused cells or wires in module \defvalue_top..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000001.
Optimizing module $paramod\cnt\initval=s32'00000000000000000000000000000010.
Optimizing module cnt.
Optimizing module defvalue_top.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Summary of detected clock domains:
  18 cells in clk=\clock, en={ }

6.2. Extracting gate netlist of module `$paramod\cnt\initval=s32'00000000000000000000000000000001' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock
Extracted 18 gates and 22 wires to a netlist network with 4 inputs and 4 outputs.

6.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        1
ABC RESULTS:               BUF cells:        3
ABC RESULTS:               DFF cells:        4
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOT cells:        1
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

6.3. Summary of detected clock domains:
  18 cells in clk=\clock, en={ }

6.4. Extracting gate netlist of module `$paramod\cnt\initval=s32'00000000000000000000000000000010' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock
Extracted 18 gates and 22 wires to a netlist network with 4 inputs and 4 outputs.

6.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.4.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:               BUF cells:        3
ABC RESULTS:               DFF cells:        4
ABC RESULTS:              NAND cells:        5
ABC RESULTS:               NOT cells:        1
ABC RESULTS:             ORNOT cells:        1
ABC RESULTS:              XNOR cells:        4
ABC RESULTS:               XOR cells:        3
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

6.5. Summary of detected clock domains:
  18 cells in clk=\clock, en={ }

6.6. Extracting gate netlist of module `\cnt' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock
Extracted 18 gates and 22 wires to a netlist network with 4 inputs and 4 outputs.

6.6.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.6.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:               BUF cells:        4
ABC RESULTS:               DFF cells:        4
ABC RESULTS:              NAND cells:        6
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:        5
ABC RESULTS:        internal signals:       14
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        4
Removing temp directory.

6.7. Summary of detected clock domains:
  2 cells in clk={ }, en={ }

6.8. Extracting gate netlist of module `\defvalue_top' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

-- Writing to `defvalue_syn1.v' using backend `verilog -noattr -noexpr -siminit' --

7. Executing Verilog backend.
Dumping module `$paramod\cnt\initval=s32'00000000000000000000000000000001'.
Dumping module `$paramod\cnt\initval=s32'00000000000000000000000000000010'.
Dumping module `\cnt'.
Dumping module `\defvalue_top'.

End of script. Logfile hash: d1ad88b9b2, CPU: user 0.16s system 0.02s, MEM: 13.62 MB peak
Yosys 0.10+12 (git sha1 4d87019, gcc 7.4.0-1ubuntu1~16.04~ppa1 -fPIC -Os)
Time spent: 59% 1x abc (0 sec), 9% 13x opt_expr (0 sec), ...
+ compile_and_run defvalue_tb_syn1 defvalue_out_syn1 defvalue_tb.v defvalue_syn1.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ exe=defvalue_tb_syn1
+ output=defvalue_out_syn1
+ shift 2
+ '[' v == sv ']'
+ language_gen=-g2005
+ false
+ false
+ iverilog -g2005 '-Doutfile="defvalue_out_syn1"' -s testbench -o defvalue_tb_syn1 defvalue_tb.v defvalue_syn1.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simlib.v /home/zhigang/FeatEx/tests/tools/../../techlibs/common/simcells.v
+ vvp -n defvalue_tb_syn1
+ false
+ /home/zhigang/FeatEx/tests/tools/cmp_tbdata defvalue_out_ref defvalue_out_syn1
Error in testbench output compare (line=613):
-#OUT# 0100 0 0001               187400         466
+
